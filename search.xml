<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Vim</title>
      <link href="/_posts/Tools/Vim.md/"/>
      <url>/_posts/Tools/Vim.md/</url>
      
        <content type="html"><![CDATA[<h1 id="退出"><a href="#退出" class="headerlink" title="退出"></a>退出</h1><table><thead><tr><th>命令</th><th>作用</th></tr></thead><tbody><tr><td><code>:q</code></td><td>quit</td></tr><tr><td><code>:q!</code></td><td>force quit</td></tr><tr><td><code>:wq</code></td><td>write (save) and quit</td></tr></tbody></table><h1 id="插入"><a href="#插入" class="headerlink" title="插入"></a>插入</h1><table><thead><tr><th>命令</th><th>作用</th></tr></thead><tbody><tr><td><code>a</code></td><td>append (write after this char)</td></tr><tr><td><code>i</code></td><td>insert (write before ths char)</td></tr><tr><td><code>o</code></td><td>open a new line below</td></tr><tr><td><code>A</code></td><td>append after line</td></tr><tr><td><code>I</code></td><td>insert before line</td></tr><tr><td><code>O</code></td><td>open a new line above</td></tr><tr><td><code>gi</code></td><td>insert at the position last edited</td></tr><tr><td><code>ESC</code></td><td>quit the insert mode, go back to the normal mode</td></tr><tr><td><code>ctrl+c</code></td><td>quit the insert mode, go back to the normal mode</td></tr><tr><td><code>ctrl+[</code></td><td>quit the insert mode, go back to the normal mode</td></tr></tbody></table><h1 id="移动"><a href="#移动" class="headerlink" title="移动"></a>移动</h1><table><thead><tr><th>命令</th><th>作用</th></tr></thead><tbody><tr><td><code>h</code></td><td>move left</td></tr><tr><td><code>j</code></td><td>move down</td></tr><tr><td><code>k</code></td><td>move up</td></tr><tr><td><code>l</code></td><td>move right</td></tr><tr><td><code>w/W</code></td><td>move to next word&#x2F;Word start</td></tr><tr><td><code>e/E</code></td><td>move to next word&#x2F;Word tail</td></tr><tr><td><code>b/B</code></td><td>move to previous word&#x2F;Word start</td></tr><tr><td><code>0</code></td><td>move to the first char of the line</td></tr><tr><td><code>^</code></td><td>move to the first non-blank char of the line</td></tr><tr><td><code>$</code></td><td>move to the last char of the line</td></tr><tr><td><code>g_</code></td><td>move to the last non-blank char of the line</td></tr><tr><td><code>gg</code></td><td>move to the start of the file</td></tr><tr><td><code>G</code></td><td>move to the tail of the file</td></tr><tr><td><code>ctrl+o</code></td><td>move to the previous position</td></tr><tr><td><code>H</code></td><td>move to the start of the screen</td></tr><tr><td><code>M</code></td><td>move to the middle of the screen</td></tr><tr><td><code>L</code></td><td>move to the tail of the screen</td></tr><tr><td><code>ctrl+u</code></td><td>page up</td></tr><tr><td><code>ctrl+f</code></td><td>page down</td></tr><tr><td><code>zz</code></td><td>put the line cursor at to the middle of the screen</td></tr></tbody></table><ul><li><code>word</code> 指以非空白符分隔的单词</li><li><code>Word</code> 指以空白符分隔的单词</li></ul><h1 id="行内搜索移动"><a href="#行内搜索移动" class="headerlink" title="行内搜索移动"></a>行内搜索移动</h1><table><thead><tr><th>命令</th><th>作用</th></tr></thead><tbody><tr><td><code>f&#123;char&#125;</code></td><td>move to the next char we searched</td></tr><tr><td><code>F&#123;char&#125;</code></td><td>move to the previous char we searched</td></tr><tr><td><code>t&#123;char&#125;</code></td><td>move to the char before the next char we searched</td></tr><tr><td><code>;</code></td><td>move to the next char meeting the condition</td></tr><tr><td><code>,</code></td><td>move to the previous char meeting the condition</td></tr></tbody></table><h1 id="文本对象"><a href="#文本对象" class="headerlink" title="文本对象"></a>文本对象</h1><table><thead><tr><th>对象</th><th>含义</th></tr></thead><tbody><tr><td><code>w</code></td><td>word</td></tr><tr><td><code>s</code></td><td>sentence</td></tr><tr><td><code>p</code></td><td>paragraph</td></tr><tr><td><code>i</code></td><td>decorate inner</td></tr><tr><td><code>a</code></td><td>decorate around</td></tr><tr><td><code>i(</code> or <code>i)</code></td><td>the chars in () but not include ()</td></tr><tr><td><code>a(</code> or <code>a)</code></td><td>the chars in () and include ()</td></tr><tr><td><code>i&lt;</code> or <code>i&gt;</code></td><td>the chars in &lt;&gt; but not include &lt;&gt;</td></tr><tr><td><code>a&lt;</code> or <code>a&gt;</code></td><td>the chars in &lt;&gt; and include &lt;&gt;</td></tr><tr><td><code>i&#123;</code> or <code>i&#125;</code></td><td>the chars in {} but not include {}</td></tr><tr><td><code>a&#123;</code> or <code>a&#125;</code></td><td>the chars in {} and include {}</td></tr><tr><td><code>i[</code> or <code>i]</code></td><td>the chars in [] but not include []</td></tr><tr><td><code>a[</code> or <code>a]</code></td><td>the chars in [] and include []</td></tr><tr><td><code>i&quot;</code></td><td>the chars in “” but not include “”</td></tr><tr><td><code>a&quot;</code></td><td>the chars in “” and include “”</td></tr><tr><td><code>i&#39;</code></td><td>the chars in ‘’ but not include ‘’</td></tr><tr><td><code>a&#39;</code></td><td>the chars in ‘’ and include ‘’</td></tr></tbody></table><h1 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h1><table><thead><tr><th>命令</th><th>作用</th></tr></thead><tbody><tr><td><code>x</code></td><td>delete a char</td></tr><tr><td><code>daw</code></td><td>delete a word and the space around it</td></tr><tr><td><code>diw</code></td><td>delete a word</td></tr><tr><td><code>dw</code></td><td>the same function as daw</td></tr><tr><td><code>dd</code></td><td>delete current line</td></tr><tr><td><code>dt&#123;char&#125;</code></td><td>delete between the cursor and the char</td></tr></tbody></table><ul><li><code>x</code> 和 <code>d</code> 可以配合数字使用</li><li>可以<code>d</code> 文本对象</li></ul><h1 id="修改"><a href="#修改" class="headerlink" title="修改"></a>修改</h1><table><thead><tr><th>命令</th><th>作用</th></tr></thead><tbody><tr><td><code>r</code></td><td>replace a char</td></tr><tr><td><code>s</code></td><td>delete a char and into the insert mode</td></tr><tr><td><code>R</code></td><td>replace next char untill quit</td></tr><tr><td><code>S</code></td><td>delete the whole line and into the insert mode</td></tr><tr><td><code>caw/cw</code></td><td>delete current word and into the insert mode</td></tr><tr><td><code>ct&#123;char&#125;</code></td><td>delete between the cursor and the char and into the insert mode</td></tr></tbody></table><ul><li>可以 <code>c</code> 文本对象</li></ul><h1 id="查询"><a href="#查询" class="headerlink" title="查询"></a>查询</h1><table><thead><tr><th>命令</th><th>作用</th></tr></thead><tbody><tr><td><code>/</code></td><td>search from start</td></tr><tr><td><code>?</code></td><td>search from tail</td></tr><tr><td><code>n</code></td><td>next maching</td></tr><tr><td><code>N</code></td><td>previous maching</td></tr><tr><td><code>*</code></td><td>next matching of current word</td></tr><tr><td><code>#</code></td><td>previous maching of current word</td></tr></tbody></table><h1 id="替换"><a href="#替换" class="headerlink" title="替换"></a>替换</h1><table><thead><tr><th>命令</th><th>作用</th></tr></thead><tbody><tr><td><code>:[range]s/&#123;pattern&#125;/&#123;string&#125;/[flags]</code></td><td></td></tr></tbody></table><ul><li><code>range</code> 表示范围，比如 10, 20 表示 10-20 行，%表示全部</li><li><code>s</code> 代表 substitute 替换</li><li><code>pattern</code> 是要替换的模式</li><li><code>string</code> 是替换后的文本</li><li><code>flags</code> 替换位标志<ul><li><code>g</code> (global) 表示全局范围内执行</li><li><code>c</code> (confirm) 表示确认，可以确认或者拒绝修改</li><li><code>n</code> (number) 报告匹配到的次数而不替换，可以用来查询匹配次数</li></ul></li></ul><h1 id="保存"><a href="#保存" class="headerlink" title="保存"></a>保存</h1><table><thead><tr><th>命令</th><th>作用</th></tr></thead><tbody><tr><td><code>:w</code></td><td>write (save)</td></tr></tbody></table><h1 id="复制粘贴"><a href="#复制粘贴" class="headerlink" title="复制粘贴"></a>复制粘贴</h1><table><thead><tr><th>命令</th><th>作用</th></tr></thead><tbody><tr><td><code>y</code></td><td>copy</td></tr><tr><td><code>p</code></td><td>paste</td></tr><tr><td><code>d</code></td><td>cut</td></tr><tr><td><code>yy</code></td><td>copy the whole line</td></tr></tbody></table><ul><li>可以 y 文本对象</li><li>寄存器<ul><li>通过 <code>&quot;&#123;register&#125;</code> 前缀指定寄存器，不指定默认用无名寄存器</li><li>有名寄存器 <code>a-z</code></li><li>复制专用寄存器 <code>&quot;0</code> 使用 y 复制的文本同时会被拷贝到复制寄存器 0</li><li>系统剪贴板 <code>&quot;+</code> 可以在复制前加上 <code>&quot;+</code> 复制到系统剪贴板</li><li>其他寄存器 <code>&quot;%</code> 当前文件名， <code>“.</code> 上次插入的文本</li></ul></li></ul><h1 id="撤销"><a href="#撤销" class="headerlink" title="撤销"></a>撤销</h1><table><thead><tr><th>命令</th><th>作用</th></tr></thead><tbody><tr><td><code>u</code></td><td>undo</td></tr></tbody></table><h1 id="分屏"><a href="#分屏" class="headerlink" title="分屏"></a>分屏</h1><table><thead><tr><th>命令</th><th>作用</th></tr></thead><tbody><tr><td><code>:vs</code></td><td>vertical split</td></tr><tr><td><code>:sp</code></td><td>horizontal split</td></tr></tbody></table><h1 id="文本选择"><a href="#文本选择" class="headerlink" title="文本选择"></a>文本选择</h1><table><thead><tr><th>命令</th><th>作用</th></tr></thead><tbody><tr><td><code>v</code></td><td>enter visual mode, then use direction key to select chars</td></tr><tr><td><code>V</code></td><td>select the whole line</td></tr><tr><td><code>ctrl+v</code></td><td>select a bolck using direction key</td></tr></tbody></table><h1 id="插入模式中删除"><a href="#插入模式中删除" class="headerlink" title="插入模式中删除"></a>插入模式中删除</h1><table><thead><tr><th>命令</th><th>作用</th></tr></thead><tbody><tr><td><code>ctrl+h</code></td><td>delete previous char</td></tr><tr><td><code>ctrl+w</code></td><td>delete chars from the start of the word to the cursor (when the cursor is at the tail of the word, delete the whole word)</td></tr><tr><td><code>ctrl+u</code></td><td>delete chars from the start of the line to the cursor (when the cursor is at the tail of the line, delete the whole line)</td></tr></tbody></table><h1 id="插入模式中粘贴"><a href="#插入模式中粘贴" class="headerlink" title="插入模式中粘贴"></a>插入模式中粘贴</h1><table><thead><tr><th>命令</th><th>作用</th></tr></thead><tbody><tr><td><code>ctrl+v</code></td><td>paste</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> Tools </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vim </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSS3新特性</title>
      <link href="/_posts/CSS3/14CSS3%E6%96%B0%E7%89%B9%E6%80%A7.md/"/>
      <url>/_posts/CSS3/14CSS3%E6%96%B0%E7%89%B9%E6%80%A7.md/</url>
      
        <content type="html"><![CDATA[<h1 id="CSS3-新增选择器"><a href="#CSS3-新增选择器" class="headerlink" title="CSS3 新增选择器"></a>CSS3 新增选择器</h1><h2 id="属性选择器"><a href="#属性选择器" class="headerlink" title="属性选择器"></a>属性选择器</h2><blockquote><p>根据标签中的属性来选择元素 </p></blockquote><table><thead><tr><th>选择符</th><th>简介</th></tr></thead><tbody><tr><td>E[att]</td><td>选择具有 att 属性的 E 元素</td></tr><tr><td>E[att&#x3D;”val”]</td><td>选择具有 att 属性且属性值等于 val 的 E 元素</td></tr><tr><td>E[att^&#x3D;”val”]</td><td>匹配具有 att 属性且值以 val 开头的 E 元素</td></tr><tr><td>E[att$&#x3D;”val”]</td><td>匹配具有 att 属性且值以 val 结尾的 E 元素</td></tr><tr><td>E[att*&#x3D;”val”]</td><td>匹配具有 att 属性且值中含有 val 的 E 元素</td></tr></tbody></table><p><strong>注意：<a href="1CSS%E5%9F%BA%E7%A1%80%E9%80%89%E6%8B%A9%E5%99%A8.md#%E7%B1%BB%E9%80%89%E6%8B%A9%E5%99%A8">类选择器</a>、属性选择器、<a href="2CSS%E5%A4%8D%E5%90%88%E9%80%89%E6%8B%A9%E5%99%A8.md#%E4%BC%AA%E7%B1%BB%E9%80%89%E6%8B%A9%E5%99%A8">伪类选择器</a>，权重为 0, 0，1，0。</strong></p><h2 id="结构伪类选择器"><a href="#结构伪类选择器" class="headerlink" title="结构伪类选择器"></a>结构伪类选择器</h2><blockquote><p>主要根据文档结构来选择器元素，常用于根据父级选择器里面的子元素</p></blockquote><table><thead><tr><th>选择符</th><th>简介</th></tr></thead><tbody><tr><td>E: first-child</td><td>匹配父元素中的第一个子元素 E</td></tr><tr><td>E: last-child</td><td>匹配父元素中最后一个 E 元素</td></tr><tr><td>E: nth-child (n)</td><td>匹配父元素中的第 n 个子元素 E</td></tr><tr><td>E: first-of-type</td><td>指定类型 E 的第一个</td></tr><tr><td>E: last-of-type</td><td>指定类型 E 的最后一个</td></tr><tr><td>E: nth-of-type (n)</td><td>指定类型 E 的第 n 个</td></tr></tbody></table><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">ul</span> <span class="selector-tag">li</span><span class="selector-pseudo">:first</span>-child&#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">background-color</span>: red;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>列表项一<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>列表项二<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>列表项三<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>列表项四<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><code>E:nth-child(n)</code>     匹配父元素的第 n 个子元素 E，也就是说，nth-child 对父元素里面所有孩子排序选择（序号是固定的）  先找到第 n 个孩子，然后看看是否和 E 匹配</li><li><code>E:nth-of-type(n)</code> 匹配同类型中的第 n 个同级兄弟元素 E，也就是说，对父元素里面指定子元素进行排序选择。先去匹配 E ，然后再根据 E 找第 n 个孩子</li></ul><p><strong>E: nth-child (n):</strong></p><blockquote><p>匹配到父元素的第 n 个元素</p></blockquote><ul><li><p>匹配到父元素的第 2 个子元素  </p><p><code>ul li:nth-child(2)&#123;&#125;</code></p></li><li><p>匹配到父元素的序号为奇数的子元素</p><p><code>ul li:nth-child(odd)&#123;&#125;</code>    <strong>odd</strong> 是关键字奇数的意思（3 个字母 ）</p></li><li><p>匹配到父元素的序号为偶数的子元素</p><p><code>ul li:nth-child(even)&#123;&#125;</code>   <strong>even</strong>（4 个字母 ）</p></li><li><p><strong>匹配到父元素的前 3 个子元素</strong></p><p> <code>ul li:nth-child(-n+3)&#123;&#125;</code>    </p><p> n 是从 0 ，1，2，3.. 一直递增</p></li></ul><h2 id="伪元素选择器"><a href="#伪元素选择器" class="headerlink" title="伪元素选择器"></a>伪元素选择器</h2><blockquote><p>伪元素选择器可以帮助我们利用 CSS 创建新标签元素，而不需要 HTML 标签，从而简化 HTML 结构</p></blockquote><table><thead><tr><th>选择符</th><th>简介</th></tr></thead><tbody><tr><td>::before</td><td>在元素内部的前面插入内容</td></tr><tr><td>::after</td><td>在元素内部的后面插入内容</td></tr></tbody></table><ul><li>before 和 after 创建一个元素，但是属于行内元素</li><li>新创建的这个元素在文档树中是找不到的，所以我们称为伪元素</li><li>语法：  element:: before {}   </li><li>before 和 after 必须有 content 属性 </li><li>before 在父元素内容的前面创建元素，after 在父元素内容的后面插入元素</li><li>伪元素选择器和 <a href="1CSS%E5%9F%BA%E7%A1%80%E9%80%89%E6%8B%A9%E5%99%A8.md#%E6%A0%87%E7%AD%BE%E9%80%89%E6%8B%A9%E5%99%A8">标签选择器</a> 一样，权重为 0, 0, 0, 1。</li></ul><h1 id="CSS3盒子模型"><a href="#CSS3盒子模型" class="headerlink" title="CSS3盒子模型"></a>CSS3盒子模型</h1><p>CSS3 中可以通过 box-sizing 来指定盒模型，有 2 个值：即可指定为 content-box、border-box，这样计算盒子大小的方式就发生了改变</p><ul><li>box-sizing: content-box  盒子大小为 width + padding + border  （以前默认的）</li><li>box-sizing: border-box  盒子大小为 width</li></ul><p>如果盒子模型改为了 box-sizing: border-box  ，那 padding 和 border 就不会撑大盒子了（前提 padding 和 border 不会超过 width 宽度）</p><h1 id="CSS3-滤镜-filter"><a href="#CSS3-滤镜-filter" class="headerlink" title="CSS3 滤镜 filter"></a>CSS3 滤镜 filter</h1><blockquote><p>filter CSS 属性将模糊或颜色偏移等图形效果应用于元素</p></blockquote><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span>&#123;</span><br><span class="line"><span class="attribute">filter</span>:   函数();</span><br><span class="line">--&gt;  例如：</span><br><span class="line"><span class="attribute">filter</span>: <span class="built_in">blur</span>(<span class="number">5px</span>); </span><br><span class="line">--&gt;  blur模糊处理  数值越大越模糊</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="计算盒子宽度-–-calc-函数"><a href="#计算盒子宽度-–-calc-函数" class="headerlink" title="计算盒子宽度 – calc 函数"></a>计算盒子宽度 – calc 函数</h1><blockquote><p>calc () 此 CSS 函数让你在声明 CSS 属性值时执行一些计算 </p></blockquote><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span>&#123;</span><br><span class="line"><span class="attribute">width</span>: <span class="built_in">calc</span>(<span class="number">100%</span> - <span class="number">80px</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>括号里面可以使用 + - *  &#x2F; 来进行计算</p><h1 id="CSS3-过渡"><a href="#CSS3-过渡" class="headerlink" title="CSS3 过渡"></a>CSS3 过渡</h1><blockquote><p><strong>过渡动画：</strong> 是从一个状态渐渐的过渡到另外一个状态</p></blockquote><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span>&#123;</span><br><span class="line"><span class="attribute">transition</span>: 要过渡的属性  花费时间  运动曲线  何时开始;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>属性 ： 想要变化的 css 属性，宽度高度背景颜色内外边距都可以。如果想要所有的属性都变化过渡，写一个 all 就可以</li><li>花费时间： 单位是秒（必须写单位） 比如 0.5s </li><li>运动曲线： 默认是 ease （可以省略）</li><li>何时开始：单位是秒（必须写单位）可以设置延迟触发时间默认是 0s  （可以省略）</li><li><strong>过渡的使用：谁做过渡给谁加</strong></li></ul><p><img src="/_posts/CSS3/14CSS3%E6%96%B0%E7%89%B9%E6%80%A7.md/image-20230126225714072.png"></p>]]></content>
      
      
      <categories>
          
          <category> CSS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HTML5新特性</title>
      <link href="/_posts/HTML5/4HTML5%E6%96%B0%E7%89%B9%E6%80%A7.md/"/>
      <url>/_posts/HTML5/4HTML5%E6%96%B0%E7%89%B9%E6%80%A7.md/</url>
      
        <content type="html"><![CDATA[<h1 id="语义化标签"><a href="#语义化标签" class="headerlink" title="语义化标签"></a>语义化标签</h1><blockquote><p>HTML5 新增了一些语义化标签，这样的话更加有利于浏览器的搜索引擎搜索，也方便了网站的 seo</p></blockquote><ul><li><code>&lt;header&gt;</code> 头部标签</li><li><code>&lt;nav&gt;</code> 导航标签</li><li><code>&lt;article&gt;</code> 内容标签</li><li><code>&lt;section&gt;</code> 定义文档某个区域</li><li><code>&lt;aside&gt;</code> 侧边栏标签</li><li><code>&lt;footer&gt;</code> 尾部标签</li></ul><h1 id="视频标签-video"><a href="#视频标签-video" class="headerlink" title="视频标签 - video"></a>视频标签 - video</h1><blockquote><p>当前 <strong><code>&lt;video&gt;</code></strong> 元素支持三种视频格式 (MP4, WebM, Ogg)： 尽量使用 <strong>mp4 格式</strong></p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">video</span> <span class="attr">src</span>=<span class="string">&quot;media/mi.mp4&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">video</span>&gt;</span></span><br></pre></td></tr></table></figure><table><thead><tr><th>属性</th><th>值</th><th>描述</th></tr></thead><tbody><tr><td>autoplay</td><td>autoplay</td><td>视频就绪自动播放（谷歌浏览器需要添加 muted 来解决自动播放问题）</td></tr><tr><td>controls</td><td>controls</td><td>向用户显示播放控件</td></tr><tr><td>width</td><td>pixels（像素）</td><td>设置播放器宽度</td></tr><tr><td>height</td><td>pixels（像素）</td><td>设置播放器高度</td></tr><tr><td>loop</td><td>loop</td><td>视频播放完是否继续播放该视频，循环播放</td></tr><tr><td>preload</td><td>atuo (预先加载该视频) <br> none (不应加载视频)</td><td>规定是否预加载视频（如果有了 autoplay，就忽略该属性）</td></tr><tr><td>src</td><td>url</td><td>视频 url 地址</td></tr><tr><td>poster</td><td>imgurl</td><td>加载等待的画面图片</td></tr><tr><td>muted</td><td>muted</td><td>静音播放</td></tr></tbody></table><h1 id="音频标签-audio"><a href="#音频标签-audio" class="headerlink" title="音频标签- audio"></a>音频标签- audio</h1><blockquote><p>当前 <strong><code>&lt;audio&gt;</code></strong> 元素支持三种视频格式 (MP3, Wav, Ogg)： 尽量使用 <strong>mp3 格式</strong></p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">audio</span> <span class="attr">src</span>=<span class="string">&quot;media/music.mp3&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">audio</span>&gt;</span></span><br></pre></td></tr></table></figure><table><thead><tr><th>属性</th><th>值</th><th>描述</th></tr></thead><tbody><tr><td>autoplay</td><td>autoplay</td><td>音频就绪后马上播放</td></tr><tr><td>controls</td><td>controls</td><td>向用户显示控件</td></tr><tr><td>loop</td><td>loop</td><td>循环播放</td></tr><tr><td>src</td><td>url</td><td>要播放音频的 url</td></tr></tbody></table><h1 id="新增的表单元素"><a href="#新增的表单元素" class="headerlink" title="新增的表单元素"></a>新增的表单元素</h1><table><thead><tr><th>属性值</th><th>说明</th></tr></thead><tbody><tr><td>type&#x3D;”email”</td><td>限制用户输入必须为Email类型</td></tr><tr><td>type&#x3D;”url”</td><td>限制用户输入必须为URL类型</td></tr><tr><td>type&#x3D;”date”</td><td>限制用户输入必须为日期类型</td></tr><tr><td>type&#x3D;”time”</td><td>限制用户输入必须为时间类型</td></tr><tr><td>type&#x3D;”month”</td><td>限制用户输入必须为月类型</td></tr><tr><td>type&#x3D;”week”</td><td>限制用户输入必须为周类型</td></tr><tr><td>type&#x3D;”number”</td><td>限制用户输入必须为数字类型</td></tr><tr><td>type&#x3D;”tel”</td><td>手机号码</td></tr><tr><td>type&#x3D;”search”</td><td>搜索框</td></tr><tr><td>type&#x3D;”color”</td><td>生成一个颜色选择表单</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> HTML </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HTML </tag>
            
            <tag> 标签 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSS用户界面样式</title>
      <link href="/_posts/CSS3/13CSS%E7%94%A8%E6%88%B7%E7%95%8C%E9%9D%A2%E6%A0%B7%E5%BC%8F.md/"/>
      <url>/_posts/CSS3/13CSS%E7%94%A8%E6%88%B7%E7%95%8C%E9%9D%A2%E6%A0%B7%E5%BC%8F.md/</url>
      
        <content type="html"><![CDATA[<h1 id="鼠标样式"><a href="#鼠标样式" class="headerlink" title="鼠标样式"></a>鼠标样式</h1><blockquote><p>设置或检索在对象上移动的鼠标指针采用何种系统预定义的光标形状</p></blockquote><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">li</span> &#123;</span><br><span class="line"><span class="attribute">cursor</span>: pointer; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><table><thead><tr><th>属性值</th><th>描述</th></tr></thead><tbody><tr><td>default</td><td>箭头（默认）</td></tr><tr><td>pointer</td><td>小手</td></tr><tr><td>movo</td><td>移动</td></tr><tr><td>text</td><td>文本</td></tr><tr><td>not-allowed</td><td>禁止</td></tr></tbody></table><h1 id="轮廓线"><a href="#轮廓线" class="headerlink" title="轮廓线"></a>轮廓线</h1><blockquote><p>给表单添加 outline: 0;   或者  outline: none; 样式之后，就可以去掉默认的蓝色边框 </p></blockquote><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">input</span> &#123;</span><br><span class="line"><span class="attribute">outline</span>: none; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="防止拖拽文本域"><a href="#防止拖拽文本域" class="headerlink" title="防止拖拽文本域"></a>防止拖拽文本域</h1><blockquote><p>让文本域右下角不可以拖拽</p></blockquote><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">textarea</span>&#123;</span><br><span class="line"><span class="attribute">resize</span>: none;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="vertical-align-属性应用"><a href="#vertical-align-属性应用" class="headerlink" title="vertical-align 属性应用"></a>vertical-align 属性应用</h1><blockquote><p>用于设置一个元素的<strong>垂直对齐方式</strong>，但是它只针对于 <a href="4CSS%E6%98%BE%E7%A4%BA%E6%A8%A1%E5%BC%8F.md#%E8%A1%8C%E5%86%85%E5%85%83%E7%B4%A0">行内元素</a> 或者 <a href="4CSS%E6%98%BE%E7%A4%BA%E6%A8%A1%E5%BC%8F.md#%E8%A1%8C%E5%86%85%E5%9D%97%E5%85%83%E7%B4%A0">行内块元素</a> 有效</p></blockquote><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">a</span>&#123;</span><br><span class="line"><span class="attribute">vertical-align</span> : baseline | top | middle | bottom </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><table><thead><tr><th>值</th><th>描述</th></tr></thead><tbody><tr><td>baseline</td><td>元素放置在父元素的基线上（默认）</td></tr><tr><td>top</td><td>把元素的顶端与行中最高元素的顶端对齐</td></tr><tr><td>middle</td><td>把元素放置在父元素的中部</td></tr><tr><td>bottom</td><td>把元素的顶端与行中最低的元素的顶端对齐</td></tr></tbody></table><h1 id="溢出的文字省略号显示"><a href="#溢出的文字省略号显示" class="headerlink" title="溢出的文字省略号显示"></a>溢出的文字省略号显示</h1><h2 id="单行文本溢出显示省略号"><a href="#单行文本溢出显示省略号" class="headerlink" title="单行文本溢出显示省略号"></a>单行文本溢出显示省略号</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span>&#123;</span><br><span class="line"><span class="comment">/*1. 先强制一行内显示文本*/</span></span><br><span class="line"><span class="attribute">white-space</span>: nowrap;  （ 默认 <span class="attribute">normal</span> 自动换行）</span><br><span class="line"></span><br><span class="line"><span class="comment">/*2. 超出的部分隐藏*/</span></span><br><span class="line"><span class="attribute">overflow</span>: hidden;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*3. 文字用省略号替代超出的部分*/</span></span><br><span class="line"><span class="attribute">text-overflow</span>: ellipsis;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="多行文本溢出显示省略号"><a href="#多行文本溢出显示省略号" class="headerlink" title="多行文本溢出显示省略号"></a>多行文本溢出显示省略号</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span>&#123;</span><br><span class="line"><span class="comment">/*1. 超出的部分隐藏 */</span></span><br><span class="line"><span class="attribute">overflow</span>: hidden;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*2. 文字用省略号替代超出的部分 */</span></span><br><span class="line"><span class="attribute">text-overflow</span>: ellipsis;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 3. 弹性伸缩盒子模型显示 */</span></span><br><span class="line"><span class="attribute">display</span>: -webkit-box;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 4. 限制在一个块元素显示的文本的行数 */</span></span><br><span class="line">-webkit-line-clamp: <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 5. 设置或检索伸缩盒对象的子元素的排列方式 */</span></span><br><span class="line">-webkit-box-orient: vertical;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> CSS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSS元素的显示与隐藏</title>
      <link href="/_posts/CSS3/12CSS%E5%85%83%E7%B4%A0%E7%9A%84%E6%98%BE%E7%A4%BA%E4%B8%8E%E9%9A%90%E8%97%8F.md/"/>
      <url>/_posts/CSS3/12CSS%E5%85%83%E7%B4%A0%E7%9A%84%E6%98%BE%E7%A4%BA%E4%B8%8E%E9%9A%90%E8%97%8F.md/</url>
      
        <content type="html"><![CDATA[<blockquote><p>让一个元素在页面中消失或者显示出来</p></blockquote><h1 id="display-显示"><a href="#display-显示" class="headerlink" title="display 显示"></a>display 显示</h1><blockquote><p>display 设置或检索对象是否及如何显示</p></blockquote><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span>&#123;</span><br><span class="line"><span class="attribute">display</span>: none 隐藏对象 </span><br><span class="line">display：block 除了转换为块级元素之外，同时还有显示元素的意思。</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>display 隐藏元素后，<strong>不再占有</strong>原来的位置</li></ul><h1 id="visibility-可见性"><a href="#visibility-可见性" class="headerlink" title="visibility 可见性"></a>visibility 可见性</h1><blockquote><p>visibility 属性用于指定一个元素应可见还是隐藏</p></blockquote><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span>&#123;</span><br><span class="line"><span class="attribute">visibility</span>：visible ; 　元素可视</span><br><span class="line"><span class="attribute">visibility</span>：hidden; 　  元素隐藏</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><strong>visibility 隐藏元素后，继续占有原来的位置</strong></li></ul><h1 id="overflow-溢出"><a href="#overflow-溢出" class="headerlink" title="overflow 溢出"></a>overflow 溢出</h1><blockquote><p>overflow 属性指定了如果内容溢出一个元素的框（超过其指定高度及宽度） 时，会发生什么</p></blockquote><table><thead><tr><th>属性值</th><th>描述</th></tr></thead><tbody><tr><td><strong>visible</strong></td><td>不剪切内容也不添加滚动条</td></tr><tr><td><strong>hidden</strong></td><td>不显示超过对象尺寸的内容，超出的部分隐藏掉</td></tr><tr><td><strong>scroll</strong></td><td>不管超出内容否，总是显示滚动条</td></tr><tr><td><strong>auto</strong></td><td>超出自动显示滚动条，不超出不显示滚动条</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> CSS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSS定位</title>
      <link href="/_posts/CSS3/11CSS%E5%AE%9A%E4%BD%8D.md/"/>
      <url>/_posts/CSS3/11CSS%E5%AE%9A%E4%BD%8D.md/</url>
      
        <content type="html"><![CDATA[<blockquote><p>定位可以让盒子自由的在某个盒子内移动位置或者固定屏幕中某个位置，并且可以压住其他盒子。</p></blockquote><h1 id="定位组成"><a href="#定位组成" class="headerlink" title="定位组成"></a>定位组成</h1><p><strong>定位</strong>：将盒子<strong>定</strong>在某一个位置，所以<strong>定位也是在摆放盒子，按照定位的方式移动盒子</strong></p><p>定位也是用来布局的，它有两部分组成：</p><blockquote><p><strong>定位 &#x3D; 定位模式 + 边偏移</strong>  </p></blockquote><p><strong>定位模式</strong> 用于指定一个元素在文档中的定位方式。<strong>边偏移</strong>则决定了该元素的最终位置。</p><h1 id="边偏移"><a href="#边偏移" class="headerlink" title="边偏移"></a>边偏移</h1><p><strong>边偏移</strong> 就是定位的盒子移动到最终位置。有 top、bottom、left 和 right  4 个属性。</p><table><thead><tr><th>边偏移属性</th><th align="left">示例</th><th>描述</th></tr></thead><tbody><tr><td><code>top</code></td><td align="left"><code>top: 80px</code></td><td><strong>顶端</strong>偏移量，定义元素相对于其父元素<strong>上边线的距离</strong>。</td></tr><tr><td><code>bottom</code></td><td align="left"><code>bottom: 80px</code></td><td><strong>底部</strong>偏移量，定义元素相对于其父元素<strong>下边线的距离</strong>。</td></tr><tr><td><code>left</code></td><td align="left"><code>left: 80px</code></td><td><strong>左侧</strong>偏移量，定义元素相对于其父元素<strong>左边线的距离</strong>。</td></tr><tr><td><code>right</code></td><td align="left"><code>right: 80px</code></td><td><strong>右侧</strong>偏移量，定义元素相对于其父元素<strong>右边线的距离</strong></td></tr></tbody></table><ul><li><strong>边偏移</strong>需要和<strong>定位模式</strong>联合使用，<strong>单独使用无效</strong></li></ul><h1 id="定位模式"><a href="#定位模式" class="headerlink" title="定位模式"></a>定位模式</h1><p>在 CSS 中，通过 <code>position</code> 属性定义元素的<strong>定位模式</strong>。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">选择器 &#123; </span><br><span class="line">    <span class="attribute">position</span>: 属性值; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>定位模式决定元素的定位方式，它通过 CSS 的 position 属性来设置，其值可以分为四个：</p><table><thead><tr><th>值</th><th align="center">语义</th></tr></thead><tbody><tr><td><code>static</code></td><td align="center"><strong>静态</strong>定位</td></tr><tr><td><code>relative</code></td><td align="center"><strong>相对</strong>定位</td></tr><tr><td><code>absolute</code></td><td align="center"><strong>绝对</strong>定位</td></tr><tr><td><code>fixed</code></td><td align="center"><strong>固定</strong>定位</td></tr></tbody></table><h2 id="静态定位"><a href="#静态定位" class="headerlink" title="静态定位"></a>静态定位</h2><blockquote><p><strong>静态定位</strong>是元素的<strong>默认</strong>定位方式，<strong>无定位的意思</strong>。</p></blockquote> <figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">选择器 &#123; </span><br><span class="line">    <span class="attribute">position</span>: static; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>静态定位按照标准流特性摆放位置，它没有边偏移。</li></ul><h2 id="相对定位"><a href="#相对定位" class="headerlink" title="相对定位"></a>相对定位</h2><blockquote><p><strong>相对定位</strong>是元素在移动位置的时候，是相对于它自己<strong>原来的位置</strong>来说的。</p></blockquote><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">选择器 &#123; </span><br><span class="line"><span class="attribute">position</span>: relative; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>它是相对于自己原来的位置来移动的（移动位置的时候参照点是自己原来的位置）。</li><li><strong>原来</strong>在标准流的<strong>位置</strong>继续占有，后面的盒子仍然以标准流的方式对待它，因此，<strong>相对定位并没有脱标</strong>。</li><li><strong>相对定位经常用来作为绝对定位的父级</strong></li></ul><h2 id="绝对定位"><a href="#绝对定位" class="headerlink" title="绝对定位"></a>绝对定位</h2><blockquote><p><strong>绝对定位</strong>是元素在移动位置的时候，是相对于它<strong>祖先元素</strong>来说的</p></blockquote><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">选择器 &#123; </span><br><span class="line"><span class="attribute">position</span>: absolute; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><strong>完全脱离标准流</strong> —— 不再占有原先的位置</li><li>若<strong>父元素没有定位</strong>，则以<strong>浏览器</strong>为准定位（Document 文档）</li><li>若<strong>父元素有定位</strong>，元素将依据最近的已经定位（绝对、固定或相对定位）的父元素（祖先）进行定位。</li></ul><h2 id="固定定位"><a href="#固定定位" class="headerlink" title="固定定位"></a>固定定位</h2><blockquote><p><strong>固定定位</strong>是元素<strong>固定于浏览器可视区的位置</strong>，可以在浏览器页面滚动时元素的位置不会改变。</p></blockquote><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">选择器 &#123; </span><br><span class="line"><span class="attribute">position</span>: fixed; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>以浏览器的可视窗口为参照点移动元素</li><li>不随滚动条滚动</li><li>固定定位<strong>不在占有原先的位置</strong></li></ul><h2 id="粘性定位"><a href="#粘性定位" class="headerlink" title="粘性定位"></a>粘性定位</h2><blockquote><p><strong>粘性定位</strong>可以被认为是相对定位和固定定位的混合</p></blockquote><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">选择器 &#123; </span><br><span class="line"><span class="attribute">position</span>: sticky; </span><br><span class="line"><span class="attribute">top</span>: <span class="number">10px</span>; </span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure><ul><li>以浏览器的可视窗口为参照点移动元素（固定定位特点）</li><li>粘性定位占有原先的位置（相对定位特点）</li><li>必须添加 top 、left、right、bottom <strong>其中一个</strong>才有效</li><li>跟页面滚动搭配使用</li></ul><h1 id="堆叠顺序（z-index）"><a href="#堆叠顺序（z-index）" class="headerlink" title="堆叠顺序（z-index）"></a>堆叠顺序（z-index）</h1><blockquote><p>在使用<strong>定位</strong>布局时，可能会<strong>出现盒子重叠的情况</strong>。此时，可以使用 <strong>z-index</strong> 来控制盒子的前后次序 (z 轴)</p></blockquote><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">选择器 &#123; </span><br><span class="line"><span class="attribute">z-index</span>: <span class="number">1</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><strong>属性值</strong>：<strong>正整数</strong>、<strong>负整数</strong>或 <strong>0</strong>，默认值是 0，数值越大，盒子越靠上</li><li>如果<strong>属性值相同</strong>，则按照书写顺序，<strong>后来居上</strong></li><li>数字后面<strong>不能加单位</strong></li><li><code>z-index</code> 只能应用于<strong>相对定位</strong>、<strong>绝对定位</strong>和<strong>固定定位</strong>的元素，其他<strong>标准流</strong>、<a href="9CSS%E6%B5%AE%E5%8A%A8.md"><strong>浮动</strong></a> 和<strong>静态定位</strong>无效</li></ul><h1 id="定位的拓展"><a href="#定位的拓展" class="headerlink" title="定位的拓展"></a>定位的拓展</h1><h2 id="绝对定位的盒子居中"><a href="#绝对定位的盒子居中" class="headerlink" title="绝对定位的盒子居中"></a>绝对定位的盒子居中</h2><blockquote><p>加了<strong>绝对定位&#x2F;固定定位的盒子</strong>不能通过设置 <code>margin: auto</code> 设置<strong>水平居中</strong></p></blockquote><ol><li><code>left: 50%;</code>：让<strong>盒子的左侧</strong>移动到<strong>父级元素的水平中心位置</strong></li><li><code>margin-left: -100px;</code>：让盒子<strong>向左</strong>移动<strong>自身宽度的一半</strong></li></ol><h2 id="定位特殊特性"><a href="#定位特殊特性" class="headerlink" title="定位特殊特性"></a>定位特殊特性</h2><blockquote><p>一个行内的盒子，如果加了<a href="9CSS%E6%B5%AE%E5%8A%A8.md"><strong>浮动</strong></a>、<strong>固定定位</strong>和<strong>绝对定位</strong>，不用转换，就可以给这个盒子直接设置宽度和高度 </p></blockquote><h2 id="脱标的盒子不会触发外边距塌陷"><a href="#脱标的盒子不会触发外边距塌陷" class="headerlink" title="脱标的盒子不会触发外边距塌陷"></a>脱标的盒子不会触发外边距塌陷</h2><blockquote><p> <a href="9CSS%E6%B5%AE%E5%8A%A8.md"><strong>浮动元素</strong></a> 、<strong>绝对定位 (固定定位)</strong> 元素的都不会触发外边距合并的问题</p></blockquote><h2 id="绝对定位（固定定位）会完全压住盒子"><a href="#绝对定位（固定定位）会完全压住盒子" class="headerlink" title="绝对定位（固定定位）会完全压住盒子"></a>绝对定位（固定定位）会完全压住盒子</h2><p><a href="9CSS%E6%B5%AE%E5%8A%A8.md">浮动</a> 元素，只会压住它下面标准流的盒子，但是不会压住下面标准流盒子里面的文字（图片）</p><p>绝对定位（固定定位） 会压住下面标准流所有的内容。</p>]]></content>
      
      
      <categories>
          
          <category> CSS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSS属性书写顺序</title>
      <link href="/_posts/CSS3/10CSS%E5%B1%9E%E6%80%A7%E4%B9%A6%E5%86%99%E9%A1%BA%E5%BA%8F.md/"/>
      <url>/_posts/CSS3/10CSS%E5%B1%9E%E6%80%A7%E4%B9%A6%E5%86%99%E9%A1%BA%E5%BA%8F.md/</url>
      
        <content type="html"><![CDATA[<p>建议遵循以下顺序：</p><ol><li><strong>布局定位属性</strong>：display &#x2F; position &#x2F; float &#x2F; clear &#x2F; visibility &#x2F; overflow（建议 display 第一个写，关系到模式）</li><li><strong>自身属性</strong>：width &#x2F; height &#x2F; margin &#x2F; padding &#x2F; border &#x2F; background</li><li><strong>文本属性</strong>：color &#x2F; font &#x2F; text-decoration &#x2F; text-align &#x2F; vertical-align &#x2F; white- space &#x2F; break-word</li><li><strong>其他属性（CSS3）</strong>：content &#x2F; cursor &#x2F; border-radius &#x2F; box-shadow &#x2F; text-shadow &#x2F; background: linear-gradient …</li></ol><p><strong>举例：</strong></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.jdc</span> &#123;</span><br><span class="line">   <span class="attribute">display</span>: block;</span><br><span class="line">   <span class="attribute">position</span>: relative;</span><br><span class="line">   <span class="attribute">float</span>: left;</span><br><span class="line">   <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">   <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">   <span class="attribute">margin</span>: <span class="number">0</span> <span class="number">10px</span>;</span><br><span class="line">   <span class="attribute">padding</span>: <span class="number">20px</span> <span class="number">0</span>;</span><br><span class="line">   <span class="attribute">font-family</span>: Arial, <span class="string">&#x27;Helvetica Neue&#x27;</span>, Helvetica, sans-serif;</span><br><span class="line">   <span class="attribute">color</span>: <span class="number">#333</span>;</span><br><span class="line">   <span class="attribute">background</span>: <span class="built_in">rgba</span>(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,.<span class="number">5</span>);</span><br><span class="line">   <span class="attribute">border-radius</span>: <span class="number">10px</span>;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> CSS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSS浮动</title>
      <link href="/_posts/CSS3/9CSS%E6%B5%AE%E5%8A%A8.md/"/>
      <url>/_posts/CSS3/9CSS%E6%B5%AE%E5%8A%A8.md/</url>
      
        <content type="html"><![CDATA[<blockquote><p>float 属性用于创建浮动框，将其移动到一边，直到左边缘或右边缘触及包含块或另一个浮动框的边缘。</p></blockquote><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">选择器 &#123; <span class="attribute">float</span>: 属性值; &#125;</span><br></pre></td></tr></table></figure><table><thead><tr><th>属性值</th><th>描述</th></tr></thead><tbody><tr><td>none</td><td>元素不浮动（默认值）</td></tr><tr><td>left</td><td>元素向左浮动</td></tr><tr><td>right</td><td>元素向右浮动</td></tr></tbody></table><p><strong>多个块级元素纵向排列找标准流，多个块级元素横向排列找浮动</strong></p><h1 id="浮动特性"><a href="#浮动特性" class="headerlink" title="浮动特性"></a>浮动特性</h1><ul><li>浮动元素会脱离标准流 (脱标：浮动的盒子不再保留原先的位置)</li><li>浮动的元素会一行内显示并且元素顶部对齐</li><li>浮动的元素是互相贴靠在一起的（不会有缝隙），如果父级宽度装不下这些浮动的盒子，多出的盒子会另起一行对齐。</li><li>浮动的元素会具有<a href="4CSS%E6%98%BE%E7%A4%BA%E6%A8%A1%E5%BC%8F.md#%E8%A1%8C%E5%86%85%E5%9D%97%E5%85%83%E7%B4%A0">行内块元素</a>的特性<ul><li>浮动元素的大小根据内容来决定</li><li>浮动的盒子中间是没有缝隙的</li></ul></li></ul><h1 id="浮动布局注意点"><a href="#浮动布局注意点" class="headerlink" title="浮动布局注意点"></a>浮动布局注意点</h1><p><strong>浮动和标准流的父盒子搭配：</strong></p><p>先用标准流的父元素排列上下位置, 之后内部子元素采取浮动排列左右位置</p><p><strong>一个元素浮动了，理论上其余的兄弟元素也要浮动：</strong></p><p>一个盒子里面有多个子盒子，如果其中一个盒子浮动了，其他兄弟也应该浮动，以防止引起问题。</p><p>浮动的盒子只会影响浮动盒子后面的标准流, 不会影响前面的标准流。</p><h1 id="清除浮动"><a href="#清除浮动" class="headerlink" title="清除浮动"></a>清除浮动</h1><blockquote><p>清除浮动的本质是清除浮动元素造成的影响：浮动的子标签无法撑开父盒子的高度 </p></blockquote><ul><li>如果父盒子本身有高度，则不需要清除浮动</li><li>清除浮动之后，父级就会根据浮动的子盒子自动检测高度。</li><li>父级有了高度，就不会影响下面的标准流了</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">选择器&#123;<span class="attribute">clear</span>:属性值;&#125; </span><br></pre></td></tr></table></figure><table><thead><tr><th>属性值</th><th>描述</th></tr></thead><tbody><tr><td>left</td><td>不允许左侧有浮动元素（清除左侧浮动的影响）</td></tr><tr><td>right</td><td>不允许右侧有浮动元素（清除右侧浮动的影响）</td></tr><tr><td>both</td><td>同时清除左右两侧浮动的影响</td></tr></tbody></table><h2 id="清除浮动的方式"><a href="#清除浮动的方式" class="headerlink" title="清除浮动的方式"></a>清除浮动的方式</h2><blockquote><p>清除浮动的策略是:  闭合浮动。只让浮动在父盒子内部影响, 不影响父盒子外面的其他盒子。</p></blockquote><h3 id="额外标签法"><a href="#额外标签法" class="headerlink" title="额外标签法"></a>额外标签法</h3><blockquote><p>额外标签法也称为隔墙法，会在浮动元素末尾添加一个空的标签。<strong>（不推荐）</strong></p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">例如 <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;clear:both&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span>，或者其他标签（如<span class="tag">&lt;<span class="name">br</span> /&gt;</span>等）。</span><br></pre></td></tr></table></figure><p><strong>这个新的空标签必须是块级元素。</strong></p><h3 id="父级添加-overflow-属性"><a href="#父级添加-overflow-属性" class="headerlink" title="父级添加 overflow 属性"></a>父级添加 overflow 属性</h3><blockquote><p>可以给<strong>父级添加 overflow 属性</strong>，将其属性值设置为 hidden、 auto 或 scroll 。<strong>（不推荐）</strong></p></blockquote><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">overflow</span>:hidden | auto | scroll;</span><br></pre></td></tr></table></figure><p><strong>无法显示溢出的部分</strong></p><h3 id="父级添加-after-伪元素"><a href="#父级添加-after-伪元素" class="headerlink" title="父级添加 after 伪元素"></a>父级添加 after 伪元素</h3><blockquote><p>给<strong>父元素添加</strong> : after 方式是额外标签法的升级版。<strong>（推荐）</strong></p></blockquote><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.clearfix</span><span class="selector-pseudo">:after</span> &#123;  </span><br><span class="line">  <span class="attribute">content</span>: <span class="string">&quot;&quot;</span>; </span><br><span class="line">  <span class="attribute">display</span>: block; </span><br><span class="line">  <span class="attribute">height</span>: <span class="number">0</span>; </span><br><span class="line">  <span class="attribute">clear</span>: both; </span><br><span class="line">  <span class="attribute">visibility</span>: hidden;  </span><br><span class="line">&#125; </span><br><span class="line"><span class="selector-class">.clearfix</span> &#123;  <span class="comment">/* IE6、7 专有 */</span> </span><br><span class="line">  *zoom: <span class="number">1</span>;</span><br><span class="line">&#125;   </span><br></pre></td></tr></table></figure><h3 id="父级添加双伪元素"><a href="#父级添加双伪元素" class="headerlink" title="父级添加双伪元素"></a>父级添加双伪元素</h3><blockquote><p>给<strong>父元素添加</strong> :before 和 :after <strong>（推荐）</strong></p></blockquote><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.clearfix</span><span class="selector-pseudo">:before</span>,<span class="selector-class">.clearfix</span><span class="selector-pseudo">:after</span> &#123;</span><br><span class="line">  <span class="attribute">content</span>:<span class="string">&quot;&quot;</span>;</span><br><span class="line">  <span class="attribute">display</span>:table; </span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.clearfix</span><span class="selector-pseudo">:after</span> &#123;</span><br><span class="line">  <span class="attribute">clear</span>:both;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.clearfix</span> &#123;</span><br><span class="line">   *zoom:<span class="number">1</span>;</span><br><span class="line">&#125;   </span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> CSS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSS盒子模型</title>
      <link href="/_posts/CSS3/8CSS%E7%9B%92%E5%AD%90%E6%A8%A1%E5%9E%8B.md/"/>
      <url>/_posts/CSS3/8CSS%E7%9B%92%E5%AD%90%E6%A8%A1%E5%9E%8B.md/</url>
      
        <content type="html"><![CDATA[<blockquote><p>CSS 盒子模型本质上是一个盒子，封装周围的 HTML 元素，它包括：<strong>边框</strong>、<strong>外边距</strong>、<strong>内边距</strong>、和 <strong>实际内容</strong></p></blockquote><p><img src="/_posts/CSS3/8CSS%E7%9B%92%E5%AD%90%E6%A8%A1%E5%9E%8B.md/image-20230125215811275.png"></p><h1 id="边框"><a href="#边框" class="headerlink" title="边框"></a>边框</h1><blockquote><p>border 可以设置元素的边框。边框有三部分组成：边框宽度 (粗细) 边框样式边框颜色；</p></blockquote><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">border</span> : border-width || border-style || border-color;   </span><br></pre></td></tr></table></figure><table><thead><tr><th>属性</th><th>作用</th></tr></thead><tbody><tr><td>border-width</td><td>定义边框粗细，单位是 px</td></tr><tr><td>border-style</td><td>边框的样式</td></tr><tr><td>border-color</td><td>边框颜色</td></tr></tbody></table><p>边框样式 border-style 可以设置如下值：</p><table><thead><tr><th>属性值</th><th>含义</th></tr></thead><tbody><tr><td>none</td><td>没有边框即忽略所有边框的宽度（默认值）</td></tr><tr><td>solid</td><td>边框为单实线</td></tr><tr><td>dashed</td><td>边框为虚线</td></tr><tr><td>dotted</td><td>边框为点线</td></tr></tbody></table><p>边框会额外增加盒子的实际大小。有两种方案解决：</p><ul><li>测量盒子大小的时候, 不量边框。</li><li>如果测量的时候包含了边框, 则需要 width&#x2F;height 减去边框宽度</li></ul><p><strong>边框的合写分写：</strong></p><p>边框简写：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">border</span>: <span class="number">1px</span> solid red;  </span><br></pre></td></tr></table></figure><p>边框分开写法：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">border-top</span>: <span class="number">1px</span> solid red;  <span class="comment">/* 只设定上边框， 其余同理 */</span>   </span><br></pre></td></tr></table></figure><p><strong>表格的细线边框：</strong></p><blockquote><p>border-collapse 属性控制浏览器绘制表格边框的方式。它控制相邻单元格的边框。</p></blockquote><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">border-collapse</span>:collapse; </span><br></pre></td></tr></table></figure><p>border-collapse: collapse; 表示相邻边框合并在一起</p><h1 id="内边距"><a href="#内边距" class="headerlink" title="内边距"></a>内边距</h1><blockquote><p>padding 属性用于设置内边距，即边框与内容之间的距离。</p></blockquote><p>合写属性：</p><table><thead><tr><th>值的个数</th><th>表达的意思</th></tr></thead><tbody><tr><td>padding: 5px;</td><td>1 个值，代表上下左右都有 5 像素内边距</td></tr><tr><td>padding: 5px 10px;</td><td>2 个值，代表上下内边距是 5 像素，左右内边距是 10 像素</td></tr><tr><td>padding: 5px 10px 20px;</td><td>3 个值，代表上内边距 5 像素，左右内边距 10 像素，下内边距 20 像素</td></tr><tr><td>padding: 5px 10px 20px 30px;</td><td>4 个值，上是 5 像素右 10 像素下 20 像素左 30 像素，顺时针</td></tr></tbody></table><p>分写属性：</p><table><thead><tr><th>属性</th><th>作用</th></tr></thead><tbody><tr><td>padding-left</td><td>左内边距</td></tr><tr><td>padding-right</td><td>右内边距</td></tr><tr><td>padding-top</td><td>上内边距</td></tr><tr><td>padding-bottom</td><td>下内边距</td></tr></tbody></table><p>内边距对盒子大小的影响：</p><ul><li>如果盒子已经有了宽度和高度，此时再指定内边框，会撑大盒子。</li><li>如何盒子本身没有指定 width&#x2F;height 属性, 则此时 padding 不会撑开盒子大小。</li></ul><h1 id="外边距"><a href="#外边距" class="headerlink" title="外边距"></a>外边距</h1><blockquote><p>margin 属性用于设置外边距，即控制盒子和盒子之间的距离。</p></blockquote><table><thead><tr><th>属性</th><th>作用</th></tr></thead><tbody><tr><td>margin-left</td><td>左外边距</td></tr><tr><td>margin-right</td><td>右外边距</td></tr><tr><td>margin-top</td><td>上外边距</td></tr><tr><td>margin-bottom</td><td>下外边距</td></tr></tbody></table><h2 id="外边距典型应用"><a href="#外边距典型应用" class="headerlink" title="外边距典型应用"></a>外边距典型应用</h2><p>外边距可以让块级盒子水平居中的两个条件：</p><ul><li>盒子必须指定了宽度（width）。</li><li>盒子左右的外边距都设置为 auto 。</li></ul><p>常见的写法，以下三种都可以：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">margin-left</span>: auto;   <span class="attribute">margin-right</span>: auto;</span><br><span class="line"><span class="attribute">margin</span>: auto;</span><br><span class="line"><span class="attribute">margin</span>: <span class="number">0</span> auto;</span><br></pre></td></tr></table></figure><p>注意：以上方法是让块级元素水平居中， <a href="4CSS%E6%98%BE%E7%A4%BA%E6%A8%A1%E5%BC%8F.md#%E8%A1%8C%E5%86%85%E5%85%83%E7%B4%A0">行内元素</a>或者<a href="4CSS%E6%98%BE%E7%A4%BA%E6%A8%A1%E5%BC%8F.md#%E8%A1%8C%E5%86%85%E5%9D%97%E5%85%83%E7%B4%A0">行内块元素</a>水平居中给其父元素添加 text-align: center 即可。</p><h2 id="外边距合并"><a href="#外边距合并" class="headerlink" title="外边距合并"></a>外边距合并</h2><p><strong>相邻<a href="4CSS%E6%98%BE%E7%A4%BA%E6%A8%A1%E5%BC%8F.md#%E5%9D%97%E5%85%83%E7%B4%A0">块元素</a>垂直外边距的合并：</strong></p><p>当上下相邻的两个<a href="4CSS%E6%98%BE%E7%A4%BA%E6%A8%A1%E5%BC%8F.md#%E5%9D%97%E5%85%83%E7%B4%A0">块元素</a>（兄弟关系）相遇时，如果上面的元素有下外边距 margin-bottom，下面的元素有上外边距 margin-top ，则他们之间的垂直间距不是 margin-bottom 与 margin-top 之和。取两个值中的较大者这种现象被称为相邻<a href="4CSS%E6%98%BE%E7%A4%BA%E6%A8%A1%E5%BC%8F.md#%E5%9D%97%E5%85%83%E7%B4%A0">块元素</a>垂直外边距的合并。</p><p><img src="/_posts/CSS3/8CSS%E7%9B%92%E5%AD%90%E6%A8%A1%E5%9E%8B.md/image-20230125222956002.png"></p><p><strong>解决方案：尽量只给一个盒子添加 margin 值。</strong></p><p><strong>嵌套<a href="4CSS%E6%98%BE%E7%A4%BA%E6%A8%A1%E5%BC%8F.md#%E5%9D%97%E5%85%83%E7%B4%A0">块元素</a>垂直外边距的塌陷：</strong></p><p>对于两个嵌套关系（父子关系）的<a href="4CSS%E6%98%BE%E7%A4%BA%E6%A8%A1%E5%BC%8F.md#%E5%9D%97%E5%85%83%E7%B4%A0">块元素</a>，父元素有上外边距同时子元素也有上外边距，此时父元素会塌陷较大的外边距值。</p><p><img src="/_posts/CSS3/8CSS%E7%9B%92%E5%AD%90%E6%A8%A1%E5%9E%8B.md/image-20230125223203680.png"></p><p><strong>解决方案：</strong></p><ul><li>可以为父元素定义上边框。</li><li>可以为父元素定义上内边距。</li><li>可以为父元素添加 overflow: hidden。</li></ul><h1 id="清除内外边距"><a href="#清除内外边距" class="headerlink" title="清除内外边距"></a>清除内外边距</h1><p>网页元素很多都带有默认的内外边距，而且不同浏览器默认的也不一致。因此在布局前，首先要清除下网页元素的内外边距。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">* &#123;</span><br><span class="line">   <span class="attribute">padding</span>:<span class="number">0</span>;   <span class="comment">/* 清除内边距 */</span></span><br><span class="line">   <span class="attribute">margin</span>:<span class="number">0</span>;    <span class="comment">/* 清除外边距 */</span></span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p><strong><a href="4CSS%E6%98%BE%E7%A4%BA%E6%A8%A1%E5%BC%8F.md#%E8%A1%8C%E5%86%85%E5%85%83%E7%B4%A0">行内元素</a>为了照顾兼容性，尽量只设置左右内外边距，不要设置上下内外边距。但是转换为块级和<a href="4CSS%E6%98%BE%E7%A4%BA%E6%A8%A1%E5%BC%8F.md#%E8%A1%8C%E5%86%85%E5%9D%97%E5%85%83%E7%B4%A0">行内块元素</a>就可以了</strong></p>]]></content>
      
      
      <categories>
          
          <category> CSS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSS </tag>
            
            <tag> 盒子模型 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSS三大特性</title>
      <link href="/_posts/CSS3/3CSS%E4%B8%89%E5%A4%A7%E7%89%B9%E6%80%A7.md/"/>
      <url>/_posts/CSS3/3CSS%E4%B8%89%E5%A4%A7%E7%89%B9%E6%80%A7.md/</url>
      
        <content type="html"><![CDATA[<h1 id="层叠性"><a href="#层叠性" class="headerlink" title="层叠性"></a>层叠性</h1><blockquote><p>相同选择器给设置相同的样式，此时一个样式就会覆盖（层叠）另一个冲突的样式。</p></blockquote><ul><li>样式冲突，遵循的原则是就近原则，哪个样式离结构近，就执行哪个样式</li><li>样式不冲突，不会层叠</li></ul><h1 id="继承性"><a href="#继承性" class="headerlink" title="继承性"></a>继承性</h1><blockquote><p>子标签会继承父标签的某些样式，如文本颜色和字号。</p></blockquote><p><strong>子元素可以继承父元素的样式</strong>：text-，font-，line-这些元素开头的可以继承，以及 color 属性</p><h1 id="优先级"><a href="#优先级" class="headerlink" title="优先级"></a>优先级</h1><blockquote><p>当同一个元素指定多个选择器，就会有优先级的产生。</p></blockquote><ul><li>选择器相同，则执行层叠性</li><li>选择器不同，则根据选择器权重执行</li></ul><table><thead><tr><th>选择器</th><th>选择器权重</th></tr></thead><tbody><tr><td>继承或者*</td><td>0, 0, 0, 0</td></tr><tr><td>元素选择器</td><td>0, 0, 0, 1</td></tr><tr><td>类选择器、伪类选择器</td><td>0, 0, 1, 0</td></tr><tr><td>ID 选择器</td><td>0, 1, 0, 0</td></tr><tr><td>行内样式 style&#x3D;””</td><td>1, 0, 0, 0</td></tr><tr><td>!important</td><td>$\infty$ 无穷大</td></tr></tbody></table><ul><li>权重是有 4 组数字组成, 但是不会有进位。</li><li>可以理解为类选择器永远大于元素选择器, id 选择器永远大于类选择器, 以此类推.</li><li>等级判断从左向右，如果某一位数值相同，则判断下一位数值。</li><li>继承的权重是 0，如果该元素没有直接选中，不管父元素权重多高，子元素得到的权重都是 0。</li></ul><p>权重叠加：如果是复合选择器，则会有权重叠加，需要计算权重。</p>]]></content>
      
      
      <categories>
          
          <category> CSS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSS其他样式</title>
      <link href="/_posts/CSS3/7CSS%E5%85%B6%E4%BB%96%E6%A0%B7%E5%BC%8F.md/"/>
      <url>/_posts/CSS3/7CSS%E5%85%B6%E4%BB%96%E6%A0%B7%E5%BC%8F.md/</url>
      
        <content type="html"><![CDATA[<h1 id="圆角边框"><a href="#圆角边框" class="headerlink" title="圆角边框"></a>圆角边框</h1><blockquote><p>border-radius 属性用于设置元素的外边框圆角。</p></blockquote><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">border-radius</span>:length;    </span><br></pre></td></tr></table></figure><ul><li>参数值可以为数值或百分比的形式</li><li>如果是正方形，想要设置为一个圆，把数值修改为高度或者宽度的一半即可，或者直接写为 50%</li><li>该属性是一个简写属性，可以跟四个值，分别代表左上角、右上角、右下角、左下角</li><li>分开写：border-top-left-radius、border-top-right-radius、border-bottom-right-radius 和 border-bottom-left-radius</li></ul><h1 id="盒子阴影"><a href="#盒子阴影" class="headerlink" title="盒子阴影"></a>盒子阴影</h1><blockquote><p>使用 box-shadow 属性为盒子添加阴影。</p></blockquote><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">box-shadow</span>: h-shadow v-shadow blur spread color inset; </span><br></pre></td></tr></table></figure><table><thead><tr><th>值</th><th>描述</th></tr></thead><tbody><tr><td>h-shadow</td><td>必须。水平阴影的位置，允许负值</td></tr><tr><td>v-shadow</td><td>必须。垂直阴影的位置，允许负值</td></tr><tr><td>blur</td><td>可选。模糊距离</td></tr><tr><td>spread</td><td>可选。阴影尺寸</td></tr><tr><td>color</td><td>可选。阴影的颜色</td></tr><tr><td>inset</td><td>可选。将外部阴影（outset）改为内部阴影</td></tr></tbody></table><h1 id="文字阴影"><a href="#文字阴影" class="headerlink" title="文字阴影"></a>文字阴影</h1><blockquote><p>使用 text-shadow 属性将阴影应用于文本。</p></blockquote><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">text-shadow</span>: h-shadow v-shadow blur color;</span><br></pre></td></tr></table></figure><table><thead><tr><th>值</th><th>描述</th></tr></thead><tbody><tr><td>h-shadow</td><td>必须。水平阴影的位置，允许负值</td></tr><tr><td>v-shadow</td><td>必须。垂直阴影的位置，允许负值</td></tr><tr><td>blur</td><td>可选。模糊距离</td></tr><tr><td>color</td><td>可选。阴影的颜色</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> CSS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSS背景</title>
      <link href="/_posts/CSS3/6CSS%E8%83%8C%E6%99%AF.md/"/>
      <url>/_posts/CSS3/6CSS%E8%83%8C%E6%99%AF.md/</url>
      
        <content type="html"><![CDATA[<blockquote><p>通过 CSS 背景属性，可以给页面元素添加背景样式。 </p></blockquote><h1 id="背景颜色"><a href="#背景颜色" class="headerlink" title="背景颜色"></a>背景颜色</h1><blockquote><p>background-color 定义元素的背景颜色</p></blockquote><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span>&#123;</span><br><span class="line"><span class="attribute">background-color</span>: 颜色值;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>元素背景颜色默认值是 transparent（透明）</p><h1 id="背景图片"><a href="#背景图片" class="headerlink" title="背景图片"></a>背景图片</h1><blockquote><p>background-image  定义元素的背景图片</p></blockquote><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span>&#123;</span><br><span class="line"><span class="attribute">background-image</span>: none | <span class="built_in">url</span>(<span class="string">url</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><table><thead><tr><th>参数</th><th>作用</th></tr></thead><tbody><tr><td>none</td><td>无背景图（默认）</td></tr><tr><td>url</td><td>使用绝对路径或相对路径指定背景图像</td></tr></tbody></table><p>背景图片后面的地址路径<strong>不要加引号</strong>，例如: url(image. jpg)。</p><h1 id="背景平铺"><a href="#背景平铺" class="headerlink" title="背景平铺"></a>背景平铺</h1><blockquote><p>background-repeat 设置元素背景图像的平铺 </p></blockquote><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span>&#123;</span><br><span class="line"><span class="attribute">background-repeat</span>: repeat | no-repeat | repeat-x | repeat-y;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><table><thead><tr><th>参数值</th><th>作用</th></tr></thead><tbody><tr><td>repeat</td><td>背景图像在纵向和横向上平铺（默认）</td></tr><tr><td>no-repeat</td><td>背景图像不平铺</td></tr><tr><td>repeat-x</td><td>背景图像在横向上平铺</td></tr><tr><td>repeat-y</td><td>背景图像在纵向上平铺</td></tr></tbody></table><h1 id="背景图片位置"><a href="#背景图片位置" class="headerlink" title="背景图片位置"></a>背景图片位置</h1><blockquote><p>background-position 属性可以改变图片在背景中的位置</p></blockquote><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span>&#123;</span><br><span class="line"><span class="attribute">background-position</span>: x y;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>参数代表的意思是：x 坐标和 y 坐标。可以使用方位名词或者精确单位。</p><table><thead><tr><th>参数值</th><th>说明</th></tr></thead><tbody><tr><td>length</td><td>百分数&#x2F;由浮点数和单位标识符组成的长度值</td></tr><tr><td>position</td><td>top&#x2F;center&#x2F;bottom&#x2F;left&#x2F;right 方位名词</td></tr></tbody></table><ul><li>如果指定的两个值都是方位名词，则两个值前后顺序无关，比如 left  top 和 top  left 效果一致</li><li>如果只指定了一个方位名词，另一个值省略，则第二个值默认居中对齐</li><li>如果参数值是精确坐标，那么第一个肯定是 x 坐标，第二个一定是 y 坐标</li><li>如果只指定一个数值，那该数值一定是 x 坐标，另一个默认垂直居中</li><li>如果指定的两个值是精确单位和方位名词混合使用，则第一个值是 x 坐标，第二个值是 y 坐标</li></ul><h1 id="背景图片固定"><a href="#背景图片固定" class="headerlink" title="背景图片固定"></a>背景图片固定</h1><blockquote><p>background-attachment 属性设置背景图像是否固定或者随着页面的其余部分滚动。</p></blockquote><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span>&#123;</span><br><span class="line"><span class="attribute">background-attachment</span>: scroll | fixed</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><table><thead><tr><th>参数</th><th>作用</th></tr></thead><tbody><tr><td>scroll</td><td>背景图像随对象内容滚动</td></tr><tr><td>fixed</td><td>背景图像固定</td></tr></tbody></table><h1 id="背景颜色半透明"><a href="#背景颜色半透明" class="headerlink" title="背景颜色半透明"></a>背景颜色半透明</h1><blockquote><p>CSS3 提供了背景颜色半透明的效果。 </p></blockquote><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span>&#123;</span><br><span class="line"><span class="attribute">background</span>: <span class="built_in">rgba</span>(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0.3</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>背景半透明是指盒子背景半透明，盒子里面的内容不受影响</li><li>最后一个参数是 alpha 透明度，取值范围在 0~1 之间</li><li>可以把 0.3 的 0 省略掉，写为 background: rgba (0, 0, 0, .3);</li></ul><h1 id="背景样式合写"><a href="#背景样式合写" class="headerlink" title="背景样式合写"></a>背景样式合写</h1><blockquote><p>background: 背景颜色，背景图片地址，背景平铺，背景图像，滚动&#x2F;固定，背景图片位置;</p></blockquote><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span>&#123;</span><br><span class="line"><span class="attribute">background</span>: transparent <span class="built_in">url</span>(<span class="string">image. jpg</span>) repeat-y fixed top;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> CSS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSS显示模式</title>
      <link href="/_posts/CSS3/4CSS%E6%98%BE%E7%A4%BA%E6%A8%A1%E5%BC%8F.md/"/>
      <url>/_posts/CSS3/4CSS%E6%98%BE%E7%A4%BA%E6%A8%A1%E5%BC%8F.md/</url>
      
        <content type="html"><![CDATA[<h1 id="元素的显示模式"><a href="#元素的显示模式" class="headerlink" title="元素的显示模式"></a>元素的显示模式</h1><blockquote><p>元素显示模式就是元素（标签）以什么方式进行显示，比如 <code>&lt;div&gt;</code> 自己占一行，比如一行可以放多个 <code>&lt;span&gt;</code>。分为：块元素、行内元素、行内块元素。 </p></blockquote><h2 id="块元素"><a href="#块元素" class="headerlink" title="块元素"></a>块元素</h2><p><strong>常见的块元素</strong>：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>~<span class="tag">&lt;<span class="name">h6</span>&gt;</span>、<span class="tag">&lt;<span class="name">p</span>&gt;</span>、<span class="tag">&lt;<span class="name">div</span>&gt;</span>、<span class="tag">&lt;<span class="name">ul</span>&gt;</span>、<span class="tag">&lt;<span class="name">ol</span>&gt;</span>、<span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br></pre></td></tr></table></figure><p>​ <code>&lt;div&gt; </code> 标签是最典型的块元素。</p><ul><li>自己独占一行。</li><li>高度，宽度、外边距以及内边距都可以控制。</li><li>宽度默认是容器（父级宽度）的 100%。</li><li>是一个容器及盒子，里面可以放行内或者块级元素。</li><li>文字类的元素 (<code>&lt;p&gt;</code> , <code>&lt;h1&gt;</code>~&#96;<h6>&#96; 等) 内不能放块级元素</h6></li></ul><h2 id="行内元素"><a href="#行内元素" class="headerlink" title="行内元素"></a>行内元素</h2><p><strong>常见的行内元素：</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span>&gt;</span>、<span class="tag">&lt;<span class="name">strong</span>&gt;</span>、<span class="tag">&lt;<span class="name">b</span>&gt;</span>、<span class="tag">&lt;<span class="name">em</span>&gt;</span>、<span class="tag">&lt;<span class="name">i</span>&gt;</span>、<span class="tag">&lt;<span class="name">del</span>&gt;</span>、<span class="tag">&lt;<span class="name">s</span>&gt;</span>、<span class="tag">&lt;<span class="name">ins</span>&gt;</span>、<span class="tag">&lt;<span class="name">u</span>&gt;</span>、<span class="tag">&lt;<span class="name">span</span>&gt;</span></span><br></pre></td></tr></table></figure><p>​<code>&lt;span&gt;</code> 标签是最典型的行内元素。有的地方也将行内元素称为内联元素。</p><ul><li>相邻行内元素在一行上，一行可以显示多个。</li><li>高、宽直接设置是无效的。</li><li>默认宽度就是它本身内容的宽度。</li><li>行内元素只能容纳文本或其他行内元素。</li><li>链接里面不能再放链接</li><li>特殊情况链接 <code>&lt;a&gt;</code> 里面可以放块级元素，但是给 <code>&lt;a&gt;</code> 转换一下块级模式最安全</li></ul><h2 id="行内块元素"><a href="#行内块元素" class="headerlink" title="行内块元素"></a>行内块元素</h2><p><strong>常见的行内块标签</strong>：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> /&gt;</span>、<span class="tag">&lt;<span class="name">input</span> /&gt;</span>、<span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br></pre></td></tr></table></figure><p>​它们同时具有块元素和行内元素的特点。有些资料称它们为行内块元素。</p><ul><li>和相邻行内元素（行内块）在一行上，但是他们之间会有空白缝隙</li><li>一行可以显示多个（行内元素特点）</li><li>默认宽度就是它本身内容的宽度（行内元素特点）</li><li>高度，行高、外边距以及内边距都可以控制（块级元素特点）</li></ul><h2 id="元素显示模式的转换"><a href="#元素显示模式的转换" class="headerlink" title="元素显示模式的转换"></a>元素显示模式的转换</h2><blockquote><p>一个模式的元素需要另外一种模式的特性</p></blockquote><ul><li>转换为块元素：display: block;</li><li>转换为行内元素：display: inline;</li><li>转换为行内块：display: inline-block;</li></ul>]]></content>
      
      
      <categories>
          
          <category> CSS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSS复合选择器</title>
      <link href="/_posts/CSS3/2CSS%E5%A4%8D%E5%90%88%E9%80%89%E6%8B%A9%E5%99%A8.md/"/>
      <url>/_posts/CSS3/2CSS%E5%A4%8D%E5%90%88%E9%80%89%E6%8B%A9%E5%99%A8.md/</url>
      
        <content type="html"><![CDATA[<blockquote><p>复合选择器是由两个或多个基础选择器，通过不同的方式组合而成的，可以更准确、更高效的选择目标元素（标签），常用的复合选择器包括：<strong>后代选择器、子选择器、并集选择器、伪类选择器</strong>等</p></blockquote><h1 id="后代选择器"><a href="#后代选择器" class="headerlink" title="后代选择器"></a>后代选择器</h1><blockquote><p>后代选择器又称为包含选择器，可以选择父元素里面子元素。</p></blockquote><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">元素<span class="number">1</span> 元素<span class="number">2</span> &#123;样式声明&#125;</span><br></pre></td></tr></table></figure><p>上述语法表示选择元素 1 里面的所有元素 2 (后代元素)。</p><ul><li>元素 1 和元素 2 中间用空格隔开</li><li>元素 1 是父级，元素 2 是子级，最终选择的是元素 2</li><li>元素 2 可以是儿子，也可以是孙子等，只要是元素 1 的后代即可</li><li>元素 1 和元素 2 可以是任意基础选择器</li></ul><h1 id="子选择器"><a href="#子选择器" class="headerlink" title="子选择器"></a>子选择器</h1><blockquote><p>子元素选择器（子选择器）只能选择作为某元素的最近一级子元素（亲儿子元素）。</p></blockquote><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">元素<span class="number">1</span> &gt; 元素<span class="number">2</span> &#123;样式声明&#125;</span><br></pre></td></tr></table></figure><p>上述语法表示选择元素 1 里面的所有直接后代 (子元素) 元素 2。</p><ul><li>元素 1 和元素 2 中间用大于号隔开</li><li>元素 1 是父级，元素 2 是子级，最终选择的是元素 2</li><li>元素 2 必须是亲儿子，其孙子、重孙之类都不归他管。</li></ul><h1 id="并集选择器"><a href="#并集选择器" class="headerlink" title="并集选择器"></a>并集选择器</h1><blockquote><p>并集选择器可以选择多组标签, 同时为他们定义相同的样式，通常用于集体声明</p></blockquote><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">元素<span class="number">1</span>,元素<span class="number">2</span>&#123;样式声明&#125;</span><br></pre></td></tr></table></figure><p>上述语法表示选择元素 1 和元素 2。</p><ul><li>元素 1 和元素 2 中间用逗号隔开</li><li>逗号可以理解为和的意思</li><li>并集选择器通常用于集体声明</li></ul><h1 id="伪类选择器"><a href="#伪类选择器" class="headerlink" title="伪类选择器"></a>伪类选择器</h1><blockquote><p>用于向某些选择器添加特殊的效果，比如给链接添加特殊效果，或选择第 1 个，第 n 个元素。</p></blockquote><p>伪类选择器书写最大的特点是用冒号（:）表示，比如 : hover 、 : first-child 。</p><h2 id="链接伪类选择器"><a href="#链接伪类选择器" class="headerlink" title="链接伪类选择器"></a>链接伪类选择器</h2><blockquote><p>用于向某些选择器添加特殊的效果，比如给链接添加特殊效果，或选择第 1 个，第 n 个元素。</p></blockquote><table><thead><tr><th>连接伪类选择器</th><th>说明</th></tr></thead><tbody><tr><td>a:link</td><td>没有点击过的 (访问过的) 链接</td></tr><tr><td>a:visited</td><td>点击过的 (访问过的) 链接</td></tr><tr><td>a:hover</td><td>鼠标经过的那个链接</td></tr><tr><td>a:active</td><td>鼠标正在按下还没有弹起鼠标的那个链接</td></tr></tbody></table><ul><li>为了确保生效，请按照 LVHA 的循顺序声明 :link－:visited－:hover－: active。</li></ul><h2 id="focus-伪类选择器"><a href="#focus-伪类选择器" class="headerlink" title=": focus 伪类选择器"></a>: focus 伪类选择器</h2><blockquote><p>: focus 伪类选择器用于选取获得焦点的表单元素。</p></blockquote><p>焦点就是光标，一般情况 <code>&lt;input&gt;</code> 类表单元素才能获取</p>]]></content>
      
      
      <categories>
          
          <category> CSS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSS </tag>
            
            <tag> 选择器 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSS字体与文本</title>
      <link href="/_posts/CSS3/5CSS%E5%AD%97%E4%BD%93%E4%B8%8E%E6%96%87%E6%9C%AC.md/"/>
      <url>/_posts/CSS3/5CSS%E5%AD%97%E4%BD%93%E4%B8%8E%E6%96%87%E6%9C%AC.md/</url>
      
        <content type="html"><![CDATA[<h1 id="字体属性"><a href="#字体属性" class="headerlink" title="字体属性"></a>字体属性</h1><h2 id="字体大小"><a href="#字体大小" class="headerlink" title="字体大小"></a>字体大小</h2><blockquote><p>使用 font-size 属性定义字体大小。</p></blockquote><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">p</span>&#123;</span><br><span class="line"><span class="attribute">font-size</span>: <span class="number">20px</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>px（像素）大小是网页最常用的单位</li><li>谷歌浏览器默认的文字大小为 16px</li></ul><h2 id="字体种类"><a href="#字体种类" class="headerlink" title="字体种类"></a>字体种类</h2><blockquote><p>使用 font-family 属性定义字体种类。</p></blockquote><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">p</span>&#123;</span><br><span class="line"><span class="attribute">font-family</span>: 仿宋;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Unicode 编码字体：</strong></p><p>把中文字体的名称用相应的 Unicode 编码来代替，这样就可以有效的避免浏览器解释 CSS 代码时候出现乱码的问题。</p><p>比如：</p><p>黑体 \9ED1\4F53<br>宋体 \5B8B\4F53<br>微软雅黑 \5FAE\8F6F\96C5\9ED1</p><h2 id="字体粗细"><a href="#字体粗细" class="headerlink" title="字体粗细"></a>字体粗细</h2><blockquote><p>使用 font-weight 属性设置文本字体的粗细。 </p></blockquote><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">p</span>&#123;</span><br><span class="line"><span class="attribute">font-weight</span>: bold;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><table><thead><tr><th>属性值</th><th>描述</th></tr></thead><tbody><tr><td>normal</td><td>默认值（不加粗）</td></tr><tr><td>bold</td><td>粗体（加粗）</td></tr><tr><td>100-900</td><td>400 等同于 normal，700 等同于 bold。<strong>注意：数字后没有单位</strong></td></tr></tbody></table><h2 id="字体样式"><a href="#字体样式" class="headerlink" title="字体样式"></a>字体样式</h2><blockquote><p>使用 font-style 属性设置文本的风格。 </p></blockquote><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">p</span>&#123;</span><br><span class="line"><span class="attribute">font-style</span>: normal;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><table><thead><tr><th>属性值</th><th>作用</th></tr></thead><tbody><tr><td>normal</td><td>默认值</td></tr><tr><td>italic</td><td>斜体的字体样式</td></tr></tbody></table><h2 id="字体的综合写法"><a href="#字体的综合写法" class="headerlink" title="字体的综合写法"></a>字体的综合写法</h2><blockquote><p>字体属性可以把以上文字样式综合来写, 这样可以更节约代码</p></blockquote><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">body</span> &#123;<span class="attribute">font</span>: font-style  font-weight  font-size/line-height  font-family;&#125;</span><br></pre></td></tr></table></figure><ul><li>必须按上面语法格式中的顺序书写，不能更换顺序，并且各个属性间以空格隔开</li><li>不需要设置的属性可以省略（取默认值），但必须保留 font-size 和 font-family 属性</li></ul><h1 id="CSS-文本属性"><a href="#CSS-文本属性" class="headerlink" title="CSS 文本属性"></a>CSS 文本属性</h1><h2 id="文本颜色"><a href="#文本颜色" class="headerlink" title="文本颜色"></a>文本颜色</h2><blockquote><p>color 属性用于定义文本的颜色。 </p></blockquote><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123; </span><br><span class="line"><span class="attribute">color</span>: red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>取值：预定义颜色值、十六进制或 RGB 代码</li></ul><h2 id="文本对齐"><a href="#文本对齐" class="headerlink" title="文本对齐"></a>文本对齐</h2><blockquote><p>text-align 属性用于设置元素内文本内容的水平对齐方式。</p></blockquote><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123; </span><br><span class="line"><span class="attribute">text-align</span>: center;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><table><thead><tr><th>属性值</th><th>解释</th></tr></thead><tbody><tr><td>left</td><td>左对齐（默认值）</td></tr><tr><td>right</td><td>右对齐</td></tr><tr><td>center</td><td>居中对齐</td></tr></tbody></table><h2 id="修饰文本"><a href="#修饰文本" class="headerlink" title="修饰文本"></a>修饰文本</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123; </span><br><span class="line"><span class="attribute">text-decoration</span>：underline；</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><table><thead><tr><th>属性值</th><th>描述</th></tr></thead><tbody><tr><td>none</td><td>默认，没有装饰线</td></tr><tr><td>underline</td><td>下划线，连接 a 自带下划线</td></tr><tr><td>overline</td><td>上划线</td></tr><tr><td>line-through</td><td>删除线</td></tr></tbody></table><h2 id="文本缩进"><a href="#文本缩进" class="headerlink" title="文本缩进"></a>文本缩进</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123; </span><br><span class="line"><span class="attribute">text-indent</span>：<span class="number">2em</span>；</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>em 是一个相对单位，就是当前元素（font-size) 1 个文字的大小, 如果当前元素没有设置大小，则会按照父元素的 1 个文字大小。</li></ul><h2 id="行间距（行高）"><a href="#行间距（行高）" class="headerlink" title="行间距（行高）"></a>行间距（行高）</h2><blockquote><p>line-height 属性用于设置行间的距离（行高）。可以控制文字行与行之间的距离</p></blockquote><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">p</span> &#123; </span><br><span class="line"><span class="attribute">line-height</span>: <span class="number">26px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>行高的文本分为：上间距+文本高度+下间距 &#x3D; 行间距</li><li>让文字的行高等于盒子的高度就可以让文字在当前盒子内垂直居中</li></ul>]]></content>
      
      
      <categories>
          
          <category> CSS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSS基础选择器</title>
      <link href="/_posts/CSS3/1CSS%E5%9F%BA%E7%A1%80%E9%80%89%E6%8B%A9%E5%99%A8.md/"/>
      <url>/_posts/CSS3/1CSS%E5%9F%BA%E7%A1%80%E9%80%89%E6%8B%A9%E5%99%A8.md/</url>
      
        <content type="html"><![CDATA[<blockquote><p>基础选择器包括：标签选择器、类选择器、id 选择器和通配符选择器</p></blockquote><h1 id="标签选择器"><a href="#标签选择器" class="headerlink" title="标签选择器"></a>标签选择器</h1><blockquote><p>用 HTML 标签名称作为选择器，按标签名称分类，为页面中某一类标签指定统一的 CSS 样式。</p></blockquote><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">标签选择器&#123;</span><br><span class="line">    属性：属性值</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="类选择器"><a href="#类选择器" class="headerlink" title="类选择器"></a>类选择器</h1><blockquote><p>差异化选择不同的标签，单独选一个或者某几个标签</p></blockquote><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">. 类名&#123;</span><br><span class="line">属性 <span class="number">1</span>: 属性值 <span class="number">1</span>;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结构需要用 class 属性来调用 <code>&lt;div class=&quot;类名&quot;&gt; </code> 内容 <code>&lt;/div&gt;</code></p><ul><li>类选择器在 HTML 中以 class 属性表示，在 CSS 中，类选择器以一个点“.”号显示。</li><li>类选择器使用“.”（英文点号）进行标识，后面紧跟类名（自定义)。</li><li>长名称或词组可以使用中横线来为选择器命名。</li><li>不要使用纯数字、中文等命名，尽量使用英文字母来表示。</li></ul><h1 id="多类名选择器"><a href="#多类名选择器" class="headerlink" title="多类名选择器"></a>多类名选择器</h1><blockquote><p>给一个标签指定多个类名，从而达到更多的选择目的。这些类名都可以选出这个标签。</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;red font20&quot;</span>&gt;</span> 亚瑟阿尔托莉雅 <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>. 在标签 class 属性中写多个类名</li><li>多个类名中间必须用空格分开</li><li>这个标签就分别具有这些类名的样式</li></ul><h1 id="Id-选择器"><a href="#Id-选择器" class="headerlink" title="Id 选择器"></a>Id 选择器</h1><blockquote><p>id 选择器可以为标有特定 id 的 HTML 元素指定特定的样式。</p></blockquote><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#id</span> 名&#123;</span><br><span class="line">属性 <span class="number">1</span>: 属性值 <span class="number">1</span>;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>HTML 元素以 id 属性来设置 id 选择器，CSS 中 id 选择器以“#” 来定义。</li><li>id 属性只能在每个 HTML 文档中出现一次</li></ul><h1 id="通配符选择器"><a href="#通配符选择器" class="headerlink" title="通配符选择器"></a>通配符选择器</h1><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">* &#123;</span><br><span class="line">属性 <span class="number">1</span>: 属性值 <span class="number">1</span>;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>通配符选择器不需要调用，自动给所有的元素使用样式</li></ul>]]></content>
      
      
      <categories>
          
          <category> CSS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSS </tag>
            
            <tag> 选择器 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>初识CSS</title>
      <link href="/_posts/CSS3/0%E5%88%9D%E8%AF%86CSS.md/"/>
      <url>/_posts/CSS3/0%E5%88%9D%E8%AF%86CSS.md/</url>
      
        <content type="html"><![CDATA[<h1 id="CSS-简介"><a href="#CSS-简介" class="headerlink" title="CSS 简介"></a>CSS 简介</h1><ol><li>CSS 是层叠样式表 ( Cascading Style Sheets ) 的简称，是一种标记语言。</li><li>CSS 主要用于设置 HTML 页面中的文本内容（字体、大小、对齐方式等）、图片的外形（宽高、边框样式、边距等）以及版面的布局和外观显示样式。</li></ol><h1 id="CSS-语法规范"><a href="#CSS-语法规范" class="headerlink" title="CSS 语法规范"></a>CSS 语法规范</h1><p><strong>选择器 { 属性:  值; }</strong></p><ul><li>选择器是用于指定 CSS 样式的 HTML 标签，花括号内是对该对象设置的具体样式 </li><li>属性和属性值以“键值对”的形式出现</li><li>属性是对指定的对象设置的样式属性</li><li>属性和属性值之间用英文“:”分开</li><li>多个“键值对”之间用英文“;”进行区分</li><li>所有的样式，都包含在 <code>&lt;style&gt;&lt;/style&gt;</code> 标签内，表示是样式表。<code>&lt;style&gt;&lt;/style&gt;</code> 一般写到 <code>&lt;/head&gt; </code>上方</li></ul><h1 id="CSS-选择器的作用"><a href="#CSS-选择器的作用" class="headerlink" title="CSS 选择器的作用"></a>CSS 选择器的作用</h1><p>选择器 (选择符) 就是根据不同需求把不同的标签选出来，简单来说，就是选择标签用的。</p><h1 id="CSS-样式表"><a href="#CSS-样式表" class="headerlink" title="CSS 样式表"></a>CSS 样式表</h1><blockquote><p>按照 CSS 样式书写的位置（或者引入的方式），CSS 样式表可以分为三大类：行内样式表（行内式）、内部样式表（嵌入式）、外部样式表（链接式）</p></blockquote><h2 id="行内样式表（行内式）"><a href="#行内样式表（行内式）" class="headerlink" title="行内样式表（行内式）"></a>行内样式表（行内式）</h2><blockquote><p>行内样式表（内联样式表）是在元素标签内部的 style 属性中设定 CSS 样式。适合于修改简单样式。</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;color: red; font-size: 12px;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>style 其实就是标签的属性，写在双引号中间，写法要符合 CSS 规范</li><li>可以控制当前的标签设置样式</li></ul><h2 id="内部样式表（嵌入式）"><a href="#内部样式表（嵌入式）" class="headerlink" title="内部样式表（嵌入式）"></a>内部样式表（嵌入式）</h2><blockquote><p>内部样式表（内嵌样式表）是写到 html 页面内部. 是将所有的 CSS 代码抽取出来，单独放到一个 <code>&lt;style&gt;</code> 标签中</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-tag">div</span> &#123;</span></span><br><span class="line"><span class="language-css"><span class="attribute">color</span>: red;</span></span><br><span class="line"><span class="language-css"><span class="attribute">font-size</span>: <span class="number">12px</span>;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><code>&lt;style&gt;</code> 标签理论上可以放在 HTML 文档的任何地方，但一般会放在文档的 <code>&lt;head&gt;</code> 标签中</li></ul><h2 id="外部样式表（链接式）"><a href="#外部样式表（链接式）" class="headerlink" title="外部样式表（链接式）"></a>外部样式表（链接式）</h2><blockquote><p>样式单独写到 CSS 文件中，之后把 CSS 文件引入到 HTML 页面中使用</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span>  <span class="attr">href</span>=<span class="string">&quot;css文件路径&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>新建一个后缀名为 .css 的样式文件，把所有 CSS 代码都放入此文件中。</li><li>在 HTML 页面中，使用 <code>&lt;link&gt;</code> 标签引入这个文件。</li></ul>]]></content>
      
      
      <categories>
          
          <category> CSS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSS </tag>
            
            <tag> 概念 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HTML常用的复杂标签</title>
      <link href="/_posts/HTML5/3HTML%E5%B8%B8%E7%94%A8%E7%9A%84%E5%A4%8D%E6%9D%82%E6%A0%87%E7%AD%BE.md/"/>
      <url>/_posts/HTML5/3HTML%E5%B8%B8%E7%94%A8%E7%9A%84%E5%A4%8D%E6%9D%82%E6%A0%87%E7%AD%BE.md/</url>
      
        <content type="html"><![CDATA[<h1 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h1><blockquote><p>用于显示、展示数据，它可以让数据显示的非常的规整，可读性非常好。</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span>单元格内的文字<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><code>&lt;table&gt; &lt;/table&gt;</code> 是用于定义表格的标签。</li><li><code>&lt;tr&gt; &lt;/tr&gt;</code> 标签用于定义表格中的行，必须嵌套在 <code>&lt;table&gt; &lt;/table&gt;</code> 标签中。</li><li><code>&lt;td&gt; &lt;/td&gt;</code> 用于定义表格中的单元格，必须嵌套在 <code>&lt;tr&gt;&lt;/tr&gt;</code> 标签中，其中字母 td 指表格数据（table data)，即数据单元格的内容。</li></ul><h2 id="表头单元格标签"><a href="#表头单元格标签" class="headerlink" title="表头单元格标签"></a>表头单元格标签</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">th</span>&gt;</span>表头<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>一般表头单元格位于表格的第一行或第一列，表头单元格里面的文本内容加粗居中显示， <code>&lt;th&gt; </code> 标签表示 HTML 表格的表头部分 (table head 的缩写)。</li></ul><h2 id="表格属性"><a href="#表格属性" class="headerlink" title="表格属性"></a>表格属性</h2><table><thead><tr><th>属性名</th><th>属性值</th><th>描述</th></tr></thead><tbody><tr><td>align</td><td>left、center、right</td><td>规定表格相对周围元素的对齐方式</td></tr><tr><td>border</td><td>1 或 “”</td><td>规定表格单元是否拥有边框，默认为 “”，表示没有边框</td></tr><tr><td>cellpadding</td><td>像素值</td><td>规定单元边沿与其内容之间的空白，默认 1 像素。</td></tr><tr><td>cellspacing</td><td>像素值</td><td>规定单元格之间的空白，默认 2 像素。</td></tr><tr><td>width</td><td>像素值或百分比</td><td>规定表格的宽度</td></tr></tbody></table><h2 id="表格结构标签"><a href="#表格结构标签" class="headerlink" title="表格结构标签"></a>表格结构标签</h2><blockquote><p>因为表格可能很长, 为了更好的表示表格的语义，可以将表格分割成表格头部和表格主体两大部分。</p></blockquote><p>在表格标签中，分别用：<code>&lt;thead&gt;</code> 标签表格的头部区域、<code>&lt;tbody&gt;</code> 标签表格的主体区域. 这样可以更好的分清表格结构。</p><ul><li><code>&lt;thead&gt;&lt;/thead&gt;</code>：用于定义表格的头部。<code>&lt;thead&gt;</code> 内部必须拥有 <code>&lt;tr&gt;</code> 标签。一般是位于第一行。</li><li><code>&lt;tbody&gt;&lt;/tbody&gt;</code>：用于定义表格的主体，主要用于放数据本体。</li><li>以上标签都是放在 <code>&lt;table&gt;&lt;/table&gt;</code> 标签中。</li></ul><h2 id="合并单元格"><a href="#合并单元格" class="headerlink" title="合并单元格"></a>合并单元格</h2><p><strong>跨行合并：</strong></p><p>rowspan&#x3D;”合并单元格的个数” ，最上侧单元格为目标单元格, 写合并代码。</p><p><strong>跨列合并：</strong></p><p>colspan&#x3D;”合并单元格的个数”，最左侧单元格为目标单元格, 写合并代码。</p><h1 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h1><blockquote><p>列表可以分为三大类：无序列表、有序列表和自定义列表。</p></blockquote><h2 id="无序列表"><a href="#无序列表" class="headerlink" title="无序列表"></a>无序列表</h2><blockquote><p><code>&lt;ul&gt;</code> 标签表示 HTML 页面中项目的无序列表，一般会以项目符号呈现列表项，而列表项使用 <code> &lt;li&gt;</code> 标签定义</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>列表项1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>列表项2<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>无序列表的各个列表项之间没有顺序级别之分，是并列的。</li><li><code>&lt;ul&gt;&lt;/ul&gt;</code> 中只能嵌套 <code>&lt;li&gt;&lt;/li&gt;</code> ，直接在 <code>&lt;ul&gt;&lt;/ul&gt; </code> 标签中输入其他标签或者文字的做法是不被允许的。</li><li><code>&lt;li&gt;&lt;/li&gt;</code> 相当于一个容器，可以容纳所有元素。</li></ul><h2 id="有序列表"><a href="#有序列表" class="headerlink" title="有序列表"></a>有序列表</h2><blockquote><p>各个列表项会按照一定的顺序排列定义。在 HTML 标签中，<code>&lt;ol&gt;</code> 标签用于定义有序列表，列表排序以数字来显示，并且使用 <code>&lt;li&gt;</code> 标签来定义列表项。</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ol</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>列表项1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>列表项2<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><code>&lt;ol&gt;&lt;/ol&gt;</code> 中只能嵌套 <code>&lt;li&gt;&lt;/li&gt;</code>，直接在 <code>&lt;ol&gt;&lt;/ol&gt;</code> 标签中输入其他标签或者文字的做法是不被允许的。</li><li><code>&lt;li&gt;&lt;/li&gt;</code> 相当于一个容器，可以容纳所有元素。</li></ul><h2 id="自定义列表"><a href="#自定义列表" class="headerlink" title="自定义列表"></a>自定义列表</h2><blockquote><p> 自定义列表常用于对术语或名词进行解释和描述，定义列表的列表项前没有任何项目符号。在 HTML 标签中，<code>&lt;dl&gt;</code> 标签用于定义描述列表（或定义列表），该标签会与 <code>&lt;dt&gt;</code>（定义项目&#x2F;名字）和 <code>&lt;dd&gt;</code>（描述每一个项目&#x2F;名字）一起使用。</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dl</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dt</span>&gt;</span>名词<span class="tag">&lt;/<span class="name">dt</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dd</span>&gt;</span>解释1<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dd</span>&gt;</span>解释2<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dl</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><code>&lt;dl&gt;&lt;/dl&gt;</code> 中只能嵌套 <code>&lt;dt&gt;&lt;/dt&gt;</code> 和 <code>&lt;dd&gt;&lt;/dd&gt;</code>，直接在 <code>&lt;dl&gt;&lt;/dl&gt;</code> 标签中输入其他标签或者文字的做法是不被允许的。</li><li><code>&lt;dt&gt;&lt;/dt&gt;</code> 和 <code>&lt;dd&gt;&lt;/dd&gt;</code> 相当于一个容器，可以容纳所有元素。</li></ul><h1 id="表单"><a href="#表单" class="headerlink" title="表单"></a>表单</h1><blockquote><p>使用表单目的是为了收集用户信息。在 HTML 中，一个完整的表单通常由表单域、表单控件（也称为表单元素）和提示信息 3 个部分构成。</p></blockquote><h2 id="表单域"><a href="#表单域" class="headerlink" title="表单域"></a>表单域</h2><blockquote><p>表单域是一个包含表单元素的区域。在 HTML 标签中，<code>&lt;form&gt;</code> 标签用于定义表单域。<code>&lt;form&gt;</code> 会把它范围内的表单元素信息提交给服务器。</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">“url地址”</span> <span class="attr">method</span>=<span class="string">“提交方式”</span> <span class="attr">name</span>=<span class="string">“表单域名称</span>&quot;&gt;</span>各种表单元素控件<span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><table><thead><tr><th>属性</th><th>属性值</th><th>作用</th></tr></thead><tbody><tr><td>action</td><td>url 地址</td><td>指定接收并处理表单数据的服务器程序的 url 地址。</td></tr><tr><td>method</td><td>get&#x2F;post</td><td>设置表单数据的提交方式。</td></tr><tr><td>name</td><td>名称</td><td>指定表单的名称，以区分同一个页面中的多个表单域。</td></tr></tbody></table><h2 id="表单控件（表单元素）"><a href="#表单控件（表单元素）" class="headerlink" title="表单控件（表单元素）"></a>表单控件（表单元素）</h2><h3 id="lt-input-gt-表单元素"><a href="#lt-input-gt-表单元素" class="headerlink" title="&lt;input&gt; 表单元素"></a><code>&lt;input&gt;</code> 表单元素</h3><blockquote><p>表单元素中 <code>&lt;input&gt;</code> 标签用于收集用户信息。在 <code>&lt;input&gt;</code> 标签中，包含一个 type 属性，根据不同的 type 属性值，输入字段拥有很多种形式（可以是文本字段、复选框、按钮等）。</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;属性值&quot;</span>  /&gt;</span></span><br></pre></td></tr></table></figure><p><code>&lt;input /&gt;</code> 标签为单标签 type 属性设置不同的属性值用来指定不同的控件类型。</p><table><thead><tr><th>属性值</th><th>描述</th></tr></thead><tbody><tr><td>button</td><td>可点击按钮</td></tr><tr><td>checkbox</td><td>复选框</td></tr><tr><td>file</td><td>输入字段和“浏览”按钮，供文件上传</td></tr><tr><td>hidden</td><td>隐藏的输入字段</td></tr><tr><td>image</td><td>图像形式的提交按钮</td></tr><tr><td>password</td><td>密码字段，该字段中的字符被掩码</td></tr><tr><td>radio</td><td>单选按钮</td></tr><tr><td>reset</td><td>重置按钮，清除表单中的所有数据</td></tr><tr><td>submit</td><td>提交按钮，把表单数据发送到服务器</td></tr><tr><td>text</td><td>单行的输入字段，用户可在其中输入文本，默认宽段 20 字符</td></tr></tbody></table><p><strong><code>&lt;input&gt;</code> 标签其他常用属性：</strong></p><table><thead><tr><th>属性</th><th>属性值</th><th>描述</th></tr></thead><tbody><tr><td>name</td><td>用户自定义</td><td>定义 input 元素的名称</td></tr><tr><td>value</td><td>用户自定义</td><td>规定 input 元素的值</td></tr><tr><td>checked</td><td>checked</td><td>规定此 input 元素首次加载时应当被选中</td></tr><tr><td>maxlength</td><td>正整数</td><td>规定输入字段中的字符的最大长度</td></tr></tbody></table><h3 id="lt-label-gt-标签"><a href="#lt-label-gt-标签" class="headerlink" title="&lt;label&gt; 标签"></a><code>&lt;label&gt;</code> 标签</h3><blockquote><p><code>&lt;label&gt;</code> 标签为 input 元素定义标注（标签）。</p></blockquote><p><code>&lt;label&gt;</code> 标签用于绑定一个表单元素, 当点击 <code>&lt;label&gt;</code> 标签内的文本时，浏览器就会自动将焦点 (光标) 转到或者选择对应的表单元素上, 用来增加用户体验。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;sex&quot;</span>&gt;</span>性别<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;sex&quot;</span>  <span class="attr">id</span>=<span class="string">&quot;sex&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure><ul><li><code>&lt;label&gt; </code> 标签的 for 属性应当与相关元素的 id 属性相同。</li></ul><h3 id="lt-select-gt-表单元素"><a href="#lt-select-gt-表单元素" class="headerlink" title="&lt;select&gt;表单元素"></a><code>&lt;select&gt;</code>表单元素</h3><blockquote><p><code>&lt;select&gt;</code> 标签控件定义下拉列表。</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">option</span>&gt;</span>选项1<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">option</span>&gt;</span>选项2<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">option</span>&gt;</span>选项3<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="lt-textarea-gt-表单元素"><a href="#lt-textarea-gt-表单元素" class="headerlink" title="&lt;textarea&gt; 表单元素"></a><code>&lt;textarea&gt;</code> 表单元素</h3><blockquote><p>表单元素中，<code>&lt;textarea&gt;</code> 标签是用于定义多行文本输入的控件。</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">textarea</span> <span class="attr">rows</span>=<span class="string">&quot;3&quot;</span> <span class="attr">cols</span>=<span class="string">&quot;20&quot;</span>&gt;</span>   文本内容 <span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>cols&#x3D;“每行中的字符数”</li><li>rows&#x3D;“显示的行数”</li></ul>]]></content>
      
      
      <categories>
          
          <category> HTML </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HTML </tag>
            
            <tag> table </tag>
            
            <tag> form </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HTML常用的标签</title>
      <link href="/_posts/HTML5/2HTML%E5%B8%B8%E7%94%A8%E7%9A%84%E7%AE%80%E5%8D%95%E6%A0%87%E7%AD%BE.md/"/>
      <url>/_posts/HTML5/2HTML%E5%B8%B8%E7%94%A8%E7%9A%84%E7%AE%80%E5%8D%95%E6%A0%87%E7%AD%BE.md/</url>
      
        <content type="html"><![CDATA[<h1 id="标题标签"><a href="#标题标签" class="headerlink" title="标题标签"></a>标题标签</h1><blockquote><p>HTML 提供了 6 个等级的网页标题 : h1-h6。</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span> 我是一级标题 <span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span> 我是二级标题 <span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h3</span>&gt;</span> 我是三级标题 <span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h4</span>&gt;</span> 我是四级标题 <span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h5</span>&gt;</span> 我是五级标题 <span class="tag">&lt;/<span class="name">h5</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h6</span>&gt;</span> 我是六级标题 <span class="tag">&lt;/<span class="name">h6</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>加了标题的文字会变的加粗加大。</li><li>一个标题独占一行。</li></ul><h1 id="段落标签"><a href="#段落标签" class="headerlink" title="段落标签"></a>段落标签</h1><blockquote><p><code>&lt;p&gt;&lt;/p&gt;</code> 标签用于定义段落，它可以将整个网页分为若干个段落。 </p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span> 我是一个段落标签 <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>文本在一个段落中会根据浏览器窗口的大小自动换行。</li><li>段落和段落之间保有空隙。</li></ul><h1 id="换行标签"><a href="#换行标签" class="headerlink" title="换行标签"></a>换行标签</h1><blockquote><p>希望某段文本强制换行显示，就需要使用换行标签 <code>&lt;br /&gt;</code>。 </p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br></pre></td></tr></table></figure><ul><li><code>&lt;br /&gt;</code> 是个单标签。</li><li><code>&lt;br /&gt; </code> 标签只是简单地开始新的一行，跟段落不一样，段落之间会插入一些垂直的间距。</li></ul><h1 id="文本格式化标签"><a href="#文本格式化标签" class="headerlink" title="文本格式化标签"></a>文本格式化标签</h1><blockquote><p>文本格式化标签，使文字以特殊的方式显示 </p></blockquote><table><thead><tr><th>语义</th><th>标签</th></tr></thead><tbody><tr><td>加粗</td><td><code>&lt;strong&gt;&lt;/strong&gt;</code> 或 <code>&lt;b&gt;&lt;/b&gt;</code></td></tr><tr><td>倾斜</td><td><code>&lt;em&gt;&lt;/em&gt;</code> 或 <code>&lt;i&gt;&lt;/i&gt;</code></td></tr><tr><td>删除线</td><td><code>&lt;del&gt;&lt;/del&gt;</code> 或 <code>&lt;s&gt;&lt;/s&gt;</code></td></tr><tr><td>下划线</td><td><code>&lt;ins&gt;&lt;/ins&gt;</code> 或 <code>&lt;u&gt;&lt;/u&gt;</code></td></tr></tbody></table><h1 id="Div-和-span-标签"><a href="#Div-和-span-标签" class="headerlink" title="Div 和 span 标签"></a>Div 和 span 标签</h1><blockquote><p><code>&lt;div&gt;</code> 和 <code>&lt;span&gt; </code> 是没有语义的，它们就是一个盒子，用来装内容的。</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span> 这是div <span class="tag">&lt;/<span class="name">div</span>&gt;</span>    </span><br><span class="line"><span class="tag">&lt;<span class="name">span</span>&gt;</span> 这是span <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><code>&lt;div&gt;</code> 标签用来布局，但是现在一行只能放一个 <code>&lt;div&gt;</code>。大盒子</li><li><code>&lt;span&gt;</code> 标签用来布局，一行上可以多个 <code>&lt;span&gt;</code>。小盒子</li></ul><h1 id="图片标签"><a href="#图片标签" class="headerlink" title="图片标签"></a>图片标签</h1><blockquote><p> 在 HTML 标签中，<code>&lt;img&gt;</code> 标签用于定义 HTML 页面中的图像。</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;图像URL&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure><table><thead><tr><th>属性</th><th>属性值</th><th>说明</th></tr></thead><tbody><tr><td>src</td><td>图片路径</td><td>必须属性</td></tr><tr><td>alt</td><td>文本</td><td>替换文本，图像不能显示时显示的文字</td></tr><tr><td>title</td><td>文本</td><td>提示文本，鼠标放到图像上，显示的文字</td></tr><tr><td>width</td><td>像素</td><td>设置图像的宽度</td></tr><tr><td>height</td><td>像素</td><td>设置图像的高度</td></tr><tr><td>border</td><td>像素</td><td>设置图像的边框粗细</td></tr></tbody></table><ul><li>图像标签可以拥有多个属性，必须写在标签名的后面。</li><li>属性之间不分先后顺序，标签名与属性、属性与属性之间均以空格分开。</li><li>属性采取键值对的格式，即 key&#x3D;“value” 的格式，属性 &#x3D;“属性值”。</li></ul><h1 id="链接标签"><a href="#链接标签" class="headerlink" title="链接标签"></a>链接标签</h1><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;跳转目标&quot;</span> <span class="attr">target</span>=<span class="string">&quot;目标窗口的弹出方式&quot;</span>&gt;</span> 文本或图像 <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><p>href：用于指定链接目标的 url 地址</p></li><li><p>target: 用于指定链接页面的打开方式_self 默认值 _blank 新窗口打开</p></li><li><p>“#”：空链接</p></li><li><p>下载链接: 如果 href 里面地址是一个文件或者压缩包，会下载这个文件。</p></li><li><p>锚点链接:  点我们点击链接, 可以快速定位到页面中的某个位置。 </p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--在链接文本的 href 属性中，设置属性值为#名字的形式，如--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#two&quot;</span>&gt;</span> 第2集 <span class="tag">&lt;/<span class="name">a</span>&gt;</span> </span><br><span class="line"><span class="comment">&lt;!--找到目标位置标签，里面添加一个id属性 = 刚才的名字如：--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h3</span> <span class="attr">id</span>=<span class="string">&quot;two&quot;</span>&gt;</span>第2集介绍<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h1 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h1><blockquote><p>在 HTML 文档中添加一些便于阅读和理解但又不需要显示在页面中的注释文字，就需要使用注释标签。</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 注释语句 --&gt;</span></span><br></pre></td></tr></table></figure><h1 id="特殊字符"><a href="#特殊字符" class="headerlink" title="特殊字符"></a>特殊字符</h1><blockquote><p>在 HTML 页面中，一些特殊的符号很难或者不方便直接使用，此时我们就可以使用下面的字符来替代。</p></blockquote><table><thead><tr><th>特殊字符</th><th>描述</th><th>字符的代码</th></tr></thead><tbody><tr><td></td><td>空格符</td><td><code>&amp;nbsp;</code></td></tr><tr><td>&lt;</td><td>小于号</td><td><code>&amp;lt;</code></td></tr><tr><td>&gt;</td><td>大于号</td><td><code>&amp;gt;</code></td></tr><tr><td>&amp;</td><td>和号</td><td><code>&amp;amp;</code></td></tr><tr><td>￥</td><td>人民币</td><td><code>&amp;yen;</code></td></tr><tr><td>&amp;copy;</td><td>版权</td><td><code>&amp;copy;</code></td></tr><tr><td>&amp;reg;</td><td>注册商标</td><td><code>&amp;reg;</code></td></tr><tr><td>&amp;deg;</td><td>摄氏度</td><td><code>&amp;deg;</code></td></tr><tr><td>&amp;plusmn;</td><td>正负号</td><td><code>&amp;plusmn;</code></td></tr><tr><td>&amp;times;</td><td>乘号</td><td><code>&amp;times;</code></td></tr><tr><td>&amp;divide;</td><td>除号</td><td><code>&amp;divide;</code></td></tr><tr><td>&amp;sup2;</td><td>平方</td><td><code>&amp;sup2;</code></td></tr><tr><td>&amp;sup3;</td><td>立方</td><td><code>&amp;sup3;</code></td></tr></tbody></table><p><strong>重点记住：空格、大于号、小于号</strong>，其余的使用很少，如果需要回头查阅即可。</p>]]></content>
      
      
      <categories>
          
          <category> HTML </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HTML </tag>
            
            <tag> 标签 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HTML标签导读</title>
      <link href="/_posts/HTML5/1HTML%E6%A0%87%E7%AD%BE%E5%AF%BC%E8%AF%BB.md/"/>
      <url>/_posts/HTML5/1HTML%E6%A0%87%E7%AD%BE%E5%AF%BC%E8%AF%BB.md/</url>
      
        <content type="html"><![CDATA[<h1 id="HTML-语法规则"><a href="#HTML-语法规则" class="headerlink" title="HTML 语法规则"></a>HTML 语法规则</h1><blockquote><p>HTML 标签是由尖括号包围的关键词</p></blockquote><table><thead><tr><th>类别</th><th>示例</th></tr></thead><tbody><tr><td>双标签</td><td><code>&lt;html&gt;&lt;/html&gt;</code></td></tr><tr><td>单标签</td><td><code>&lt;br /&gt;</code></td></tr></tbody></table><p>双标签的标签对中的第一个标签是开始标签，第二个标签是结束标签。</p><h2 id="标签的关系"><a href="#标签的关系" class="headerlink" title="标签的关系"></a>标签的关系</h2><p>双标签关系可以分为两类：包含（父子）关系和并列关系</p><table><thead><tr><th>关系</th><th>示例</th></tr></thead><tbody><tr><td>包含（父子）</td><td><code>&lt;head&gt;&lt;title&gt;&lt;/title&gt;&lt;/head&gt;</code></td></tr><tr><td>并列</td><td><code>&lt;div&gt;&lt;/div&gt;&lt;div&gt;&lt;/div&gt;</code></td></tr></tbody></table><h2 id="基本结构标签"><a href="#基本结构标签" class="headerlink" title="基本结构标签"></a>基本结构标签</h2><p>每个网页都会有一个基本的结构标签（也称为骨架标签），页面内容也是在这些基本标签上书写</p><table><thead><tr><th>标签名</th><th>定义</th><th>说明</th></tr></thead><tbody><tr><td><code>&lt;html&gt;&lt;/html&gt;</code></td><td>HTML 标签</td><td>页面中最大的标签，根标签</td></tr><tr><td><code>&lt;head&gt;&lt;/head&gt;</code></td><td>文档的头部</td><td>head 标签中必须设置 title 标签</td></tr><tr><td><code>&lt;title&gt;&lt;/title&gt;</code></td><td>文档的标题</td><td>页面的网页标题</td></tr><tr><td><code>&lt;body&gt;&lt;/body&gt;</code></td><td>文档的主体</td><td>页面内容基本都存放在这里</td></tr></tbody></table><h2 id="DOCTYPE"><a href="#DOCTYPE" class="headerlink" title="DOCTYPE"></a>DOCTYPE</h2><p><code>&lt;!DOCTYPE html&gt;</code>  文档类型声明标签, 告诉浏览器这个页面采取 html5 版本来显示页面。 </p><h2 id="lang-语言种类"><a href="#lang-语言种类" class="headerlink" title="lang 语言种类"></a>lang 语言种类</h2><blockquote><p>定义当前文档显示的语言。 </p></blockquote><p>en 定义语言为英语</p><p>zh-CN 定义语言为中文</p><p>其实对于文档显示来说，定义成 en 的文档也可以显示中文，定义成 zh-CN 的文档也可以显示英文，这个属性对浏览器和搜索引擎是有作用的</p><h2 id="字符集"><a href="#字符集" class="headerlink" title="字符集"></a>字符集</h2><blockquote><p>字符集 (Character set) 是多个字符的集合。以便计算机能够识别和存储各种文字。 </p></blockquote><p>在 <code>&lt;head&gt;&lt;/head&gt;</code> 标签内，可以通过 <code>&lt;meta&gt;</code> 标签的 charset 属性来规定 HTML 文档应该使用哪种字符编码。例： <code>&lt;meta charset=&quot; UTF-8&quot; /&gt;</code></p><p>charset 常用的值有：GB2312 、BIG5 、GBK 和 UTF-8，其中 UTF-8 也被称为万国码，基本包含了全世界所有国家需要用到的字符。</p><p><strong>注意：上面语法是必须要写的代码，否则可能引起乱码的情况。一般情况下，统一使用“UTF-8”编码。</strong></p><h2 id="语义化标签"><a href="#语义化标签" class="headerlink" title="语义化标签"></a>语义化标签</h2><blockquote><p>根据标签的语义，在合适的地方给一个最为合理的标签，可以让页面结构更清晰。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> HTML </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HTML </tag>
            
            <tag> 标签 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>初识HTML</title>
      <link href="/_posts/HTML5/0%E5%88%9D%E8%AF%86HTML.md/"/>
      <url>/_posts/HTML5/0%E5%88%9D%E8%AF%86HTML.md/</url>
      
        <content type="html"><![CDATA[<h1 id="网页的概念"><a href="#网页的概念" class="headerlink" title="网页的概念"></a>网页的概念</h1><ol><li>网站是指在因特网上根据一定的规则，使用 HTML 等制作的用于展示特定内容相关的网页集合。 </li><li>网页是网站中的一“页”，通常是 HTML 格式的文件，它要通过浏览器来阅读。</li></ol><h2 id="网页的组成"><a href="#网页的组成" class="headerlink" title="网页的组成"></a>网页的组成</h2><p>网页是构成网站的基本元素，它通常由图片、链接、文字、声音、视频等元素组成。通常我们看到的网页，常见以 .htm 或 .html 后缀结尾的文件，因此将其俗称为 HTML 文件。</p><h2 id="HTML-概念"><a href="#HTML-概念" class="headerlink" title="HTML 概念"></a>HTML 概念</h2><ol><li>HTML 指的是超文本标记语言 (Hyper Text Markup Language) ，它是用来描述网页的一种语言。</li><li>HTML 不是一种编程语言，而是一种标记语言 (markup language)。标记语言是一套标记标签 (markup tag)。</li></ol><h1 id="浏览器"><a href="#浏览器" class="headerlink" title="浏览器"></a>浏览器</h1><blockquote><p>浏览器是网页显示、运行的平台。</p></blockquote><p><strong>常用浏览器及其内核：</strong></p><table><thead><tr><th>浏览器</th><th>内核</th></tr></thead><tbody><tr><td>IE</td><td>Trident</td></tr><tr><td>firefox</td><td>Gecko</td></tr><tr><td>Safari</td><td>Webkit</td></tr><tr><td>chrome&#x2F;Opera</td><td>Blink</td></tr></tbody></table><h1 id="Web-标准"><a href="#Web-标准" class="headerlink" title="Web 标准"></a>Web 标准</h1><blockquote><p>Web 标准是由 W3C 组织和其他标准化组织制定的一系列标准的集合。W3C（万维网联盟）是国际最著名的标准化组织。</p></blockquote><h2 id="Web-标准的构成"><a href="#Web-标准的构成" class="headerlink" title="Web 标准的构成"></a>Web 标准的构成</h2><p>主要包括《结构 Structure》、《表现（Presentation）》和《行为（Behavior）》三个方面。</p><table><thead><tr><th>标准</th><th>说明</th></tr></thead><tbody><tr><td>结构</td><td>用于对<strong>网页元素</strong>进行整理和分类</td></tr><tr><td>表现</td><td>用于设置网页元素的<strong>外观样式</strong></td></tr><tr><td>行为</td><td>网页模型的定义及<strong>交互</strong>的编写</td></tr></tbody></table><p>Web 标准提出的最佳体验方案：<strong>结构、样式、行为相分离</strong>。  </p><p>简单理解：<strong>结构写到 HTML 文件中，表现写到 CSS 文件中，行为写到 JavaScript 文件中</strong></p>]]></content>
      
      
      <categories>
          
          <category> HTML </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 概念 </tag>
            
            <tag> HTML </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>STL 内置常用算法</title>
      <link href="/_posts/STL/10algorithm.md/"/>
      <url>/_posts/STL/10algorithm.md/</url>
      
        <content type="html"><![CDATA[<h1 id="STL常用算法"><a href="#STL常用算法" class="headerlink" title="STL常用算法"></a>STL常用算法</h1><p> 头文件</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//&lt;algorithm&gt;最大，涉及比较、交换、查找、遍历操作、复制、修改等</span></span><br><span class="line"><span class="comment">//&lt;numeric&gt;很小，只包括几个在序列上面进行简单数学运算的模板函数</span></span><br><span class="line"><span class="comment">//&lt;functional&gt;定义了一些模板类，用以声明函数对象</span></span><br></pre></td></tr></table></figure><h2 id="遍历算法"><a href="#遍历算法" class="headerlink" title="遍历算法"></a>遍历算法</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//遍历容器</span></span><br><span class="line">for_each(iterator begin,iterator end,_func);<span class="comment">//普通函数func,仿函数func();</span></span><br><span class="line"><span class="comment">//搬运容器到另一个容器中</span></span><br><span class="line"><span class="built_in">transform</span>(iterator begin1,iterator end1,iterator begin2,_func);<span class="comment">//目标容器需要提前开辟空间</span></span><br></pre></td></tr></table></figure><h2 id="查找算法"><a href="#查找算法" class="headerlink" title="查找算法"></a>查找算法</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//按值查找元素，找到返回指定位置迭代器，找不到返回结束迭代器位置</span></span><br><span class="line"><span class="built_in">find</span>(iterator begin,iterator end,value);<span class="comment">//自定义数据需重载==</span></span><br><span class="line"><span class="comment">//按值查找元素，找到返回指定位置迭代器，找不到返回结束迭代器位置</span></span><br><span class="line"><span class="built_in">find_if</span>(iterator begin,iterator end,Pred);<span class="comment">//_Pred函数或者谓词（返回bool类型的仿函数）</span></span><br><span class="line"><span class="comment">//查找相邻重复元素，返回相邻元素的第一个位置的迭代器</span></span><br><span class="line"><span class="function">adjacent <span class="title">find</span><span class="params">(iterator begin,iterator end)</span></span>;</span><br><span class="line"><span class="comment">//查找指定的元素，查到返回true否则false</span></span><br><span class="line"><span class="function"><span class="type">bool</span> binary <span class="title">search</span><span class="params">(iterator begin,iterator end,value)</span></span>;<span class="comment">//注意：在无序序列中不可用</span></span><br><span class="line"><span class="comment">//统计元素出现次数</span></span><br><span class="line"><span class="built_in">count</span>(iterator begin,iterator end,value);</span><br><span class="line"><span class="comment">//按条件统计元素出现次数</span></span><br><span class="line"><span class="built_in">count_if</span>(iterator begin,iterator end,_Pred);</span><br></pre></td></tr></table></figure><h2 id="排序算法"><a href="#排序算法" class="headerlink" title="排序算法"></a>排序算法</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//对容器内元素进行排序</span></span><br><span class="line"><span class="built_in">sort</span>(iterator begin,iterator end,_Pred);</span><br><span class="line"><span class="comment">//洗牌，指定范围内的元素随机调整次序</span></span><br><span class="line"><span class="built_in">random_shuffle</span>(iterator begin,iterator end);</span><br><span class="line"><span class="comment">//容器元素合并，并存储到另一容器中</span></span><br><span class="line"><span class="built_in">merge</span>(iterator begin1,iterator end1,iterator begin2,iterator end2,iterator dest);<span class="comment">//注意：两个容器必须是有序的</span></span><br><span class="line"><span class="comment">//反转指定范围[begin,end)的元素</span></span><br><span class="line"><span class="built_in">reverse</span>(iterator begin,iterator end);</span><br></pre></td></tr></table></figure><h2 id="拷贝替换算法"><a href="#拷贝替换算法" class="headerlink" title="拷贝替换算法"></a>拷贝替换算法</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//容器内指定范围的元素拷贝到另一容器中</span></span><br><span class="line"><span class="built_in">copy</span>(iterator begin,iterator end,iterator dest);</span><br><span class="line"><span class="comment">//将区间内旧元素替换成新元素</span></span><br><span class="line"><span class="built_in">replace</span>(iterator begin,iterator end,oldvalue,newvalue);</span><br><span class="line"><span class="comment">//按条件替换元素，满足条件的替换成指定元素</span></span><br><span class="line"><span class="built_in">replace_if</span>(iterator begin,iterator end,_pred,newvalue);</span><br><span class="line"><span class="comment">//互换两个同种类型的容器的元素</span></span><br><span class="line"><span class="built_in">swap</span>(container c1,container c2);</span><br></pre></td></tr></table></figure><h2 id="算数生成算法"><a href="#算数生成算法" class="headerlink" title="算数生成算法"></a>算数生成算法</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;numeric&gt;</span></span></span><br><span class="line"><span class="comment">//计算容器元素累计总和</span></span><br><span class="line"><span class="built_in">accumulate</span>(iterator begin,iterator end,value);<span class="comment">//value起始累加值</span></span><br><span class="line"><span class="comment">//向容器中填充元素</span></span><br><span class="line"><span class="built_in">fill</span>(iterator begin,iterator end,value);<span class="comment">//value填充的值</span></span><br></pre></td></tr></table></figure><h2 id="集合算法"><a href="#集合算法" class="headerlink" title="集合算法"></a>集合算法</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//求两个集合的交集，返回值是交集中最后一个元素位置</span></span><br><span class="line"><span class="built_in">set_intersection</span>(iterator begin1,iterator end1,iterator begin2,iterator end2,iterator dest);<span class="comment">//注意：两个集合必须是有序序列，目标容器开辟空间需要从两个容器取较小值</span></span><br><span class="line"><span class="comment">//求两个集合的并集，返回值是并集中最后一个元素位置</span></span><br><span class="line"><span class="built_in">set_union</span>(iterator begin1,iterator end1,iterator begin2,iterator end2,iterator dest);<span class="comment">//注意：两个集合必须是有序序列，目标容器开辟空间需要两个容器相加</span></span><br><span class="line"><span class="comment">//求两个集合1与2的差集，返回值是差集中最后一个元素位置</span></span><br><span class="line"><span class="built_in">set_difference</span>(iterator begin1,iterator end1,iterator begin2,iterator end2,iterator dest);<span class="comment">//注意：两个集合必须是有序序列，目标容器开辟空间需要从两个容器取较大值</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> STL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> STL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>STL 函数对象</title>
      <link href="/_posts/STL/9FunctionObject.md/"/>
      <url>/_posts/STL/9FunctionObject.md/</url>
      
        <content type="html"><![CDATA[<h1 id="函数对象"><a href="#函数对象" class="headerlink" title="函数对象"></a>函数对象</h1><p> 重载函数调用操作符的类，其对象称为函数对象</p><p> 函数对象使用重载的（）时，行为类似函数调用，也叫仿函数</p><p> 本质是一个类</p><h2 id="谓词"><a href="#谓词" class="headerlink" title="谓词"></a>谓词</h2><p> 返回bool类型的仿函数称为谓词</p><p> 如果operator()接受一个参数，那么叫做一元谓词</p><p> 如果operator()接受两个参数，那么叫做二元谓词</p><h2 id="内建函数对象"><a href="#内建函数对象" class="headerlink" title="内建函数对象"></a>内建函数对象</h2><p> 引入头文件</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;functional&gt;</span></span></span><br></pre></td></tr></table></figure><p> 算数仿函数&#x2F;关系仿函数&#x2F;逻辑仿函数</p><h2 id="算数仿函数"><a href="#算数仿函数" class="headerlink" title="算数仿函数"></a>算数仿函数</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//加法仿函数</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">class</span> <span class="title class_">T</span>&gt;T plus&lt;T&gt;</span><br><span class="line"><span class="comment">//减法仿函数</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">class</span> <span class="title class_">T</span>&gt;T minus&lt;T&gt;</span><br><span class="line"><span class="comment">//乘法仿函数</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">class</span> <span class="title class_">T</span>&gt;T multiplies&lt;T&gt;</span><br><span class="line"><span class="comment">//除法仿函数</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">class</span> <span class="title class_">T</span>&gt;T divides&lt;T&gt;</span><br><span class="line"><span class="comment">//取模仿函数</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">class</span> <span class="title class_">T</span>&gt;T modulus&lt;T&gt;</span><br><span class="line"><span class="comment">//取反仿函数</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">class</span> <span class="title class_">T</span>&gt;T negate&lt;T&gt;</span><br></pre></td></tr></table></figure><h2 id="范例"><a href="#范例" class="headerlink" title="范例"></a>范例</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">negate&lt;<span class="type">int</span>&gt; n;</span><br><span class="line"><span class="built_in">n</span>(<span class="number">1</span>);</span><br><span class="line">plus&lt;<span class="type">int</span>&gt; p;</span><br><span class="line"><span class="built_in">p</span>(<span class="number">1</span>,<span class="number">2</span>);</span><br></pre></td></tr></table></figure><h2 id="关系仿函数"><a href="#关系仿函数" class="headerlink" title="关系仿函数"></a>关系仿函数</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//等于</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">class</span> <span class="title class_">T</span>&gt;<span class="type">bool</span> equal_to&lt;T&gt;</span><br><span class="line"><span class="comment">//不等于</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">class</span> <span class="title class_">T</span>&gt;<span class="type">bool</span> <span class="keyword">not</span> equal to&lt;T&gt;</span><br><span class="line"><span class="comment">//大于</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">class</span> <span class="title class_">T</span>&gt;<span class="type">bool</span> greater&lt;T&gt;</span><br><span class="line"><span class="comment">//大于等于</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">class</span> <span class="title class_">T</span>&gt;<span class="type">bool</span> greater_equal&lt;T&gt;</span><br><span class="line"><span class="comment">//小于</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">class</span> <span class="title class_">T</span>&gt;<span class="type">bool</span> less&lt;T&gt;</span><br><span class="line"><span class="comment">//小于等于</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">class</span> <span class="title class_">T</span>&gt;<span class="type">bool</span> less_equal&lt;T&gt;</span><br></pre></td></tr></table></figure><h2 id="逻辑仿函数"><a href="#逻辑仿函数" class="headerlink" title="逻辑仿函数"></a>逻辑仿函数</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//逻辑与</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">class</span> <span class="title class_">T</span>&gt;<span class="type">bool</span> logical_and&lt;T&gt;</span><br><span class="line"><span class="comment">//逻辑或</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">class</span> <span class="title class_">T</span>&gt;<span class="type">bool</span> logical_or&lt;T&gt;</span><br><span class="line"><span class="comment">//逻辑非</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">class</span> <span class="title class_">T</span>&gt;<span class="type">bool</span> logical_not&lt;T&gt;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> STL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> STL </tag>
            
            <tag> 函数对象 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>STL map容器</title>
      <link href="/_posts/STL/8map.md/"/>
      <url>/_posts/STL/8map.md/</url>
      
        <content type="html"><![CDATA[<h1 id="map-x2F-multimap容器"><a href="#map-x2F-multimap容器" class="headerlink" title="map&#x2F;multimap容器"></a>map&#x2F;multimap容器</h1><p> 所有的元素都是pair</p><p> pair中第一个元素为key（键值），起到索引作用，第二个元素为value(实值)</p><p> 所有元素根据键值自动排序</p><p> 关联式容器&#x2F;底层为二叉树</p><table><thead><tr><th align="center">map</th><th align="center">multimap</th></tr></thead><tbody><tr><td align="center">不允许有重复的key值元素</td><td align="center">允许有重复的key值元素</td></tr></tbody></table><h2 id="构造"><a href="#构造" class="headerlink" title="构造"></a>构造</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">map&lt;T1,T2&gt; m;</span><br></pre></td></tr></table></figure><h2 id="赋值"><a href="#赋值" class="headerlink" title="赋值"></a>赋值</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//重载 = 操作符</span></span><br></pre></td></tr></table></figure><h2 id="大小和交换"><a href="#大小和交换" class="headerlink" title="大小和交换"></a>大小和交换</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//返回容器中元素的数目</span></span><br><span class="line">m.<span class="built_in">size</span>();</span><br><span class="line"><span class="comment">//判断容器是否为空</span></span><br><span class="line">m.<span class="built_in">empty</span>();</span><br><span class="line"><span class="comment">//交换两个集合容器</span></span><br><span class="line">m.<span class="built_in">swap</span>(mp);</span><br></pre></td></tr></table></figure><h2 id="插入和删除"><a href="#插入和删除" class="headerlink" title="插入和删除"></a>插入和删除</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//在容器中插入元素</span></span><br><span class="line">m.<span class="built_in">insert</span>(elem);</span><br><span class="line"><span class="comment">//清除所有元素</span></span><br><span class="line">m.<span class="built_in">clear</span>();</span><br><span class="line"><span class="comment">//删除pos迭代器所指向的元素，返回下一个元素的迭代器</span></span><br><span class="line">m.<span class="built_in">erase</span>(pos);</span><br><span class="line"><span class="comment">//删除区间[begin,end)的所有元素，返回下一个元素的迭代器</span></span><br><span class="line">m.<span class="built_in">erase</span>(begin,end);</span><br><span class="line"><span class="comment">//删除容器中键值为key的元素</span></span><br><span class="line">m.<span class="built_in">erase</span>(key);</span><br></pre></td></tr></table></figure><h2 id="插入的几种写法"><a href="#插入的几种写法" class="headerlink" title="插入的几种写法"></a>插入的几种写法</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">m.<span class="built_in">insert</span>(<span class="built_in">pair</span>&lt;<span class="type">int</span>,<span class="type">int</span>&gt;(key,value));</span><br><span class="line">m.<span class="built_in">insert</span>(<span class="built_in">make_pair</span>(key,value));</span><br><span class="line">m.<span class="built_in">insert</span>(map&lt;<span class="type">int</span>,<span class="type">int</span>&gt;::<span class="built_in">value_type</span>(key,value));</span><br><span class="line"><span class="comment">//不推荐</span></span><br><span class="line">m[key] = value;</span><br></pre></td></tr></table></figure><h2 id="查找和统计"><a href="#查找和统计" class="headerlink" title="查找和统计"></a>查找和统计</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//查找key是否存在，返回该键的元素的迭代器；若不存在，返回set.end();</span></span><br><span class="line">m.<span class="built_in">find</span>(key);</span><br><span class="line"><span class="comment">//统计key的元素个数</span></span><br><span class="line">m.<span class="built_in">count</span>(key);</span><br></pre></td></tr></table></figure><h2 id="修改排序规则"><a href="#修改排序规则" class="headerlink" title="修改排序规则"></a>修改排序规则</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//仿函数</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyCompare</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">operator</span><span class="params">()</span><span class="params">(<span class="type">int</span> v1,<span class="type">int</span> v2)</span></span>&#123;</span><br><span class="line">        <span class="comment">//降序</span></span><br><span class="line">        <span class="keyword">return</span> v1 &gt; v2;</span><br><span class="line">    &#125;  </span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//map按照仿函数定义的规则排序</span></span><br><span class="line"><span class="comment">//自定义数据类型必须指定排序规则</span></span><br><span class="line">map&lt;<span class="type">int</span>,<span class="type">int</span>,MyCompare&gt; m;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> STL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> STL </tag>
            
            <tag> map </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>STL pair容器</title>
      <link href="/_posts/STL/7pair.md/"/>
      <url>/_posts/STL/7pair.md/</url>
      
        <content type="html"><![CDATA[<h1 id="pair对组"><a href="#pair对组" class="headerlink" title="pair对组"></a>pair对组</h1><h2 id="创建"><a href="#创建" class="headerlink" title="创建"></a>创建</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">pair&lt;type,type&gt; <span class="title">p</span> <span class="params">(value1,value2)</span></span>;</span><br><span class="line">pair&lt;type,type&gt; p = <span class="built_in">make_pair</span>(value1,value2);</span><br></pre></td></tr></table></figure><h2 id="访问"><a href="#访问" class="headerlink" title="访问"></a>访问</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">p.first</span><br><span class="line">p.second </span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> STL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> STL </tag>
            
            <tag> pair </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>STL set容器</title>
      <link href="/_posts/STL/6set.md/"/>
      <url>/_posts/STL/6set.md/</url>
      
        <content type="html"><![CDATA[<h1 id="set-x2F-multiset容器"><a href="#set-x2F-multiset容器" class="headerlink" title="set&#x2F;multiset容器"></a>set&#x2F;multiset容器</h1><p>所有元素都会在插入时自动被排序</p><p>关联式容器&#x2F;底层为二叉树</p><table><thead><tr><th align="center">set</th><th align="center">multiset</th></tr></thead><tbody><tr><td align="center">不允许容器中有重复的元素</td><td align="center">允许容器中有重复的元素</td></tr></tbody></table><h2 id="构造"><a href="#构造" class="headerlink" title="构造"></a>构造</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">set&lt;T&gt; s</span><br></pre></td></tr></table></figure><h2 id="赋值"><a href="#赋值" class="headerlink" title="赋值"></a>赋值</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//重载 = 操作符</span></span><br></pre></td></tr></table></figure><h2 id="大小和交换"><a href="#大小和交换" class="headerlink" title="大小和交换"></a>大小和交换</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//返回容器中元素的数目</span></span><br><span class="line">s.<span class="built_in">size</span>();</span><br><span class="line"><span class="comment">//判断容器是否为空</span></span><br><span class="line">s.<span class="built_in">empty</span>();</span><br><span class="line"><span class="comment">//交换两个集合容器</span></span><br><span class="line">s.<span class="built_in">swap</span>(st); </span><br></pre></td></tr></table></figure><h2 id="插入和删除"><a href="#插入和删除" class="headerlink" title="插入和删除"></a>插入和删除</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//在容器中插入元素</span></span><br><span class="line">s.<span class="built_in">insert</span>(elem);</span><br><span class="line"><span class="comment">//清除所有元素</span></span><br><span class="line">s.<span class="built_in">clear</span>();</span><br><span class="line"><span class="comment">//删除pos迭代器所指向的元素，返回下一个元素的迭代器</span></span><br><span class="line">s.<span class="built_in">erase</span>(pos);</span><br><span class="line"><span class="comment">//删除区间[begin,end)的所有元素，返回下一个元素的迭代器</span></span><br><span class="line">s.<span class="built_in">erase</span>(begin,end);</span><br><span class="line"><span class="comment">//删除容器中值为elem的元素</span></span><br><span class="line">s.<span class="built_in">erase</span>(elem);</span><br></pre></td></tr></table></figure><h2 id="查找和统计"><a href="#查找和统计" class="headerlink" title="查找和统计"></a>查找和统计</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//查找key是否存在，若存在，返回该键的元素的迭代器；若不存在，返回set.end();</span></span><br><span class="line">s.<span class="built_in">find</span>(key);</span><br><span class="line"><span class="comment">//统计key的元素个数</span></span><br><span class="line">s.<span class="built_in">count</span>(key);</span><br></pre></td></tr></table></figure><h2 id="修改排序规则"><a href="#修改排序规则" class="headerlink" title="修改排序规则"></a>修改排序规则</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//仿函数</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyCompare</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">operator</span><span class="params">()</span><span class="params">(<span class="type">int</span> v1,<span class="type">int</span> v2)</span></span>&#123;</span><br><span class="line">        <span class="comment">//降序</span></span><br><span class="line">        <span class="keyword">return</span> v1 &gt; v2;</span><br><span class="line">    &#125;  </span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//set按照仿函数定义的规则排序</span></span><br><span class="line"><span class="comment">//自定义数据类型必须指定排序规则</span></span><br><span class="line">set&lt;<span class="type">int</span>,MyCompare&gt; s;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> STL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> STL </tag>
            
            <tag> set </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>STL list容器</title>
      <link href="/_posts/STL/5list.md/"/>
      <url>/_posts/STL/5list.md/</url>
      
        <content type="html"><![CDATA[<h1 id="list容器"><a href="#list容器" class="headerlink" title="list容器"></a>list容器</h1><p> 双向链表</p><h2 id="构造"><a href="#构造" class="headerlink" title="构造"></a>构造</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">list&lt;T&gt; l;</span><br><span class="line"><span class="comment">//将l[begin(),end())区间的元素拷贝给本身</span></span><br><span class="line"><span class="built_in">list</span>(l.<span class="built_in">begin</span>(),l.<span class="built_in">end</span>());</span><br><span class="line"><span class="comment">//构造函数将n个elem拷贝给本身</span></span><br><span class="line"><span class="built_in">list</span>(n,elem);</span><br></pre></td></tr></table></figure><h2 id="数据元素插入和删除操作"><a href="#数据元素插入和删除操作" class="headerlink" title="数据元素插入和删除操作"></a>数据元素插入和删除操作</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//在容器尾部加入一个元素</span></span><br><span class="line">l.<span class="built_in">push_back</span>(elem);</span><br><span class="line"><span class="comment">//删除容器中最后一个元素</span></span><br><span class="line">l.<span class="built_in">pop_back</span>();</span><br><span class="line"><span class="comment">//在容器开头插入一个元素</span></span><br><span class="line">l.<span class="built_in">push_front</span>(elem);</span><br><span class="line"><span class="comment">//从容器开头移除第一个元素</span></span><br><span class="line">l.<span class="built_in">pop_front</span>();</span><br><span class="line"><span class="comment">//在pos位置插入elem元素的拷贝，返回数据的位置</span></span><br><span class="line">l.<span class="built_in">insert</span>(pos,elem);</span><br><span class="line"><span class="comment">//在pos位置插入n个elem数据数据,无返回值</span></span><br><span class="line">l.<span class="built_in">insert</span>(pos,n,elem);</span><br><span class="line"><span class="comment">//在pos 位置插入[begin,end)区间的数据，无返回值</span></span><br><span class="line">l.<span class="built_in">insert</span>(pos,begin,end);</span><br><span class="line"><span class="comment">//移除容器中的所有数据</span></span><br><span class="line">l.<span class="built_in">clear</span>();</span><br><span class="line"><span class="comment">//删除[begin,end)区间的数据，返回下一个数据的位置</span></span><br><span class="line">l.<span class="built_in">erase</span>(begin,end);</span><br><span class="line"><span class="comment">//删除pos位置的数据，返回下一个数据的位置</span></span><br><span class="line">l.<span class="built_in">erase</span>(pos);</span><br><span class="line"><span class="comment">//删除容器中所有与elem值匹配的元素</span></span><br><span class="line">l.<span class="built_in">remove</span>(elem);</span><br></pre></td></tr></table></figure><h2 id="大小操作"><a href="#大小操作" class="headerlink" title="大小操作"></a>大小操作</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//返回容器中元素的个数</span></span><br><span class="line">l.<span class="built_in">size</span>();</span><br><span class="line"><span class="comment">//判断容器是否为空</span></span><br><span class="line">l.<span class="built_in">empty</span>();</span><br><span class="line"><span class="comment">//重新指定容器的长度为num，若容器变长，则以默认值填充新位置，如果容器变短，则末尾超出容器长度的元素被删除</span></span><br><span class="line">l.<span class="built_in">resize</span>(num);</span><br><span class="line"><span class="comment">//重新指定容器长度为num，若容器变长，则以elem值填充新位置，如果容器变短，则末尾超出容器长度的元素被删除</span></span><br><span class="line">l.<span class="built_in">resize</span>(num,elem);  </span><br></pre></td></tr></table></figure><h2 id="赋值"><a href="#赋值" class="headerlink" title="赋值"></a>赋值</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//将[begin,end)区间中的数据拷贝赋值给本身</span></span><br><span class="line">l.<span class="built_in">assign</span>(begin,end);</span><br><span class="line"><span class="comment">//将n个elem拷贝赋值给本身</span></span><br><span class="line">l.<span class="built_in">assign</span>(n,elem);</span><br><span class="line"><span class="comment">//重载=操作符</span></span><br><span class="line"><span class="comment">//将list与本身元素互换</span></span><br><span class="line">l.<span class="built_in">swap</span>(lst);</span><br></pre></td></tr></table></figure><h2 id="存取"><a href="#存取" class="headerlink" title="存取"></a>存取</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//返回第一个元素</span></span><br><span class="line">l.<span class="built_in">front</span>();</span><br><span class="line"><span class="comment">//返回最后一个元素</span></span><br><span class="line">l.<span class="built_in">back</span>();</span><br></pre></td></tr></table></figure><h2 id="反转与排序"><a href="#反转与排序" class="headerlink" title="反转与排序"></a>反转与排序</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//反转链表</span></span><br><span class="line">l.<span class="built_in">reverse</span>();</span><br><span class="line"><span class="comment">//排序</span></span><br><span class="line">l.<span class="built_in">sort</span>();</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> STL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> STL </tag>
            
            <tag> list </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>STL queue容器</title>
      <link href="/_posts/STL/4queue.md/"/>
      <url>/_posts/STL/4queue.md/</url>
      
        <content type="html"><![CDATA[<h1 id="queue容器"><a href="#queue容器" class="headerlink" title="queue容器"></a>queue容器</h1><p> 队列容器&#x2F;先进先出</p><p> 不提供迭代器&#x2F;不能遍历&#x2F;不支持随机访问</p><h2 id="构造"><a href="#构造" class="headerlink" title="构造"></a>构造</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">queue&lt;T&gt; q;</span><br></pre></td></tr></table></figure><h2 id="存取、插入和删除"><a href="#存取、插入和删除" class="headerlink" title="存取、插入和删除"></a>存取、插入和删除</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//往队尾添加元素</span></span><br><span class="line">q.<span class="built_in">push</span>(elem);</span><br><span class="line"><span class="comment">//从队头移除第一个元素</span></span><br><span class="line">q.<span class="built_in">pop</span>();</span><br><span class="line"><span class="comment">//返回最后一个元素</span></span><br><span class="line">q.<span class="built_in">back</span>();</span><br><span class="line"><span class="comment">//返回第一个元素</span></span><br><span class="line">q.<span class="built_in">front</span>();</span><br></pre></td></tr></table></figure><h2 id="赋值操作"><a href="#赋值操作" class="headerlink" title="赋值操作"></a>赋值操作</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//重载=操作符</span></span><br></pre></td></tr></table></figure><h2 id="大小操作"><a href="#大小操作" class="headerlink" title="大小操作"></a>大小操作</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//判断队列是否为空</span></span><br><span class="line">q.<span class="built_in">empty</span>();</span><br><span class="line"><span class="comment">//返回队列大小</span></span><br><span class="line">q.<span class="built_in">size</span>();</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> STL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> STL </tag>
            
            <tag> queue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>STL Stack容器</title>
      <link href="/_posts/STL/3Stack.md/"/>
      <url>/_posts/STL/3Stack.md/</url>
      
        <content type="html"><![CDATA[<h1 id="Stack容器"><a href="#Stack容器" class="headerlink" title="Stack容器"></a>Stack容器</h1><p> 先进后出</p><p> 不能遍历，不支持随机存取，只能通过top从栈顶获取和删除元素</p><h2 id="构造"><a href="#构造" class="headerlink" title="构造"></a>构造</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">stack&lt;T&gt; s;</span><br></pre></td></tr></table></figure><h2 id="赋值"><a href="#赋值" class="headerlink" title="赋值"></a>赋值</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//重载等号操作符</span></span><br></pre></td></tr></table></figure><h2 id="数据存取"><a href="#数据存取" class="headerlink" title="数据存取"></a>数据存取</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//向栈顶添加元素</span></span><br><span class="line"><span class="built_in">push</span>(elem);</span><br><span class="line"><span class="comment">//从栈顶移除第一个元素</span></span><br><span class="line"><span class="built_in">pop</span>();</span><br><span class="line"><span class="comment">//返回栈顶元素</span></span><br><span class="line"><span class="built_in">top</span>();</span><br></pre></td></tr></table></figure><h2 id="大小操作"><a href="#大小操作" class="headerlink" title="大小操作"></a>大小操作</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//判断栈是否为空</span></span><br><span class="line">s.<span class="built_in">empty</span>();</span><br><span class="line"><span class="comment">//返回堆栈的大小</span></span><br><span class="line">s.<span class="built_in">size</span>();</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> STL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> STL </tag>
            
            <tag> Stack </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>STL deque容器</title>
      <link href="/_posts/STL/2deque.md/"/>
      <url>/_posts/STL/2deque.md/</url>
      
        <content type="html"><![CDATA[<h1 id="deque容器"><a href="#deque容器" class="headerlink" title="deque容器"></a>deque容器</h1><p> 双口（端）数组</p><p> 自行内存回收</p><h2 id="构造"><a href="#构造" class="headerlink" title="构造"></a>构造</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">deque&lt;T&gt; d</span><br><span class="line"><span class="comment">//将d[begin(),end())区间的元素拷贝给本身</span></span><br><span class="line"><span class="built_in">deque</span>(d.<span class="built_in">begin</span>(),d.<span class="built_in">end</span>());</span><br><span class="line"><span class="comment">//构造函数将n个elem拷贝给本身</span></span><br><span class="line"><span class="built_in">deque</span>(n,elem);</span><br></pre></td></tr></table></figure><h2 id="迭代器"><a href="#迭代器" class="headerlink" title="迭代器"></a>迭代器</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">deque&lt;<span class="type">int</span>&gt;::iterator it = d.<span class="built_in">begin</span>(); </span><br></pre></td></tr></table></figure><h2 id="赋值"><a href="#赋值" class="headerlink" title="赋值"></a>赋值</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//将[begin,end)区间的数据拷贝赋值给本身</span></span><br><span class="line">d.<span class="built_in">assign</span>(begin,end);</span><br><span class="line"><span class="comment">//将n个elem拷贝赋值给本身</span></span><br><span class="line">d.<span class="built_in">assign</span>(n,elem);</span><br><span class="line"><span class="comment">//重载=</span></span><br><span class="line"><span class="comment">//将deq与本身元素交换</span></span><br><span class="line">d.<span class="built_in">swap</span>(deq);</span><br></pre></td></tr></table></figure><h2 id="大小操作"><a href="#大小操作" class="headerlink" title="大小操作"></a>大小操作</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//返回容器中元素的个数</span></span><br><span class="line">deque.<span class="built_in">size</span>();</span><br><span class="line"><span class="comment">//判断容器是否为空</span></span><br><span class="line">deque.<span class="built_in">empty</span>();</span><br><span class="line"><span class="comment">//重新指定容器的长度为num，若容器变长，则以默认值填充新位置。如果容器变短，则末尾超出容器长度的元素被删除</span></span><br><span class="line">deque.<span class="built_in">resize</span>(<span class="type">int</span> num);</span><br><span class="line"><span class="comment">//重新指定容器的长度为num，若容器变长，则以elem值填充新位置。如果容器变短，则末尾超出容器长度的元素被删除</span></span><br><span class="line">deque.<span class="built_in">resize</span>(<span class="type">int</span> num,elem);</span><br></pre></td></tr></table></figure><h2 id="双端插入和删除"><a href="#双端插入和删除" class="headerlink" title="双端插入和删除"></a>双端插入和删除</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//在容器尾部添加一个数据</span></span><br><span class="line"><span class="built_in">push_back</span>(elem);</span><br><span class="line"><span class="comment">//在容器头部插入一个数据</span></span><br><span class="line"><span class="built_in">push_front</span>(elem);</span><br><span class="line"><span class="comment">//删除容器最后一个数据</span></span><br><span class="line"><span class="built_in">pop_back</span>();</span><br><span class="line"><span class="comment">//删除容器第一个数据</span></span><br><span class="line"><span class="built_in">pop_front</span>();</span><br></pre></td></tr></table></figure><h2 id="数据存取"><a href="#数据存取" class="headerlink" title="数据存取"></a>数据存取</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//返回索引idx所指的数据，如果idx越界，抛出out_of_range异常</span></span><br><span class="line">d.<span class="built_in">at</span>(<span class="type">int</span> idx);</span><br><span class="line"><span class="comment">//返回索引idx所指的数据，越界时，运行直接报错</span></span><br><span class="line"><span class="keyword">operator</span>[] </span><br><span class="line"><span class="comment">//返回容器中第一个数据元素</span></span><br><span class="line">d.<span class="built_in">front</span>();</span><br><span class="line"><span class="comment">//返回容器中最后一个数据元素</span></span><br><span class="line">d.<span class="built_in">back</span>();</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> STL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> STL </tag>
            
            <tag> deque </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>STL Vector容器</title>
      <link href="/_posts/STL/1Vector.md/"/>
      <url>/_posts/STL/1Vector.md/</url>
      
        <content type="html"><![CDATA[<h1 id="Vector容器"><a href="#Vector容器" class="headerlink" title="Vector容器"></a>Vector容器</h1><p> 动态数组&#x2F;可变数组</p><p> 单口（端）数组</p><p> 支持随机访问</p><p> 迭代器：</p><table><thead><tr><th align="center">v.begin()</th><th align="center">v.end()</th><th align="center">v.rbegin()</th><th align="center">v.rend()</th></tr></thead><tbody><tr><td align="center">第一个元素</td><td align="center">最后一个元素+1</td><td align="center">最后一个元素</td><td align="center">第一个元素-1</td></tr></tbody></table><h2 id="构造"><a href="#构造" class="headerlink" title="构造"></a>构造</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">vector&lt;T&gt; v</span><br><span class="line"><span class="comment">//将v[begin(),end())区间的元素拷贝给本身</span></span><br><span class="line"><span class="built_in">vector</span>(v.<span class="built_in">begin</span>(),v.<span class="built_in">end</span>());</span><br><span class="line"><span class="comment">//构造函数将n个elem拷贝给本身</span></span><br><span class="line"><span class="built_in">vector</span>(n,elem);</span><br></pre></td></tr></table></figure><h2 id="迭代器"><a href="#迭代器" class="headerlink" title="迭代器"></a>迭代器</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vector&lt;<span class="type">int</span>&gt;::iterator it = v.<span class="built_in">begin</span>(); </span><br></pre></td></tr></table></figure><h2 id="赋值"><a href="#赋值" class="headerlink" title="赋值"></a>赋值</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//将[begin,end)区间的数据拷贝赋值给本身</span></span><br><span class="line">v.<span class="built_in">assign</span>(begin,end);</span><br><span class="line"><span class="comment">//将n个elem拷贝赋值给本身</span></span><br><span class="line">v.<span class="built_in">assign</span>(n,elem);</span><br><span class="line"><span class="comment">//重载=</span></span><br><span class="line"><span class="comment">//将vec与本身元素交换</span></span><br><span class="line">v.<span class="built_in">swap</span>(vec);</span><br></pre></td></tr></table></figure><h2 id="大小操作"><a href="#大小操作" class="headerlink" title="大小操作"></a>大小操作</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//返回容器中元素的个数</span></span><br><span class="line">v.<span class="built_in">size</span>();</span><br><span class="line"><span class="comment">//判断容器是否为空</span></span><br><span class="line">v.<span class="built_in">empty</span>();</span><br><span class="line"><span class="comment">//重新指定容器的长度为num，若容器变长，则以默认值填充新位置。如果容器变短，则末尾超出容器长度的元素被删除</span></span><br><span class="line">v.<span class="built_in">resize</span>(<span class="type">int</span> num);</span><br><span class="line"><span class="comment">//重新指定容器的长度为num，若容器变长，则以elem值填充新位置。如果容器变短，则末尾超出容器长度的元素被删除</span></span><br><span class="line">v.<span class="built_in">resize</span>(<span class="type">int</span> num,elem);</span><br><span class="line"><span class="comment">//容器的容量</span></span><br><span class="line">v.<span class="built_in">capacity</span>();</span><br><span class="line"><span class="comment">//容器预留len个元素长度，预留位置不初始化，元素不可访问</span></span><br><span class="line">v.<span class="built_in">reserve</span>(<span class="type">int</span> len);</span><br></pre></td></tr></table></figure><h2 id="数据存取"><a href="#数据存取" class="headerlink" title="数据存取"></a>数据存取</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//返回索引idx所指的数据，如果idx越界，抛出out_of_range异常</span></span><br><span class="line">v.<span class="built_in">at</span>(<span class="type">int</span> idx);</span><br><span class="line"><span class="comment">//返回索引idx所指的数据，越界时，运行直接报错</span></span><br><span class="line"><span class="keyword">operator</span>[] </span><br><span class="line"><span class="comment">//返回容器中第一个数据元素</span></span><br><span class="line">v.<span class="built_in">front</span>();</span><br><span class="line"><span class="comment">//返回容器中最后一个数据元素</span></span><br><span class="line">v.<span class="built_in">back</span>();</span><br></pre></td></tr></table></figure><h2 id="插入删除"><a href="#插入删除" class="headerlink" title="插入删除"></a>插入删除</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//迭代器指向位置pos插入count个元素elem</span></span><br><span class="line">v.<span class="built_in">insert</span>(const_iterator pos, <span class="type">int</span> count,elem);</span><br><span class="line"><span class="comment">//尾部插入元素elem</span></span><br><span class="line">v.<span class="built_in">push_back</span>(elem);</span><br><span class="line"><span class="comment">//删除最后一个元素</span></span><br><span class="line">v.<span class="built_in">pop_back</span>();</span><br><span class="line"><span class="comment">//删除迭代器从start到end之间的元素</span></span><br><span class="line">v.<span class="built_in">erase</span>(const_iterator start,const_iterator end);</span><br><span class="line"><span class="comment">//删除迭代器指向的元素</span></span><br><span class="line">v.<span class="built_in">erase</span>(const_iterator pos);</span><br><span class="line"><span class="comment">//删除容器中所有元素</span></span><br><span class="line">v.<span class="built_in">clear</span>();</span><br></pre></td></tr></table></figure><h2 id="收缩空间技巧"><a href="#收缩空间技巧" class="headerlink" title="收缩空间技巧"></a>收缩空间技巧</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//用v根据v实际大小初始化匿名对象，swap交换v和匿名对象指针，结束后匿名对象销毁</span></span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;(v).<span class="built_in">swap</span>(v);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> STL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> STL </tag>
            
            <tag> Vector </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>STL String容器</title>
      <link href="/_posts/STL/0String.md/"/>
      <url>/_posts/STL/0String.md/</url>
      
        <content type="html"><![CDATA[<h1 id="String容器"><a href="#String容器" class="headerlink" title="String容器"></a>String容器</h1><h2 id="查找第一次出现位置"><a href="#查找第一次出现位置" class="headerlink" title="查找第一次出现位置"></a>查找第一次出现位置</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">string.<span class="built_in">find</span>(<span class="string">&quot;&quot;</span>)</span><br><span class="line"><span class="comment">//返回int</span></span><br></pre></td></tr></table></figure><h2 id="查找最后一次出现位置"><a href="#查找最后一次出现位置" class="headerlink" title="查找最后一次出现位置"></a>查找最后一次出现位置</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">string.<span class="built_in">rfind</span>(<span class="string">&quot; &quot;</span>)</span><br><span class="line"><span class="comment">//返回int</span></span><br></pre></td></tr></table></figure><h2 id="替换"><a href="#替换" class="headerlink" title="替换"></a>替换</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">string.<span class="built_in">replace</span>(<span class="type">int</span> pos, <span class="type">int</span> n;<span class="type">const</span> string &amp;str)</span><br><span class="line"><span class="comment">//替换从pos开始n个字符为字符串str</span></span><br></pre></td></tr></table></figure><h2 id="比较"><a href="#比较" class="headerlink" title="比较"></a>比较</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">string.<span class="built_in">compare</span>(<span class="type">const</span> string &amp;str)</span><br><span class="line"><span class="comment">// &gt;返回1 &lt;返回-1 ==返回0</span></span><br></pre></td></tr></table></figure><h2 id="子串"><a href="#子串" class="headerlink" title="子串"></a>子串</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">string.<span class="built_in">substr</span>(<span class="type">int</span> pos,<span class="type">int</span> n)</span><br></pre></td></tr></table></figure><p> 返回由pos开始的n个字符组成的字符串</p><h2 id="插入"><a href="#插入" class="headerlink" title="插入"></a>插入</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">string.<span class="built_in">insert</span>(<span class="type">int</span> pos,<span class="type">const</span> string &amp;str)</span><br></pre></td></tr></table></figure><h2 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">string.<span class="built_in">erase</span>(<span class="type">int</span> pos,<span class="type">int</span> n)</span><br></pre></td></tr></table></figure><p> 删除从pos开始的n个字符</p>]]></content>
      
      
      <categories>
          
          <category> STL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> STL </tag>
            
            <tag> String </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git图形化操作</title>
      <link href="/_posts/Git/2GUI.md/"/>
      <url>/_posts/Git/2GUI.md/</url>
      
        <content type="html"><![CDATA[<h1 id="TortoiseGit"><a href="#TortoiseGit" class="headerlink" title="TortoiseGit"></a>TortoiseGit</h1><p>右键使用，图形化界面使用git</p><h1 id="JB中使用Git"><a href="#JB中使用Git" class="headerlink" title="JB中使用Git"></a>JB中使用Git</h1><h2 id="创建Git仓库"><a href="#创建Git仓库" class="headerlink" title="创建Git仓库"></a>创建Git仓库</h2><p>vcs–&gt;import into Version Control–&gt;Create Git Repository</p><h2 id="推送至远程仓库"><a href="#推送至远程仓库" class="headerlink" title="推送至远程仓库"></a>推送至远程仓库</h2><p>右键–&gt;Git–&gt;Repository–&gt;Push</p><h2 id="版本对比"><a href="#版本对比" class="headerlink" title="版本对比"></a>版本对比</h2><p>右键–&gt;Git–&gt;Compare with</p><h2 id="创建分支"><a href="#创建分支" class="headerlink" title="创建分支"></a>创建分支</h2><p>VCS–&gt;Git–&gt;Branches–&gt;New Branches</p><h2 id="切换分支"><a href="#切换分支" class="headerlink" title="切换分支"></a>切换分支</h2><p>VCS–&gt;Git–&gt;Branches–&gt;选择分支–&gt;Checkout</p>]]></content>
      
      
      <categories>
          
          <category> Git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git命令</title>
      <link href="/_posts/Git/1Command.md/"/>
      <url>/_posts/Git/1Command.md/</url>
      
        <content type="html"><![CDATA[<h1 id="命令"><a href="#命令" class="headerlink" title="命令"></a>命令</h1><h2 id="设置用户信息"><a href="#设置用户信息" class="headerlink" title="设置用户信息"></a>设置用户信息</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name “用户名”</span><br><span class="line">git config --global user.email <span class="string">&quot;email&quot;</span></span><br></pre></td></tr></table></figure><h2 id="查看配置信息"><a href="#查看配置信息" class="headerlink" title="查看配置信息"></a>查看配置信息</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --list</span><br><span class="line">git config user.name</span><br></pre></td></tr></table></figure><h2 id="在本地初始化git仓库"><a href="#在本地初始化git仓库" class="headerlink" title="在本地初始化git仓库"></a>在本地初始化git仓库</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git init</span><br></pre></td></tr></table></figure><h2 id="克隆远程仓库"><a href="#克隆远程仓库" class="headerlink" title="克隆远程仓库"></a>克隆远程仓库</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> &lt;url&gt;</span><br></pre></td></tr></table></figure><h2 id="查看文件状态-工作区的所有文件"><a href="#查看文件状态-工作区的所有文件" class="headerlink" title="查看文件状态 (工作区的所有文件)"></a>查看文件状态 (工作区的所有文件)</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git status</span><br><span class="line">git status -s  <span class="comment">#简洁输出</span></span><br></pre></td></tr></table></figure><h2 id="文件加入暂存区"><a href="#文件加入暂存区" class="headerlink" title="文件加入暂存区"></a>文件加入暂存区</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git add &lt;file name&gt;   <span class="comment">#改为已暂存</span></span><br><span class="line">git reset &lt;file name&gt; <span class="comment">#取消暂存</span></span><br></pre></td></tr></table></figure><h2 id="暂存区提交本地仓库"><a href="#暂存区提交本地仓库" class="headerlink" title="暂存区提交本地仓库"></a>暂存区提交本地仓库</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git commit -m <span class="string">&quot;日志信息&quot;</span>    <span class="comment">#提交所有暂存区文件</span></span><br><span class="line">git commit -a -m <span class="string">&quot;日志信息&quot;</span> <span class="comment">#先添加到暂存区，然后提交本地仓库（就不用执行add命令了）</span></span><br></pre></td></tr></table></figure><h2 id="删除工作区文件"><a href="#删除工作区文件" class="headerlink" title="删除工作区文件"></a>删除工作区文件</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">rm</span> &lt;file name&gt;  <span class="comment">#默认加入暂存区 从本地仓库删除要再commit</span></span><br></pre></td></tr></table></figure><h2 id="创建忽略列表文件"><a href="#创建忽略列表文件" class="headerlink" title="创建忽略列表文件"></a>创建忽略列表文件</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">touch</span> .gitignore</span><br></pre></td></tr></table></figure><h2 id="查看日志目录"><a href="#查看日志目录" class="headerlink" title="查看日志目录"></a>查看日志目录</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">log</span></span><br></pre></td></tr></table></figure><h2 id="添加远程仓库"><a href="#添加远程仓库" class="headerlink" title="添加远程仓库"></a>添加远程仓库</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote add &lt;shortname&gt; &lt;url&gt;</span><br></pre></td></tr></table></figure><h2 id="查看远程仓库"><a href="#查看远程仓库" class="headerlink" title="查看远程仓库"></a>查看远程仓库</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git remote -v                 <span class="comment">#-v显示详细信息</span></span><br><span class="line">git remote show [remote-name] <span class="comment">#超详细信息</span></span><br></pre></td></tr></table></figure><h2 id="移除本地远程仓库（只移除本地信息）"><a href="#移除本地远程仓库（只移除本地信息）" class="headerlink" title="移除本地远程仓库（只移除本地信息）"></a>移除本地远程仓库（只移除本地信息）</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote <span class="built_in">rm</span> [remote-name]</span><br></pre></td></tr></table></figure><h2 id="从远程仓库中抓取与拉取"><a href="#从远程仓库中抓取与拉取" class="headerlink" title="从远程仓库中抓取与拉取"></a>从远程仓库中抓取与拉取</h2><h3 id="抓取-不会自动合并数据-merge"><a href="#抓取-不会自动合并数据-merge" class="headerlink" title="抓取 不会自动合并数据(merge)"></a>抓取 不会自动合并数据(merge)</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git fetch ([remote-name] [branch-name])</span><br></pre></td></tr></table></figure><h4 id="合并到工作区"><a href="#合并到工作区" class="headerlink" title="合并到工作区"></a>合并到工作区</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git merge [remote-name]/[branch-name]</span><br></pre></td></tr></table></figure><h3 id="拉取-自动合并数据-merge"><a href="#拉取-自动合并数据-merge" class="headerlink" title="拉取 自动合并数据(merge)"></a>拉取 自动合并数据(merge)</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git pull ([remote-name] [branch-name])</span><br></pre></td></tr></table></figure><p>如果当前本地仓库不是从远程仓库克隆，而是本地创建的仓库，并且仓库中存在文件，此时再从远程仓库拉取文件的时候会报错，解决此问题可以在git pull命令后加入参数<code>-allow-unrelated-histories</code>， 此后会让输入日志 </p><h2 id="推送到远程仓库"><a href="#推送到远程仓库" class="headerlink" title="推送到远程仓库"></a>推送到远程仓库</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push [remote-name] [branch-name]</span><br></pre></td></tr></table></figure><h2 id="查看分支"><a href="#查看分支" class="headerlink" title="查看分支"></a>查看分支</h2><h3 id="查看本地所有分支"><a href="#查看本地所有分支" class="headerlink" title="查看本地所有分支"></a>查看本地所有分支</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git branch</span><br></pre></td></tr></table></figure><h3 id="查看所有远程分支"><a href="#查看所有远程分支" class="headerlink" title="查看所有远程分支"></a>查看所有远程分支</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git branch -r</span><br></pre></td></tr></table></figure><h3 id="查看所有本地和远程分支"><a href="#查看所有本地和远程分支" class="headerlink" title="查看所有本地和远程分支"></a>查看所有本地和远程分支</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git branch -a</span><br></pre></td></tr></table></figure><h2 id="创建本地分支"><a href="#创建本地分支" class="headerlink" title="创建本地分支"></a>创建本地分支</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git branch [branch-name]</span><br></pre></td></tr></table></figure><h2 id="切换本地分支"><a href="#切换本地分支" class="headerlink" title="切换本地分支"></a>切换本地分支</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout [branch-name]</span><br></pre></td></tr></table></figure><h2 id="分支本地合并"><a href="#分支本地合并" class="headerlink" title="分支本地合并"></a>分支本地合并</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git merge [branch-name] <span class="comment">#将[branch-name]合并到当前分支 冲突手动处理</span></span><br></pre></td></tr></table></figure><h2 id="删除本地分支"><a href="#删除本地分支" class="headerlink" title="删除本地分支"></a>删除本地分支</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git branch -d [branch-name]</span><br><span class="line">git branch -D [branch-name]  <span class="comment">#强制删除</span></span><br></pre></td></tr></table></figure><h2 id="删除远程分支"><a href="#删除远程分支" class="headerlink" title="删除远程分支"></a>删除远程分支</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push [remote-name] -d [branch-name]</span><br></pre></td></tr></table></figure><h2 id="创建本地标签"><a href="#创建本地标签" class="headerlink" title="创建本地标签"></a>创建本地标签</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git tag [tag-name]</span><br></pre></td></tr></table></figure><h2 id="列出已有本地标签"><a href="#列出已有本地标签" class="headerlink" title="列出已有本地标签"></a>列出已有本地标签</h2><h3 id="列出所有tag"><a href="#列出所有tag" class="headerlink" title="列出所有tag"></a>列出所有tag</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git tag</span><br></pre></td></tr></table></figure><h3 id="查看tag信息"><a href="#查看tag信息" class="headerlink" title="查看tag信息"></a>查看tag信息</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git show [tag]</span><br></pre></td></tr></table></figure><h2 id="标签推送至远程仓库"><a href="#标签推送至远程仓库" class="headerlink" title="标签推送至远程仓库"></a>标签推送至远程仓库</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push [remote-name] [tag-name]</span><br></pre></td></tr></table></figure><h2 id="检出本地标签"><a href="#检出本地标签" class="headerlink" title="检出本地标签"></a>检出本地标签</h2><p>创建一个分支指向某个tag</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout -b [branch-name] [tag-name]</span><br></pre></td></tr></table></figure><h2 id="删除标签"><a href="#删除标签" class="headerlink" title="删除标签"></a>删除标签</h2><h3 id="删除本地tag"><a href="#删除本地tag" class="headerlink" title="删除本地tag"></a>删除本地tag</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git tag -d [tag-name]</span><br></pre></td></tr></table></figure><h3 id="删除远程tag"><a href="#删除远程tag" class="headerlink" title="删除远程tag"></a>删除远程tag</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push [remote-name] :refs/tags/[tag-name]</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git概念</title>
      <link href="/_posts/Git/0Concept.md/"/>
      <url>/_posts/Git/0Concept.md/</url>
      
        <content type="html"><![CDATA[<h1 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h1><p><img src="/_posts/Git/0Concept.md/GitFrame.png"></p><h2 id="版本库"><a href="#版本库" class="headerlink" title="版本库"></a>版本库</h2><p> .git隐藏文件夹</p><h2 id="工作区"><a href="#工作区" class="headerlink" title="工作区"></a>工作区</h2><p> 包含.git文件夹的目录，存放开发的代码</p><h2 id="暂存区"><a href="#暂存区" class="headerlink" title="暂存区"></a>暂存区</h2><p> .git中的index文件，临时保存修改文件</p><h2 id="git工作目录下文件状态"><a href="#git工作目录下文件状态" class="headerlink" title="git工作目录下文件状态"></a>git工作目录下文件状态</h2><h3 id="untracked-未跟踪-未纳入版本控制"><a href="#untracked-未跟踪-未纳入版本控制" class="headerlink" title="untracked 未跟踪 未纳入版本控制"></a>untracked 未跟踪 未纳入版本控制</h3><h3 id="tracted-以跟踪-已纳入版本控制"><a href="#tracted-以跟踪-已纳入版本控制" class="headerlink" title="tracted 以跟踪 已纳入版本控制"></a>tracted 以跟踪 已纳入版本控制</h3><ul><li><p>Unmodified 未修改状态</p></li><li><p>Modified 已修改状态</p></li><li><p>Staged 已暂存状态</p><h2 id="忽略列表"><a href="#忽略列表" class="headerlink" title="忽略列表"></a>忽略列表</h2><p>不想被git管理的文件列表</p><p>工作目录中创建.gitignore文件（文件名固定）列出要忽略文件</p><p>列表具体写法CSDN查找</p><h2 id="分支"><a href="#分支" class="headerlink" title="分支"></a>分支</h2><p>主分支 master</p><h2 id="标签"><a href="#标签" class="headerlink" title="标签"></a>标签</h2><p>给历史中某一提交打上标签，以示重要，如标记某个版本号</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> Git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
