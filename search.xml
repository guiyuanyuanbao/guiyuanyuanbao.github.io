<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>常用的复杂标签</title>
      <link href="/_posts/HTML5/3%E5%B8%B8%E7%94%A8%E7%9A%84%E5%A4%8D%E6%9D%82%E6%A0%87%E7%AD%BE.md/"/>
      <url>/_posts/HTML5/3%E5%B8%B8%E7%94%A8%E7%9A%84%E5%A4%8D%E6%9D%82%E6%A0%87%E7%AD%BE.md/</url>
      
        <content type="html"><![CDATA[<h1 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h1><blockquote><p>用于显示、展示数据，它可以让数据显示的非常的规整，可读性非常好。</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span>单元格内的文字<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><code>&lt;table&gt; &lt;/table&gt;</code> 是用于定义表格的标签。</li><li><code>&lt;tr&gt; &lt;/tr&gt;</code> 标签用于定义表格中的行，必须嵌套在 <code>&lt;table&gt; &lt;/table&gt;</code> 标签中。</li><li><code>&lt;td&gt; &lt;/td&gt;</code> 用于定义表格中的单元格，必须嵌套在 <code>&lt;tr&gt;&lt;/tr&gt;</code> 标签中，其中字母 td 指表格数据（table data)，即数据单元格的内容。</li></ul><h2 id="表头单元格标签"><a href="#表头单元格标签" class="headerlink" title="表头单元格标签"></a>表头单元格标签</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">th</span>&gt;</span>表头<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>一般表头单元格位于表格的第一行或第一列，表头单元格里面的文本内容加粗居中显示， <code>&lt;th&gt; </code> 标签表示 HTML 表格的表头部分 (table head 的缩写)。</li></ul><h2 id="表格属性"><a href="#表格属性" class="headerlink" title="表格属性"></a>表格属性</h2><table><thead><tr><th>属性名</th><th>属性值</th><th>描述</th></tr></thead><tbody><tr><td>align</td><td>left、center、right</td><td>规定表格相对周围元素的对齐方式</td></tr><tr><td>border</td><td>1 或 “”</td><td>规定表格单元是否拥有边框，默认为 “”，表示没有边框</td></tr><tr><td>cellpadding</td><td>像素值</td><td>规定单元边沿与其内容之间的空白，默认 1 像素。</td></tr><tr><td>cellspacing</td><td>像素值</td><td>规定单元格之间的空白，默认 2 像素。</td></tr><tr><td>width</td><td>像素值或百分比</td><td>规定表格的宽度</td></tr></tbody></table><h2 id="表格结构标签"><a href="#表格结构标签" class="headerlink" title="表格结构标签"></a>表格结构标签</h2><blockquote><p>因为表格可能很长, 为了更好的表示表格的语义，可以将表格分割成表格头部和表格主体两大部分。</p></blockquote><p>在表格标签中，分别用：<code>&lt;thead&gt;</code> 标签表格的头部区域、<code>&lt;tbody&gt;</code> 标签表格的主体区域. 这样可以更好的分清表格结构。</p><ul><li><code>&lt;thead&gt;&lt;/thead&gt;</code>：用于定义表格的头部。<code>&lt;thead&gt;</code> 内部必须拥有 <code>&lt;tr&gt;</code> 标签。一般是位于第一行。</li><li><code>&lt;tbody&gt;&lt;/tbody&gt;</code>：用于定义表格的主体，主要用于放数据本体。</li><li>以上标签都是放在 <code>&lt;table&gt;&lt;/table&gt;</code> 标签中。</li></ul><h2 id="合并单元格"><a href="#合并单元格" class="headerlink" title="合并单元格"></a>合并单元格</h2><p><strong>跨行合并：</strong></p><p>rowspan&#x3D;”合并单元格的个数” ，最上侧单元格为目标单元格, 写合并代码。</p><p><strong>跨列合并：</strong></p><p>colspan&#x3D;”合并单元格的个数”，最左侧单元格为目标单元格, 写合并代码。</p><h1 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h1><blockquote><p>列表可以分为三大类：无序列表、有序列表和自定义列表。</p></blockquote><h2 id="无序列表"><a href="#无序列表" class="headerlink" title="无序列表"></a>无序列表</h2><blockquote><p><code>&lt;ul&gt;</code> 标签表示 HTML 页面中项目的无序列表，一般会以项目符号呈现列表项，而列表项使用 <code> &lt;li&gt;</code> 标签定义</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>列表项1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>列表项2<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>无序列表的各个列表项之间没有顺序级别之分，是并列的。</li><li><code>&lt;ul&gt;&lt;/ul&gt;</code> 中只能嵌套 <code>&lt;li&gt;&lt;/li&gt;</code> ，直接在 <code>&lt;ul&gt;&lt;/ul&gt; </code> 标签中输入其他标签或者文字的做法是不被允许的。</li><li><code>&lt;li&gt;&lt;/li&gt;</code> 相当于一个容器，可以容纳所有元素。</li></ul><h2 id="有序列表"><a href="#有序列表" class="headerlink" title="有序列表"></a>有序列表</h2><blockquote><p>各个列表项会按照一定的顺序排列定义。在 HTML 标签中，<code>&lt;ol&gt;</code> 标签用于定义有序列表，列表排序以数字来显示，并且使用 <code>&lt;li&gt;</code> 标签来定义列表项。</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ol</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>列表项1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>列表项2<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><code>&lt;ol&gt;&lt;/ol&gt;</code> 中只能嵌套 <code>&lt;li&gt;&lt;/li&gt;</code>，直接在 <code>&lt;ol&gt;&lt;/ol&gt;</code> 标签中输入其他标签或者文字的做法是不被允许的。</li><li><code>&lt;li&gt;&lt;/li&gt;</code> 相当于一个容器，可以容纳所有元素。</li></ul><h2 id="自定义列表"><a href="#自定义列表" class="headerlink" title="自定义列表"></a>自定义列表</h2><blockquote><p> 自定义列表常用于对术语或名词进行解释和描述，定义列表的列表项前没有任何项目符号。在 HTML 标签中，<code>&lt;dl&gt;</code> 标签用于定义描述列表（或定义列表），该标签会与 <code>&lt;dt&gt;</code>（定义项目&#x2F;名字）和 <code>&lt;dd&gt;</code>（描述每一个项目&#x2F;名字）一起使用。</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dl</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dt</span>&gt;</span>名词<span class="tag">&lt;/<span class="name">dt</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dd</span>&gt;</span>解释1<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dd</span>&gt;</span>解释2<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dl</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><code>&lt;dl&gt;&lt;/dl&gt;</code> 中只能嵌套 <code>&lt;dt&gt;&lt;/dt&gt;</code> 和 <code>&lt;dd&gt;&lt;/dd&gt;</code>，直接在 <code>&lt;dl&gt;&lt;/dl&gt;</code> 标签中输入其他标签或者文字的做法是不被允许的。</li><li><code>&lt;dt&gt;&lt;/dt&gt;</code> 和 <code>&lt;dd&gt;&lt;/dd&gt;</code> 相当于一个容器，可以容纳所有元素。</li></ul><h1 id="表单"><a href="#表单" class="headerlink" title="表单"></a>表单</h1><blockquote><p>使用表单目的是为了收集用户信息。在 HTML 中，一个完整的表单通常由表单域、表单控件（也称为表单元素）和提示信息 3 个部分构成。</p></blockquote><h2 id="表单域"><a href="#表单域" class="headerlink" title="表单域"></a>表单域</h2><blockquote><p>表单域是一个包含表单元素的区域。在 HTML 标签中，<code>&lt;form&gt;</code> 标签用于定义表单域。<code>&lt;form&gt;</code> 会把它范围内的表单元素信息提交给服务器。</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">“url地址”</span> <span class="attr">method</span>=<span class="string">“提交方式”</span> <span class="attr">name</span>=<span class="string">“表单域名称</span>&quot;&gt;</span>各种表单元素控件<span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><table><thead><tr><th>属性</th><th>属性值</th><th>作用</th></tr></thead><tbody><tr><td>action</td><td>url 地址</td><td>指定接收并处理表单数据的服务器程序的 url 地址。</td></tr><tr><td>method</td><td>get&#x2F;post</td><td>设置表单数据的提交方式。</td></tr><tr><td>name</td><td>名称</td><td>指定表单的名称，以区分同一个页面中的多个表单域。</td></tr></tbody></table><h2 id="表单控件（表单元素）"><a href="#表单控件（表单元素）" class="headerlink" title="表单控件（表单元素）"></a>表单控件（表单元素）</h2><h3 id="lt-input-gt-表单元素"><a href="#lt-input-gt-表单元素" class="headerlink" title="&lt;input&gt; 表单元素"></a><code>&lt;input&gt;</code> 表单元素</h3><blockquote><p>表单元素中 <code>&lt;input&gt;</code> 标签用于收集用户信息。在 <code>&lt;input&gt;</code> 标签中，包含一个 type 属性，根据不同的 type 属性值，输入字段拥有很多种形式（可以是文本字段、复选框、按钮等）。</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;属性值&quot;</span>  /&gt;</span></span><br></pre></td></tr></table></figure><p><code>&lt;input /&gt;</code> 标签为单标签 type 属性设置不同的属性值用来指定不同的控件类型。</p><table><thead><tr><th>属性值</th><th>描述</th></tr></thead><tbody><tr><td>button</td><td>可点击按钮</td></tr><tr><td>checkbox</td><td>复选框</td></tr><tr><td>file</td><td>输入字段和“浏览”按钮，供文件上传</td></tr><tr><td>hidden</td><td>隐藏的输入字段</td></tr><tr><td>image</td><td>图像形式的提交按钮</td></tr><tr><td>password</td><td>密码字段，该字段中的字符被掩码</td></tr><tr><td>radio</td><td>单选按钮</td></tr><tr><td>reset</td><td>重置按钮，清除表单中的所有数据</td></tr><tr><td>submit</td><td>提交按钮，把表单数据发送到服务器</td></tr><tr><td>text</td><td>单行的输入字段，用户可在其中输入文本，默认宽段 20 字符</td></tr></tbody></table><p><strong><code>&lt;input&gt;</code> 标签其他常用属性：</strong></p><table><thead><tr><th>属性</th><th>属性值</th><th>描述</th></tr></thead><tbody><tr><td>name</td><td>用户自定义</td><td>定义 input 元素的名称</td></tr><tr><td>value</td><td>用户自定义</td><td>规定 input 元素的值</td></tr><tr><td>checked</td><td>checked</td><td>规定此 input 元素首次加载时应当被选中</td></tr><tr><td>maxlength</td><td>正整数</td><td>规定输入字段中的字符的最大长度</td></tr></tbody></table><h3 id="lt-label-gt-标签"><a href="#lt-label-gt-标签" class="headerlink" title="&lt;label&gt; 标签"></a><code>&lt;label&gt;</code> 标签</h3><blockquote><p><code>&lt;label&gt;</code> 标签为 input 元素定义标注（标签）。</p></blockquote><p><code>&lt;label&gt;</code> 标签用于绑定一个表单元素, 当点击 <code>&lt;label&gt;</code> 标签内的文本时，浏览器就会自动将焦点 (光标) 转到或者选择对应的表单元素上, 用来增加用户体验。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;sex&quot;</span>&gt;</span>性别<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;sex&quot;</span>  <span class="attr">id</span>=<span class="string">&quot;sex&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure><ul><li><code>&lt;label&gt; </code> 标签的 for 属性应当与相关元素的 id 属性相同。</li></ul><h3 id="lt-select-gt-表单元素"><a href="#lt-select-gt-表单元素" class="headerlink" title="&lt;select&gt;表单元素"></a><code>&lt;select&gt;</code>表单元素</h3><blockquote><p><code>&lt;select&gt;</code> 标签控件定义下拉列表。</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">option</span>&gt;</span>选项1<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">option</span>&gt;</span>选项2<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">option</span>&gt;</span>选项3<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="lt-textarea-gt-表单元素"><a href="#lt-textarea-gt-表单元素" class="headerlink" title="&lt;textarea&gt; 表单元素"></a><code>&lt;textarea&gt;</code> 表单元素</h3><blockquote><p>表单元素中，<code>&lt;textarea&gt;</code> 标签是用于定义多行文本输入的控件。</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">textarea</span> <span class="attr">rows</span>=<span class="string">&quot;3&quot;</span> <span class="attr">cols</span>=<span class="string">&quot;20&quot;</span>&gt;</span>   文本内容 <span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>cols&#x3D;“每行中的字符数”</li><li>rows&#x3D;“显示的行数”</li></ul>]]></content>
      
      
      <categories>
          
          <category> HTML </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HTML </tag>
            
            <tag> table </tag>
            
            <tag> form </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>常用的标签</title>
      <link href="/_posts/HTML5/2%E5%B8%B8%E7%94%A8%E7%9A%84%E7%AE%80%E5%8D%95%E6%A0%87%E7%AD%BE.md/"/>
      <url>/_posts/HTML5/2%E5%B8%B8%E7%94%A8%E7%9A%84%E7%AE%80%E5%8D%95%E6%A0%87%E7%AD%BE.md/</url>
      
        <content type="html"><![CDATA[<h1 id="标题标签"><a href="#标题标签" class="headerlink" title="标题标签"></a>标题标签</h1><blockquote><p>HTML 提供了 6 个等级的网页标题 : h1-h6。</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span> 我是一级标题 <span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span> 我是二级标题 <span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h3</span>&gt;</span> 我是三级标题 <span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h4</span>&gt;</span> 我是四级标题 <span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h5</span>&gt;</span> 我是五级标题 <span class="tag">&lt;/<span class="name">h5</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h6</span>&gt;</span> 我是六级标题 <span class="tag">&lt;/<span class="name">h6</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>加了标题的文字会变的加粗加大。</li><li>一个标题独占一行。</li></ul><h1 id="段落标签"><a href="#段落标签" class="headerlink" title="段落标签"></a>段落标签</h1><blockquote><p><code>&lt;p&gt;&lt;/p&gt;</code> 标签用于定义段落，它可以将整个网页分为若干个段落。 </p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span> 我是一个段落标签 <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>文本在一个段落中会根据浏览器窗口的大小自动换行。</li><li>段落和段落之间保有空隙。</li></ul><h1 id="换行标签"><a href="#换行标签" class="headerlink" title="换行标签"></a>换行标签</h1><blockquote><p>希望某段文本强制换行显示，就需要使用换行标签 <code>&lt;br /&gt;</code>。 </p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br></pre></td></tr></table></figure><ul><li><code>&lt;br /&gt;</code> 是个单标签。</li><li><code>&lt;br /&gt; </code> 标签只是简单地开始新的一行，跟段落不一样，段落之间会插入一些垂直的间距。</li></ul><h1 id="文本格式化标签"><a href="#文本格式化标签" class="headerlink" title="文本格式化标签"></a>文本格式化标签</h1><blockquote><p>文本格式化标签，使文字以特殊的方式显示 </p></blockquote><table><thead><tr><th>语义</th><th>标签</th></tr></thead><tbody><tr><td>加粗</td><td><code>&lt;strong&gt;&lt;/strong&gt;</code> 或 <code>&lt;b&gt;&lt;/b&gt;</code></td></tr><tr><td>倾斜</td><td><code>&lt;em&gt;&lt;/em&gt;</code> 或 <code>&lt;i&gt;&lt;/i&gt;</code></td></tr><tr><td>删除线</td><td><code>&lt;del&gt;&lt;/del&gt;</code> 或 <code>&lt;s&gt;&lt;/s&gt;</code></td></tr><tr><td>下划线</td><td><code>&lt;ins&gt;&lt;/ins&gt;</code> 或 <code>&lt;u&gt;&lt;/u&gt;</code></td></tr></tbody></table><h1 id="Div-和-span-标签"><a href="#Div-和-span-标签" class="headerlink" title="Div 和 span 标签"></a>Div 和 span 标签</h1><blockquote><p><code>&lt;div&gt;</code> 和 <code>&lt;span&gt; </code> 是没有语义的，它们就是一个盒子，用来装内容的。</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span> 这是div <span class="tag">&lt;/<span class="name">div</span>&gt;</span>    </span><br><span class="line"><span class="tag">&lt;<span class="name">span</span>&gt;</span> 这是span <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><code>&lt;div&gt;</code> 标签用来布局，但是现在一行只能放一个 <code>&lt;div&gt;</code>。大盒子</li><li><code>&lt;span&gt;</code> 标签用来布局，一行上可以多个 <code>&lt;span&gt;</code>。小盒子</li></ul><h1 id="图片标签"><a href="#图片标签" class="headerlink" title="图片标签"></a>图片标签</h1><blockquote><p> 在 HTML 标签中，<code>&lt;img&gt;</code> 标签用于定义 HTML 页面中的图像。</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;图像URL&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure><table><thead><tr><th>属性</th><th>属性值</th><th>说明</th></tr></thead><tbody><tr><td>src</td><td>图片路径</td><td>必须属性</td></tr><tr><td>alt</td><td>文本</td><td>替换文本，图像不能显示时显示的文字</td></tr><tr><td>title</td><td>文本</td><td>提示文本，鼠标放到图像上，显示的文字</td></tr><tr><td>width</td><td>像素</td><td>设置图像的宽度</td></tr><tr><td>height</td><td>像素</td><td>设置图像的高度</td></tr><tr><td>border</td><td>像素</td><td>设置图像的边框粗细</td></tr></tbody></table><ul><li>图像标签可以拥有多个属性，必须写在标签名的后面。</li><li>属性之间不分先后顺序，标签名与属性、属性与属性之间均以空格分开。</li><li>属性采取键值对的格式，即 key&#x3D;“value” 的格式，属性 &#x3D;“属性值”。</li></ul><h1 id="链接标签"><a href="#链接标签" class="headerlink" title="链接标签"></a>链接标签</h1><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;跳转目标&quot;</span> <span class="attr">target</span>=<span class="string">&quot;目标窗口的弹出方式&quot;</span>&gt;</span> 文本或图像 <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><p>href：用于指定链接目标的 url 地址</p></li><li><p>target: 用于指定链接页面的打开方式_self 默认值 _blank 新窗口打开</p></li><li><p>“#”：空链接</p></li><li><p>下载链接: 如果 href 里面地址是一个文件或者压缩包，会下载这个文件。</p></li><li><p>锚点链接:  点我们点击链接, 可以快速定位到页面中的某个位置。 </p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--在链接文本的 href 属性中，设置属性值为#名字的形式，如--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#two&quot;</span>&gt;</span> 第2集 <span class="tag">&lt;/<span class="name">a</span>&gt;</span> </span><br><span class="line"><span class="comment">&lt;!--找到目标位置标签，里面添加一个id属性 = 刚才的名字如：--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h3</span> <span class="attr">id</span>=<span class="string">&quot;two&quot;</span>&gt;</span>第2集介绍<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h1 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h1><blockquote><p>在 HTML 文档中添加一些便于阅读和理解但又不需要显示在页面中的注释文字，就需要使用注释标签。</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 注释语句 --&gt;</span></span><br></pre></td></tr></table></figure><h1 id="特殊字符"><a href="#特殊字符" class="headerlink" title="特殊字符"></a>特殊字符</h1><blockquote><p>在 HTML 页面中，一些特殊的符号很难或者不方便直接使用，此时我们就可以使用下面的字符来替代。</p></blockquote><table><thead><tr><th>特殊字符</th><th>描述</th><th>字符的代码</th></tr></thead><tbody><tr><td></td><td>空格符</td><td><code>&amp;nbsp;</code></td></tr><tr><td>&lt;</td><td>小于号</td><td><code>&amp;lt;</code></td></tr><tr><td>&gt;</td><td>大于号</td><td><code>&amp;gt;</code></td></tr><tr><td>&amp;</td><td>和号</td><td><code>&amp;amp;</code></td></tr><tr><td>￥</td><td>人民币</td><td><code>&amp;yen;</code></td></tr><tr><td>&amp;copy;</td><td>版权</td><td><code>&amp;copy;</code></td></tr><tr><td>&amp;reg;</td><td>注册商标</td><td><code>&amp;reg;</code></td></tr><tr><td>&amp;deg;</td><td>摄氏度</td><td><code>&amp;deg;</code></td></tr><tr><td>&amp;plusmn;</td><td>正负号</td><td><code>&amp;plusmn;</code></td></tr><tr><td>&amp;times;</td><td>乘号</td><td><code>&amp;times;</code></td></tr><tr><td>&amp;divide;</td><td>除号</td><td><code>&amp;divide;</code></td></tr><tr><td>&amp;sup2;</td><td>平方</td><td><code>&amp;sup2;</code></td></tr><tr><td>&amp;sup3;</td><td>立方</td><td><code>&amp;sup3;</code></td></tr></tbody></table><p><strong>重点记住：空格、大于号、小于号</strong>，其余的使用很少，如果需要回头查阅即可。</p>]]></content>
      
      
      <categories>
          
          <category> HTML </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HTML </tag>
            
            <tag> 标签 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HTML标签导读</title>
      <link href="/_posts/HTML5/1HTML%E6%A0%87%E7%AD%BE%E5%AF%BC%E8%AF%BB.md/"/>
      <url>/_posts/HTML5/1HTML%E6%A0%87%E7%AD%BE%E5%AF%BC%E8%AF%BB.md/</url>
      
        <content type="html"><![CDATA[<h1 id="HTML-语法规则"><a href="#HTML-语法规则" class="headerlink" title="HTML 语法规则"></a>HTML 语法规则</h1><blockquote><p>HTML 标签是由尖括号包围的关键词</p></blockquote><table><thead><tr><th>类别</th><th>示例</th></tr></thead><tbody><tr><td>双标签</td><td><code>&lt;html&gt;&lt;/html&gt;</code></td></tr><tr><td>单标签</td><td><code>&lt;br /&gt;</code></td></tr></tbody></table><p>双标签的标签对中的第一个标签是开始标签，第二个标签是结束标签。</p><h2 id="标签的关系"><a href="#标签的关系" class="headerlink" title="标签的关系"></a>标签的关系</h2><p>双标签关系可以分为两类：包含（父子）关系和并列关系</p><table><thead><tr><th>关系</th><th>示例</th></tr></thead><tbody><tr><td>包含（父子）</td><td><code>&lt;head&gt;&lt;title&gt;&lt;/title&gt;&lt;/head&gt;</code></td></tr><tr><td>并列</td><td><code>&lt;div&gt;&lt;/div&gt;&lt;div&gt;&lt;/div&gt;</code></td></tr></tbody></table><h2 id="基本结构标签"><a href="#基本结构标签" class="headerlink" title="基本结构标签"></a>基本结构标签</h2><p>每个网页都会有一个基本的结构标签（也称为骨架标签），页面内容也是在这些基本标签上书写</p><table><thead><tr><th>标签名</th><th>定义</th><th>说明</th></tr></thead><tbody><tr><td><code>&lt;html&gt;&lt;/html&gt;</code></td><td>HTML 标签</td><td>页面中最大的标签，根标签</td></tr><tr><td><code>&lt;head&gt;&lt;/head&gt;</code></td><td>文档的头部</td><td>head 标签中必须设置 title 标签</td></tr><tr><td><code>&lt;title&gt;&lt;/title&gt;</code></td><td>文档的标题</td><td>页面的网页标题</td></tr><tr><td><code>&lt;body&gt;&lt;/body&gt;</code></td><td>文档的主体</td><td>页面内容基本都存放在这里</td></tr></tbody></table><h2 id="DOCTYPE"><a href="#DOCTYPE" class="headerlink" title="DOCTYPE"></a>DOCTYPE</h2><p><code>&lt;!DOCTYPE html&gt;</code>  文档类型声明标签, 告诉浏览器这个页面采取 html5 版本来显示页面。 </p><h2 id="lang-语言种类"><a href="#lang-语言种类" class="headerlink" title="lang 语言种类"></a>lang 语言种类</h2><blockquote><p>定义当前文档显示的语言。 </p></blockquote><p>en 定义语言为英语</p><p>zh-CN 定义语言为中文</p><p>其实对于文档显示来说，定义成 en 的文档也可以显示中文，定义成 zh-CN 的文档也可以显示英文，这个属性对浏览器和搜索引擎是有作用的</p><h2 id="字符集"><a href="#字符集" class="headerlink" title="字符集"></a>字符集</h2><blockquote><p>字符集 (Character set) 是多个字符的集合。以便计算机能够识别和存储各种文字。 </p></blockquote><p>在 <code>&lt;head&gt;&lt;/head&gt;</code> 标签内，可以通过 <code>&lt;meta&gt;</code> 标签的 charset 属性来规定 HTML 文档应该使用哪种字符编码。例： <code>&lt;meta charset=&quot; UTF-8&quot; /&gt;</code></p><p>charset 常用的值有：GB2312 、BIG5 、GBK 和 UTF-8，其中 UTF-8 也被称为万国码，基本包含了全世界所有国家需要用到的字符。</p><p><strong>注意：上面语法是必须要写的代码，否则可能引起乱码的情况。一般情况下，统一使用“UTF-8”编码。</strong></p><h2 id="语义化标签"><a href="#语义化标签" class="headerlink" title="语义化标签"></a>语义化标签</h2><blockquote><p>根据标签的语义，在合适的地方给一个最为合理的标签，可以让页面结构更清晰。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> HTML </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HTML </tag>
            
            <tag> 标签 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>初识HTML</title>
      <link href="/_posts/HTML5/0%E5%88%9D%E8%AF%86HTML.md/"/>
      <url>/_posts/HTML5/0%E5%88%9D%E8%AF%86HTML.md/</url>
      
        <content type="html"><![CDATA[<h1 id="网页的概念"><a href="#网页的概念" class="headerlink" title="网页的概念"></a>网页的概念</h1><ol><li>网站是指在因特网上根据一定的规则，使用 HTML 等制作的用于展示特定内容相关的网页集合。 </li><li>网页是网站中的一“页”，通常是 HTML 格式的文件，它要通过浏览器来阅读。</li></ol><h2 id="网页的组成"><a href="#网页的组成" class="headerlink" title="网页的组成"></a>网页的组成</h2><p>网页是构成网站的基本元素，它通常由图片、链接、文字、声音、视频等元素组成。通常我们看到的网页，常见以 .htm 或 .html 后缀结尾的文件，因此将其俗称为 HTML 文件。</p><h2 id="HTML-概念"><a href="#HTML-概念" class="headerlink" title="HTML 概念"></a>HTML 概念</h2><ol><li>HTML 指的是超文本标记语言 (Hyper Text Markup Language) ，它是用来描述网页的一种语言。</li><li>HTML 不是一种编程语言，而是一种标记语言 (markup language)。标记语言是一套标记标签 (markup tag)。</li></ol><h1 id="浏览器"><a href="#浏览器" class="headerlink" title="浏览器"></a>浏览器</h1><blockquote><p>浏览器是网页显示、运行的平台。</p></blockquote><p><strong>常用浏览器及其内核：</strong></p><table><thead><tr><th>浏览器</th><th>内核</th></tr></thead><tbody><tr><td>IE</td><td>Trident</td></tr><tr><td>firefox</td><td>Gecko</td></tr><tr><td>Safari</td><td>Webkit</td></tr><tr><td>chrome&#x2F;Opera</td><td>Blink</td></tr></tbody></table><h1 id="Web-标准"><a href="#Web-标准" class="headerlink" title="Web 标准"></a>Web 标准</h1><blockquote><p>Web 标准是由 W3C 组织和其他标准化组织制定的一系列标准的集合。W3C（万维网联盟）是国际最著名的标准化组织。</p></blockquote><h2 id="Web-标准的构成"><a href="#Web-标准的构成" class="headerlink" title="Web 标准的构成"></a>Web 标准的构成</h2><p>主要包括《结构 Structure》、《表现（Presentation）》和《行为（Behavior）》三个方面。</p><table><thead><tr><th>标准</th><th>说明</th></tr></thead><tbody><tr><td>结构</td><td>用于对<strong>网页元素</strong>进行整理和分类</td></tr><tr><td>表现</td><td>用于设置网页元素的<strong>外观样式</strong></td></tr><tr><td>行为</td><td>网页模型的定义及<strong>交互</strong>的编写</td></tr></tbody></table><p>Web 标准提出的最佳体验方案：<strong>结构、样式、行为相分离</strong>。  </p><p>简单理解：<strong>结构写到 HTML 文件中，表现写到 CSS 文件中，行为写到 JavaScript 文件中</strong></p>]]></content>
      
      
      <categories>
          
          <category> HTML </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HTML </tag>
            
            <tag> 概念 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>STL 内置常用算法</title>
      <link href="/_posts/STL/10algorithm.md/"/>
      <url>/_posts/STL/10algorithm.md/</url>
      
        <content type="html"><![CDATA[<h1 id="STL常用算法"><a href="#STL常用算法" class="headerlink" title="STL常用算法"></a>STL常用算法</h1><p> 头文件</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//&lt;algorithm&gt;最大，涉及比较、交换、查找、遍历操作、复制、修改等</span></span><br><span class="line"><span class="comment">//&lt;numeric&gt;很小，只包括几个在序列上面进行简单数学运算的模板函数</span></span><br><span class="line"><span class="comment">//&lt;functional&gt;定义了一些模板类，用以声明函数对象</span></span><br></pre></td></tr></table></figure><h2 id="遍历算法"><a href="#遍历算法" class="headerlink" title="遍历算法"></a>遍历算法</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//遍历容器</span></span><br><span class="line">for_each(iterator begin,iterator end,_func);<span class="comment">//普通函数func,仿函数func();</span></span><br><span class="line"><span class="comment">//搬运容器到另一个容器中</span></span><br><span class="line"><span class="built_in">transform</span>(iterator begin1,iterator end1,iterator begin2,_func);<span class="comment">//目标容器需要提前开辟空间</span></span><br></pre></td></tr></table></figure><h2 id="查找算法"><a href="#查找算法" class="headerlink" title="查找算法"></a>查找算法</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//按值查找元素，找到返回指定位置迭代器，找不到返回结束迭代器位置</span></span><br><span class="line"><span class="built_in">find</span>(iterator begin,iterator end,value);<span class="comment">//自定义数据需重载==</span></span><br><span class="line"><span class="comment">//按值查找元素，找到返回指定位置迭代器，找不到返回结束迭代器位置</span></span><br><span class="line"><span class="built_in">find_if</span>(iterator begin,iterator end,Pred);<span class="comment">//_Pred函数或者谓词（返回bool类型的仿函数）</span></span><br><span class="line"><span class="comment">//查找相邻重复元素，返回相邻元素的第一个位置的迭代器</span></span><br><span class="line"><span class="function">adjacent <span class="title">find</span><span class="params">(iterator begin,iterator end)</span></span>;</span><br><span class="line"><span class="comment">//查找指定的元素，查到返回true否则false</span></span><br><span class="line"><span class="function"><span class="type">bool</span> binary <span class="title">search</span><span class="params">(iterator begin,iterator end,value)</span></span>;<span class="comment">//注意：在无序序列中不可用</span></span><br><span class="line"><span class="comment">//统计元素出现次数</span></span><br><span class="line"><span class="built_in">count</span>(iterator begin,iterator end,value);</span><br><span class="line"><span class="comment">//按条件统计元素出现次数</span></span><br><span class="line"><span class="built_in">count_if</span>(iterator begin,iterator end,_Pred);</span><br></pre></td></tr></table></figure><h2 id="排序算法"><a href="#排序算法" class="headerlink" title="排序算法"></a>排序算法</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//对容器内元素进行排序</span></span><br><span class="line"><span class="built_in">sort</span>(iterator begin,iterator end,_Pred);</span><br><span class="line"><span class="comment">//洗牌，指定范围内的元素随机调整次序</span></span><br><span class="line"><span class="built_in">random_shuffle</span>(iterator begin,iterator end);</span><br><span class="line"><span class="comment">//容器元素合并，并存储到另一容器中</span></span><br><span class="line"><span class="built_in">merge</span>(iterator begin1,iterator end1,iterator begin2,iterator end2,iterator dest);<span class="comment">//注意：两个容器必须是有序的</span></span><br><span class="line"><span class="comment">//反转指定范围[begin,end)的元素</span></span><br><span class="line"><span class="built_in">reverse</span>(iterator begin,iterator end);</span><br></pre></td></tr></table></figure><h2 id="拷贝替换算法"><a href="#拷贝替换算法" class="headerlink" title="拷贝替换算法"></a>拷贝替换算法</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//容器内指定范围的元素拷贝到另一容器中</span></span><br><span class="line"><span class="built_in">copy</span>(iterator begin,iterator end,iterator dest);</span><br><span class="line"><span class="comment">//将区间内旧元素替换成新元素</span></span><br><span class="line"><span class="built_in">replace</span>(iterator begin,iterator end,oldvalue,newvalue);</span><br><span class="line"><span class="comment">//按条件替换元素，满足条件的替换成指定元素</span></span><br><span class="line"><span class="built_in">replace_if</span>(iterator begin,iterator end,_pred,newvalue);</span><br><span class="line"><span class="comment">//互换两个同种类型的容器的元素</span></span><br><span class="line"><span class="built_in">swap</span>(container c1,container c2);</span><br></pre></td></tr></table></figure><h2 id="算数生成算法"><a href="#算数生成算法" class="headerlink" title="算数生成算法"></a>算数生成算法</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;numeric&gt;</span></span></span><br><span class="line"><span class="comment">//计算容器元素累计总和</span></span><br><span class="line"><span class="built_in">accumulate</span>(iterator begin,iterator end,value);<span class="comment">//value起始累加值</span></span><br><span class="line"><span class="comment">//向容器中填充元素</span></span><br><span class="line"><span class="built_in">fill</span>(iterator begin,iterator end,value);<span class="comment">//value填充的值</span></span><br></pre></td></tr></table></figure><h2 id="集合算法"><a href="#集合算法" class="headerlink" title="集合算法"></a>集合算法</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//求两个集合的交集，返回值是交集中最后一个元素位置</span></span><br><span class="line"><span class="built_in">set_intersection</span>(iterator begin1,iterator end1,iterator begin2,iterator end2,iterator dest);<span class="comment">//注意：两个集合必须是有序序列，目标容器开辟空间需要从两个容器取较小值</span></span><br><span class="line"><span class="comment">//求两个集合的并集，返回值是并集中最后一个元素位置</span></span><br><span class="line"><span class="built_in">set_union</span>(iterator begin1,iterator end1,iterator begin2,iterator end2,iterator dest);<span class="comment">//注意：两个集合必须是有序序列，目标容器开辟空间需要两个容器相加</span></span><br><span class="line"><span class="comment">//求两个集合1与2的差集，返回值是差集中最后一个元素位置</span></span><br><span class="line"><span class="built_in">set_difference</span>(iterator begin1,iterator end1,iterator begin2,iterator end2,iterator dest);<span class="comment">//注意：两个集合必须是有序序列，目标容器开辟空间需要从两个容器取较大值</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> STL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> STL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>STL 函数对象</title>
      <link href="/_posts/STL/9FunctionObject.md/"/>
      <url>/_posts/STL/9FunctionObject.md/</url>
      
        <content type="html"><![CDATA[<h1 id="函数对象"><a href="#函数对象" class="headerlink" title="函数对象"></a>函数对象</h1><p> 重载函数调用操作符的类，其对象称为函数对象</p><p> 函数对象使用重载的（）时，行为类似函数调用，也叫仿函数</p><p> 本质是一个类</p><h2 id="谓词"><a href="#谓词" class="headerlink" title="谓词"></a>谓词</h2><p> 返回bool类型的仿函数称为谓词</p><p> 如果operator()接受一个参数，那么叫做一元谓词</p><p> 如果operator()接受两个参数，那么叫做二元谓词</p><h2 id="内建函数对象"><a href="#内建函数对象" class="headerlink" title="内建函数对象"></a>内建函数对象</h2><p> 引入头文件</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;functional&gt;</span></span></span><br></pre></td></tr></table></figure><p> 算数仿函数&#x2F;关系仿函数&#x2F;逻辑仿函数</p><h2 id="算数仿函数"><a href="#算数仿函数" class="headerlink" title="算数仿函数"></a>算数仿函数</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//加法仿函数</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">class</span> <span class="title class_">T</span>&gt;T plus&lt;T&gt;</span><br><span class="line"><span class="comment">//减法仿函数</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">class</span> <span class="title class_">T</span>&gt;T minus&lt;T&gt;</span><br><span class="line"><span class="comment">//乘法仿函数</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">class</span> <span class="title class_">T</span>&gt;T multiplies&lt;T&gt;</span><br><span class="line"><span class="comment">//除法仿函数</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">class</span> <span class="title class_">T</span>&gt;T divides&lt;T&gt;</span><br><span class="line"><span class="comment">//取模仿函数</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">class</span> <span class="title class_">T</span>&gt;T modulus&lt;T&gt;</span><br><span class="line"><span class="comment">//取反仿函数</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">class</span> <span class="title class_">T</span>&gt;T negate&lt;T&gt;</span><br></pre></td></tr></table></figure><h2 id="范例"><a href="#范例" class="headerlink" title="范例"></a>范例</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">negate&lt;<span class="type">int</span>&gt; n;</span><br><span class="line"><span class="built_in">n</span>(<span class="number">1</span>);</span><br><span class="line">plus&lt;<span class="type">int</span>&gt; p;</span><br><span class="line"><span class="built_in">p</span>(<span class="number">1</span>,<span class="number">2</span>);</span><br></pre></td></tr></table></figure><h2 id="关系仿函数"><a href="#关系仿函数" class="headerlink" title="关系仿函数"></a>关系仿函数</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//等于</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">class</span> <span class="title class_">T</span>&gt;<span class="type">bool</span> equal_to&lt;T&gt;</span><br><span class="line"><span class="comment">//不等于</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">class</span> <span class="title class_">T</span>&gt;<span class="type">bool</span> <span class="keyword">not</span> equal to&lt;T&gt;</span><br><span class="line"><span class="comment">//大于</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">class</span> <span class="title class_">T</span>&gt;<span class="type">bool</span> greater&lt;T&gt;</span><br><span class="line"><span class="comment">//大于等于</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">class</span> <span class="title class_">T</span>&gt;<span class="type">bool</span> greater_equal&lt;T&gt;</span><br><span class="line"><span class="comment">//小于</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">class</span> <span class="title class_">T</span>&gt;<span class="type">bool</span> less&lt;T&gt;</span><br><span class="line"><span class="comment">//小于等于</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">class</span> <span class="title class_">T</span>&gt;<span class="type">bool</span> less_equal&lt;T&gt;</span><br></pre></td></tr></table></figure><h2 id="逻辑仿函数"><a href="#逻辑仿函数" class="headerlink" title="逻辑仿函数"></a>逻辑仿函数</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//逻辑与</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">class</span> <span class="title class_">T</span>&gt;<span class="type">bool</span> logical_and&lt;T&gt;</span><br><span class="line"><span class="comment">//逻辑或</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">class</span> <span class="title class_">T</span>&gt;<span class="type">bool</span> logical_or&lt;T&gt;</span><br><span class="line"><span class="comment">//逻辑非</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">class</span> <span class="title class_">T</span>&gt;<span class="type">bool</span> logical_not&lt;T&gt;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> STL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> STL </tag>
            
            <tag> 函数对象 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>STL map容器</title>
      <link href="/_posts/STL/8map.md/"/>
      <url>/_posts/STL/8map.md/</url>
      
        <content type="html"><![CDATA[<h1 id="map-x2F-multimap容器"><a href="#map-x2F-multimap容器" class="headerlink" title="map&#x2F;multimap容器"></a>map&#x2F;multimap容器</h1><p> 所有的元素都是pair</p><p> pair中第一个元素为key（键值），起到索引作用，第二个元素为value(实值)</p><p> 所有元素根据键值自动排序</p><p> 关联式容器&#x2F;底层为二叉树</p><table><thead><tr><th align="center">map</th><th align="center">multimap</th></tr></thead><tbody><tr><td align="center">不允许有重复的key值元素</td><td align="center">允许有重复的key值元素</td></tr></tbody></table><h2 id="构造"><a href="#构造" class="headerlink" title="构造"></a>构造</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">map&lt;T1,T2&gt; m;</span><br></pre></td></tr></table></figure><h2 id="赋值"><a href="#赋值" class="headerlink" title="赋值"></a>赋值</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//重载 = 操作符</span></span><br></pre></td></tr></table></figure><h2 id="大小和交换"><a href="#大小和交换" class="headerlink" title="大小和交换"></a>大小和交换</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//返回容器中元素的数目</span></span><br><span class="line">m.<span class="built_in">size</span>();</span><br><span class="line"><span class="comment">//判断容器是否为空</span></span><br><span class="line">m.<span class="built_in">empty</span>();</span><br><span class="line"><span class="comment">//交换两个集合容器</span></span><br><span class="line">m.<span class="built_in">swap</span>(mp);</span><br></pre></td></tr></table></figure><h2 id="插入和删除"><a href="#插入和删除" class="headerlink" title="插入和删除"></a>插入和删除</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//在容器中插入元素</span></span><br><span class="line">m.<span class="built_in">insert</span>(elem);</span><br><span class="line"><span class="comment">//清除所有元素</span></span><br><span class="line">m.<span class="built_in">clear</span>();</span><br><span class="line"><span class="comment">//删除pos迭代器所指向的元素，返回下一个元素的迭代器</span></span><br><span class="line">m.<span class="built_in">erase</span>(pos);</span><br><span class="line"><span class="comment">//删除区间[begin,end)的所有元素，返回下一个元素的迭代器</span></span><br><span class="line">m.<span class="built_in">erase</span>(begin,end);</span><br><span class="line"><span class="comment">//删除容器中键值为key的元素</span></span><br><span class="line">m.<span class="built_in">erase</span>(key);</span><br></pre></td></tr></table></figure><h2 id="插入的几种写法"><a href="#插入的几种写法" class="headerlink" title="插入的几种写法"></a>插入的几种写法</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">m.<span class="built_in">insert</span>(<span class="built_in">pair</span>&lt;<span class="type">int</span>,<span class="type">int</span>&gt;(key,value));</span><br><span class="line">m.<span class="built_in">insert</span>(<span class="built_in">make_pair</span>(key,value));</span><br><span class="line">m.<span class="built_in">insert</span>(map&lt;<span class="type">int</span>,<span class="type">int</span>&gt;::<span class="built_in">value_type</span>(key,value));</span><br><span class="line"><span class="comment">//不推荐</span></span><br><span class="line">m[key] = value;</span><br></pre></td></tr></table></figure><h2 id="查找和统计"><a href="#查找和统计" class="headerlink" title="查找和统计"></a>查找和统计</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//查找key是否存在，返回该键的元素的迭代器；若不存在，返回set.end();</span></span><br><span class="line">m.<span class="built_in">find</span>(key);</span><br><span class="line"><span class="comment">//统计key的元素个数</span></span><br><span class="line">m.<span class="built_in">count</span>(key);</span><br></pre></td></tr></table></figure><h2 id="修改排序规则"><a href="#修改排序规则" class="headerlink" title="修改排序规则"></a>修改排序规则</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//仿函数</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyCompare</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">operator</span><span class="params">()</span><span class="params">(<span class="type">int</span> v1,<span class="type">int</span> v2)</span></span>&#123;</span><br><span class="line">        <span class="comment">//降序</span></span><br><span class="line">        <span class="keyword">return</span> v1 &gt; v2;</span><br><span class="line">    &#125;  </span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//map按照仿函数定义的规则排序</span></span><br><span class="line"><span class="comment">//自定义数据类型必须指定排序规则</span></span><br><span class="line">map&lt;<span class="type">int</span>,<span class="type">int</span>,MyCompare&gt; m;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> STL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> STL </tag>
            
            <tag> map </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>STL pair容器</title>
      <link href="/_posts/STL/7pair.md/"/>
      <url>/_posts/STL/7pair.md/</url>
      
        <content type="html"><![CDATA[<h1 id="pair对组"><a href="#pair对组" class="headerlink" title="pair对组"></a>pair对组</h1><h2 id="创建"><a href="#创建" class="headerlink" title="创建"></a>创建</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">pair&lt;type,type&gt; <span class="title">p</span> <span class="params">(value1,value2)</span></span>;</span><br><span class="line">pair&lt;type,type&gt; p = <span class="built_in">make_pair</span>(value1,value2);</span><br></pre></td></tr></table></figure><h2 id="访问"><a href="#访问" class="headerlink" title="访问"></a>访问</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">p.first</span><br><span class="line">p.second </span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> STL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> STL </tag>
            
            <tag> pair </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>STL set容器</title>
      <link href="/_posts/STL/6set.md/"/>
      <url>/_posts/STL/6set.md/</url>
      
        <content type="html"><![CDATA[<h1 id="set-x2F-multiset容器"><a href="#set-x2F-multiset容器" class="headerlink" title="set&#x2F;multiset容器"></a>set&#x2F;multiset容器</h1><p>所有元素都会在插入时自动被排序</p><p>关联式容器&#x2F;底层为二叉树</p><table><thead><tr><th align="center">set</th><th align="center">multiset</th></tr></thead><tbody><tr><td align="center">不允许容器中有重复的元素</td><td align="center">允许容器中有重复的元素</td></tr></tbody></table><h2 id="构造"><a href="#构造" class="headerlink" title="构造"></a>构造</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">set&lt;T&gt; s</span><br></pre></td></tr></table></figure><h2 id="赋值"><a href="#赋值" class="headerlink" title="赋值"></a>赋值</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//重载 = 操作符</span></span><br></pre></td></tr></table></figure><h2 id="大小和交换"><a href="#大小和交换" class="headerlink" title="大小和交换"></a>大小和交换</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//返回容器中元素的数目</span></span><br><span class="line">s.<span class="built_in">size</span>();</span><br><span class="line"><span class="comment">//判断容器是否为空</span></span><br><span class="line">s.<span class="built_in">empty</span>();</span><br><span class="line"><span class="comment">//交换两个集合容器</span></span><br><span class="line">s.<span class="built_in">swap</span>(st); </span><br></pre></td></tr></table></figure><h2 id="插入和删除"><a href="#插入和删除" class="headerlink" title="插入和删除"></a>插入和删除</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//在容器中插入元素</span></span><br><span class="line">s.<span class="built_in">insert</span>(elem);</span><br><span class="line"><span class="comment">//清除所有元素</span></span><br><span class="line">s.<span class="built_in">clear</span>();</span><br><span class="line"><span class="comment">//删除pos迭代器所指向的元素，返回下一个元素的迭代器</span></span><br><span class="line">s.<span class="built_in">erase</span>(pos);</span><br><span class="line"><span class="comment">//删除区间[begin,end)的所有元素，返回下一个元素的迭代器</span></span><br><span class="line">s.<span class="built_in">erase</span>(begin,end);</span><br><span class="line"><span class="comment">//删除容器中值为elem的元素</span></span><br><span class="line">s.<span class="built_in">erase</span>(elem);</span><br></pre></td></tr></table></figure><h2 id="查找和统计"><a href="#查找和统计" class="headerlink" title="查找和统计"></a>查找和统计</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//查找key是否存在，若存在，返回该键的元素的迭代器；若不存在，返回set.end();</span></span><br><span class="line">s.<span class="built_in">find</span>(key);</span><br><span class="line"><span class="comment">//统计key的元素个数</span></span><br><span class="line">s.<span class="built_in">count</span>(key);</span><br></pre></td></tr></table></figure><h2 id="修改排序规则"><a href="#修改排序规则" class="headerlink" title="修改排序规则"></a>修改排序规则</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//仿函数</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyCompare</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">operator</span><span class="params">()</span><span class="params">(<span class="type">int</span> v1,<span class="type">int</span> v2)</span></span>&#123;</span><br><span class="line">        <span class="comment">//降序</span></span><br><span class="line">        <span class="keyword">return</span> v1 &gt; v2;</span><br><span class="line">    &#125;  </span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//set按照仿函数定义的规则排序</span></span><br><span class="line"><span class="comment">//自定义数据类型必须指定排序规则</span></span><br><span class="line">set&lt;<span class="type">int</span>,MyCompare&gt; s;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> STL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> STL </tag>
            
            <tag> set </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>STL list容器</title>
      <link href="/_posts/STL/5list.md/"/>
      <url>/_posts/STL/5list.md/</url>
      
        <content type="html"><![CDATA[<h1 id="list容器"><a href="#list容器" class="headerlink" title="list容器"></a>list容器</h1><p> 双向链表</p><h2 id="构造"><a href="#构造" class="headerlink" title="构造"></a>构造</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">list&lt;T&gt; l;</span><br><span class="line"><span class="comment">//将l[begin(),end())区间的元素拷贝给本身</span></span><br><span class="line"><span class="built_in">list</span>(l.<span class="built_in">begin</span>(),l.<span class="built_in">end</span>());</span><br><span class="line"><span class="comment">//构造函数将n个elem拷贝给本身</span></span><br><span class="line"><span class="built_in">list</span>(n,elem);</span><br></pre></td></tr></table></figure><h2 id="数据元素插入和删除操作"><a href="#数据元素插入和删除操作" class="headerlink" title="数据元素插入和删除操作"></a>数据元素插入和删除操作</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//在容器尾部加入一个元素</span></span><br><span class="line">l.<span class="built_in">push_back</span>(elem);</span><br><span class="line"><span class="comment">//删除容器中最后一个元素</span></span><br><span class="line">l.<span class="built_in">pop_back</span>();</span><br><span class="line"><span class="comment">//在容器开头插入一个元素</span></span><br><span class="line">l.<span class="built_in">push_front</span>(elem);</span><br><span class="line"><span class="comment">//从容器开头移除第一个元素</span></span><br><span class="line">l.<span class="built_in">pop_front</span>();</span><br><span class="line"><span class="comment">//在pos位置插入elem元素的拷贝，返回数据的位置</span></span><br><span class="line">l.<span class="built_in">insert</span>(pos,elem);</span><br><span class="line"><span class="comment">//在pos位置插入n个elem数据数据,无返回值</span></span><br><span class="line">l.<span class="built_in">insert</span>(pos,n,elem);</span><br><span class="line"><span class="comment">//在pos 位置插入[begin,end)区间的数据，无返回值</span></span><br><span class="line">l.<span class="built_in">insert</span>(pos,begin,end);</span><br><span class="line"><span class="comment">//移除容器中的所有数据</span></span><br><span class="line">l.<span class="built_in">clear</span>();</span><br><span class="line"><span class="comment">//删除[begin,end)区间的数据，返回下一个数据的位置</span></span><br><span class="line">l.<span class="built_in">erase</span>(begin,end);</span><br><span class="line"><span class="comment">//删除pos位置的数据，返回下一个数据的位置</span></span><br><span class="line">l.<span class="built_in">erase</span>(pos);</span><br><span class="line"><span class="comment">//删除容器中所有与elem值匹配的元素</span></span><br><span class="line">l.<span class="built_in">remove</span>(elem);</span><br></pre></td></tr></table></figure><h2 id="大小操作"><a href="#大小操作" class="headerlink" title="大小操作"></a>大小操作</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//返回容器中元素的个数</span></span><br><span class="line">l.<span class="built_in">size</span>();</span><br><span class="line"><span class="comment">//判断容器是否为空</span></span><br><span class="line">l.<span class="built_in">empty</span>();</span><br><span class="line"><span class="comment">//重新指定容器的长度为num，若容器变长，则以默认值填充新位置，如果容器变短，则末尾超出容器长度的元素被删除</span></span><br><span class="line">l.<span class="built_in">resize</span>(num);</span><br><span class="line"><span class="comment">//重新指定容器长度为num，若容器变长，则以elem值填充新位置，如果容器变短，则末尾超出容器长度的元素被删除</span></span><br><span class="line">l.<span class="built_in">resize</span>(num,elem);  </span><br></pre></td></tr></table></figure><h2 id="赋值"><a href="#赋值" class="headerlink" title="赋值"></a>赋值</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//将[begin,end)区间中的数据拷贝赋值给本身</span></span><br><span class="line">l.<span class="built_in">assign</span>(begin,end);</span><br><span class="line"><span class="comment">//将n个elem拷贝赋值给本身</span></span><br><span class="line">l.<span class="built_in">assign</span>(n,elem);</span><br><span class="line"><span class="comment">//重载=操作符</span></span><br><span class="line"><span class="comment">//将list与本身元素互换</span></span><br><span class="line">l.<span class="built_in">swap</span>(lst);</span><br></pre></td></tr></table></figure><h2 id="存取"><a href="#存取" class="headerlink" title="存取"></a>存取</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//返回第一个元素</span></span><br><span class="line">l.<span class="built_in">front</span>();</span><br><span class="line"><span class="comment">//返回最后一个元素</span></span><br><span class="line">l.<span class="built_in">back</span>();</span><br></pre></td></tr></table></figure><h2 id="反转与排序"><a href="#反转与排序" class="headerlink" title="反转与排序"></a>反转与排序</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//反转链表</span></span><br><span class="line">l.<span class="built_in">reverse</span>();</span><br><span class="line"><span class="comment">//排序</span></span><br><span class="line">l.<span class="built_in">sort</span>();</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> STL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> STL </tag>
            
            <tag> list </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>STL queue容器</title>
      <link href="/_posts/STL/4queue.md/"/>
      <url>/_posts/STL/4queue.md/</url>
      
        <content type="html"><![CDATA[<h1 id="queue容器"><a href="#queue容器" class="headerlink" title="queue容器"></a>queue容器</h1><p> 队列容器&#x2F;先进先出</p><p> 不提供迭代器&#x2F;不能遍历&#x2F;不支持随机访问</p><h2 id="构造"><a href="#构造" class="headerlink" title="构造"></a>构造</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">queue&lt;T&gt; q;</span><br></pre></td></tr></table></figure><h2 id="存取、插入和删除"><a href="#存取、插入和删除" class="headerlink" title="存取、插入和删除"></a>存取、插入和删除</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//往队尾添加元素</span></span><br><span class="line">q.<span class="built_in">push</span>(elem);</span><br><span class="line"><span class="comment">//从队头移除第一个元素</span></span><br><span class="line">q.<span class="built_in">pop</span>();</span><br><span class="line"><span class="comment">//返回最后一个元素</span></span><br><span class="line">q.<span class="built_in">back</span>();</span><br><span class="line"><span class="comment">//返回第一个元素</span></span><br><span class="line">q.<span class="built_in">front</span>();</span><br></pre></td></tr></table></figure><h2 id="赋值操作"><a href="#赋值操作" class="headerlink" title="赋值操作"></a>赋值操作</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//重载=操作符</span></span><br></pre></td></tr></table></figure><h2 id="大小操作"><a href="#大小操作" class="headerlink" title="大小操作"></a>大小操作</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//判断队列是否为空</span></span><br><span class="line">q.<span class="built_in">empty</span>();</span><br><span class="line"><span class="comment">//返回队列大小</span></span><br><span class="line">q.<span class="built_in">size</span>();</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> STL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> STL </tag>
            
            <tag> queue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>STL Stack容器</title>
      <link href="/_posts/STL/3Stack.md/"/>
      <url>/_posts/STL/3Stack.md/</url>
      
        <content type="html"><![CDATA[<h1 id="Stack容器"><a href="#Stack容器" class="headerlink" title="Stack容器"></a>Stack容器</h1><p> 先进后出</p><p> 不能遍历，不支持随机存取，只能通过top从栈顶获取和删除元素</p><h2 id="构造"><a href="#构造" class="headerlink" title="构造"></a>构造</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">stack&lt;T&gt; s;</span><br></pre></td></tr></table></figure><h2 id="赋值"><a href="#赋值" class="headerlink" title="赋值"></a>赋值</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//重载等号操作符</span></span><br></pre></td></tr></table></figure><h2 id="数据存取"><a href="#数据存取" class="headerlink" title="数据存取"></a>数据存取</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//向栈顶添加元素</span></span><br><span class="line"><span class="built_in">push</span>(elem);</span><br><span class="line"><span class="comment">//从栈顶移除第一个元素</span></span><br><span class="line"><span class="built_in">pop</span>();</span><br><span class="line"><span class="comment">//返回栈顶元素</span></span><br><span class="line"><span class="built_in">top</span>();</span><br></pre></td></tr></table></figure><h2 id="大小操作"><a href="#大小操作" class="headerlink" title="大小操作"></a>大小操作</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//判断栈是否为空</span></span><br><span class="line">s.<span class="built_in">empty</span>();</span><br><span class="line"><span class="comment">//返回堆栈的大小</span></span><br><span class="line">s.<span class="built_in">size</span>();</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> STL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> STL </tag>
            
            <tag> Stack </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>STL deque容器</title>
      <link href="/_posts/STL/2deque.md/"/>
      <url>/_posts/STL/2deque.md/</url>
      
        <content type="html"><![CDATA[<h1 id="deque容器"><a href="#deque容器" class="headerlink" title="deque容器"></a>deque容器</h1><p> 双口（端）数组</p><p> 自行内存回收</p><h2 id="构造"><a href="#构造" class="headerlink" title="构造"></a>构造</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">deque&lt;T&gt; d</span><br><span class="line"><span class="comment">//将d[begin(),end())区间的元素拷贝给本身</span></span><br><span class="line"><span class="built_in">deque</span>(d.<span class="built_in">begin</span>(),d.<span class="built_in">end</span>());</span><br><span class="line"><span class="comment">//构造函数将n个elem拷贝给本身</span></span><br><span class="line"><span class="built_in">deque</span>(n,elem);</span><br></pre></td></tr></table></figure><h2 id="迭代器"><a href="#迭代器" class="headerlink" title="迭代器"></a>迭代器</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">deque&lt;<span class="type">int</span>&gt;::iterator it = d.<span class="built_in">begin</span>(); </span><br></pre></td></tr></table></figure><h2 id="赋值"><a href="#赋值" class="headerlink" title="赋值"></a>赋值</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//将[begin,end)区间的数据拷贝赋值给本身</span></span><br><span class="line">d.<span class="built_in">assign</span>(begin,end);</span><br><span class="line"><span class="comment">//将n个elem拷贝赋值给本身</span></span><br><span class="line">d.<span class="built_in">assign</span>(n,elem);</span><br><span class="line"><span class="comment">//重载=</span></span><br><span class="line"><span class="comment">//将deq与本身元素交换</span></span><br><span class="line">d.<span class="built_in">swap</span>(deq);</span><br></pre></td></tr></table></figure><h2 id="大小操作"><a href="#大小操作" class="headerlink" title="大小操作"></a>大小操作</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//返回容器中元素的个数</span></span><br><span class="line">deque.<span class="built_in">size</span>();</span><br><span class="line"><span class="comment">//判断容器是否为空</span></span><br><span class="line">deque.<span class="built_in">empty</span>();</span><br><span class="line"><span class="comment">//重新指定容器的长度为num，若容器变长，则以默认值填充新位置。如果容器变短，则末尾超出容器长度的元素被删除</span></span><br><span class="line">deque.<span class="built_in">resize</span>(<span class="type">int</span> num);</span><br><span class="line"><span class="comment">//重新指定容器的长度为num，若容器变长，则以elem值填充新位置。如果容器变短，则末尾超出容器长度的元素被删除</span></span><br><span class="line">deque.<span class="built_in">resize</span>(<span class="type">int</span> num,elem);</span><br></pre></td></tr></table></figure><h2 id="双端插入和删除"><a href="#双端插入和删除" class="headerlink" title="双端插入和删除"></a>双端插入和删除</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//在容器尾部添加一个数据</span></span><br><span class="line"><span class="built_in">push_back</span>(elem);</span><br><span class="line"><span class="comment">//在容器头部插入一个数据</span></span><br><span class="line"><span class="built_in">push_front</span>(elem);</span><br><span class="line"><span class="comment">//删除容器最后一个数据</span></span><br><span class="line"><span class="built_in">pop_back</span>();</span><br><span class="line"><span class="comment">//删除容器第一个数据</span></span><br><span class="line"><span class="built_in">pop_front</span>();</span><br></pre></td></tr></table></figure><h2 id="数据存取"><a href="#数据存取" class="headerlink" title="数据存取"></a>数据存取</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//返回索引idx所指的数据，如果idx越界，抛出out_of_range异常</span></span><br><span class="line">d.<span class="built_in">at</span>(<span class="type">int</span> idx);</span><br><span class="line"><span class="comment">//返回索引idx所指的数据，越界时，运行直接报错</span></span><br><span class="line"><span class="keyword">operator</span>[] </span><br><span class="line"><span class="comment">//返回容器中第一个数据元素</span></span><br><span class="line">d.<span class="built_in">front</span>();</span><br><span class="line"><span class="comment">//返回容器中最后一个数据元素</span></span><br><span class="line">d.<span class="built_in">back</span>();</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> STL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> STL </tag>
            
            <tag> deque </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>STL Vector容器</title>
      <link href="/_posts/STL/1Vector.md/"/>
      <url>/_posts/STL/1Vector.md/</url>
      
        <content type="html"><![CDATA[<h1 id="Vector容器"><a href="#Vector容器" class="headerlink" title="Vector容器"></a>Vector容器</h1><p> 动态数组&#x2F;可变数组</p><p> 单口（端）数组</p><p> 支持随机访问</p><p> 迭代器：</p><table><thead><tr><th align="center">v.begin()</th><th align="center">v.end()</th><th align="center">v.rbegin()</th><th align="center">v.rend()</th></tr></thead><tbody><tr><td align="center">第一个元素</td><td align="center">最后一个元素+1</td><td align="center">最后一个元素</td><td align="center">第一个元素-1</td></tr></tbody></table><h2 id="构造"><a href="#构造" class="headerlink" title="构造"></a>构造</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">vector&lt;T&gt; v</span><br><span class="line"><span class="comment">//将v[begin(),end())区间的元素拷贝给本身</span></span><br><span class="line"><span class="built_in">vector</span>(v.<span class="built_in">begin</span>(),v.<span class="built_in">end</span>());</span><br><span class="line"><span class="comment">//构造函数将n个elem拷贝给本身</span></span><br><span class="line"><span class="built_in">vector</span>(n,elem);</span><br></pre></td></tr></table></figure><h2 id="迭代器"><a href="#迭代器" class="headerlink" title="迭代器"></a>迭代器</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vector&lt;<span class="type">int</span>&gt;::iterator it = v.<span class="built_in">begin</span>(); </span><br></pre></td></tr></table></figure><h2 id="赋值"><a href="#赋值" class="headerlink" title="赋值"></a>赋值</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//将[begin,end)区间的数据拷贝赋值给本身</span></span><br><span class="line">v.<span class="built_in">assign</span>(begin,end);</span><br><span class="line"><span class="comment">//将n个elem拷贝赋值给本身</span></span><br><span class="line">v.<span class="built_in">assign</span>(n,elem);</span><br><span class="line"><span class="comment">//重载=</span></span><br><span class="line"><span class="comment">//将vec与本身元素交换</span></span><br><span class="line">v.<span class="built_in">swap</span>(vec);</span><br></pre></td></tr></table></figure><h2 id="大小操作"><a href="#大小操作" class="headerlink" title="大小操作"></a>大小操作</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//返回容器中元素的个数</span></span><br><span class="line">v.<span class="built_in">size</span>();</span><br><span class="line"><span class="comment">//判断容器是否为空</span></span><br><span class="line">v.<span class="built_in">empty</span>();</span><br><span class="line"><span class="comment">//重新指定容器的长度为num，若容器变长，则以默认值填充新位置。如果容器变短，则末尾超出容器长度的元素被删除</span></span><br><span class="line">v.<span class="built_in">resize</span>(<span class="type">int</span> num);</span><br><span class="line"><span class="comment">//重新指定容器的长度为num，若容器变长，则以elem值填充新位置。如果容器变短，则末尾超出容器长度的元素被删除</span></span><br><span class="line">v.<span class="built_in">resize</span>(<span class="type">int</span> num,elem);</span><br><span class="line"><span class="comment">//容器的容量</span></span><br><span class="line">v.<span class="built_in">capacity</span>();</span><br><span class="line"><span class="comment">//容器预留len个元素长度，预留位置不初始化，元素不可访问</span></span><br><span class="line">v.<span class="built_in">reserve</span>(<span class="type">int</span> len);</span><br></pre></td></tr></table></figure><h2 id="数据存取"><a href="#数据存取" class="headerlink" title="数据存取"></a>数据存取</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//返回索引idx所指的数据，如果idx越界，抛出out_of_range异常</span></span><br><span class="line">v.<span class="built_in">at</span>(<span class="type">int</span> idx);</span><br><span class="line"><span class="comment">//返回索引idx所指的数据，越界时，运行直接报错</span></span><br><span class="line"><span class="keyword">operator</span>[] </span><br><span class="line"><span class="comment">//返回容器中第一个数据元素</span></span><br><span class="line">v.<span class="built_in">front</span>();</span><br><span class="line"><span class="comment">//返回容器中最后一个数据元素</span></span><br><span class="line">v.<span class="built_in">back</span>();</span><br></pre></td></tr></table></figure><h2 id="插入删除"><a href="#插入删除" class="headerlink" title="插入删除"></a>插入删除</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//迭代器指向位置pos插入count个元素elem</span></span><br><span class="line">v.<span class="built_in">insert</span>(const_iterator pos, <span class="type">int</span> count,elem);</span><br><span class="line"><span class="comment">//尾部插入元素elem</span></span><br><span class="line">v.<span class="built_in">push_back</span>(elem);</span><br><span class="line"><span class="comment">//删除最后一个元素</span></span><br><span class="line">v.<span class="built_in">pop_back</span>();</span><br><span class="line"><span class="comment">//删除迭代器从start到end之间的元素</span></span><br><span class="line">v.<span class="built_in">erase</span>(const_iterator start,const_iterator end);</span><br><span class="line"><span class="comment">//删除迭代器指向的元素</span></span><br><span class="line">v.<span class="built_in">erase</span>(const_iterator pos);</span><br><span class="line"><span class="comment">//删除容器中所有元素</span></span><br><span class="line">v.<span class="built_in">clear</span>();</span><br></pre></td></tr></table></figure><h2 id="收缩空间技巧"><a href="#收缩空间技巧" class="headerlink" title="收缩空间技巧"></a>收缩空间技巧</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//用v根据v实际大小初始化匿名对象，swap交换v和匿名对象指针，结束后匿名对象销毁</span></span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;(v).<span class="built_in">swap</span>(v);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> STL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> STL </tag>
            
            <tag> Vector </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>STL String容器</title>
      <link href="/_posts/STL/0String.md/"/>
      <url>/_posts/STL/0String.md/</url>
      
        <content type="html"><![CDATA[<h1 id="String容器"><a href="#String容器" class="headerlink" title="String容器"></a>String容器</h1><h2 id="查找第一次出现位置"><a href="#查找第一次出现位置" class="headerlink" title="查找第一次出现位置"></a>查找第一次出现位置</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">string.<span class="built_in">find</span>(<span class="string">&quot;&quot;</span>)</span><br><span class="line"><span class="comment">//返回int</span></span><br></pre></td></tr></table></figure><h2 id="查找最后一次出现位置"><a href="#查找最后一次出现位置" class="headerlink" title="查找最后一次出现位置"></a>查找最后一次出现位置</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">string.<span class="built_in">rfind</span>(<span class="string">&quot; &quot;</span>)</span><br><span class="line"><span class="comment">//返回int</span></span><br></pre></td></tr></table></figure><h2 id="替换"><a href="#替换" class="headerlink" title="替换"></a>替换</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">string.<span class="built_in">replace</span>(<span class="type">int</span> pos, <span class="type">int</span> n;<span class="type">const</span> string &amp;str)</span><br><span class="line"><span class="comment">//替换从pos开始n个字符为字符串str</span></span><br></pre></td></tr></table></figure><h2 id="比较"><a href="#比较" class="headerlink" title="比较"></a>比较</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">string.<span class="built_in">compare</span>(<span class="type">const</span> string &amp;str)</span><br><span class="line"><span class="comment">// &gt;返回1 &lt;返回-1 ==返回0</span></span><br></pre></td></tr></table></figure><h2 id="子串"><a href="#子串" class="headerlink" title="子串"></a>子串</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">string.<span class="built_in">substr</span>(<span class="type">int</span> pos,<span class="type">int</span> n)</span><br></pre></td></tr></table></figure><p> 返回由pos开始的n个字符组成的字符串</p><h2 id="插入"><a href="#插入" class="headerlink" title="插入"></a>插入</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">string.<span class="built_in">insert</span>(<span class="type">int</span> pos,<span class="type">const</span> string &amp;str)</span><br></pre></td></tr></table></figure><h2 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">string.<span class="built_in">erase</span>(<span class="type">int</span> pos,<span class="type">int</span> n)</span><br></pre></td></tr></table></figure><p> 删除从pos开始的n个字符</p>]]></content>
      
      
      <categories>
          
          <category> STL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> STL </tag>
            
            <tag> String </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git图形化操作</title>
      <link href="/_posts/Git/2GUI.md/"/>
      <url>/_posts/Git/2GUI.md/</url>
      
        <content type="html"><![CDATA[<h1 id="TortoiseGit"><a href="#TortoiseGit" class="headerlink" title="TortoiseGit"></a>TortoiseGit</h1><p>右键使用，图形化界面使用git</p><h1 id="JB中使用Git"><a href="#JB中使用Git" class="headerlink" title="JB中使用Git"></a>JB中使用Git</h1><h2 id="创建Git仓库"><a href="#创建Git仓库" class="headerlink" title="创建Git仓库"></a>创建Git仓库</h2><p>vcs–&gt;import into Version Control–&gt;Create Git Repository</p><h2 id="推送至远程仓库"><a href="#推送至远程仓库" class="headerlink" title="推送至远程仓库"></a>推送至远程仓库</h2><p>右键–&gt;Git–&gt;Repository–&gt;Push</p><h2 id="版本对比"><a href="#版本对比" class="headerlink" title="版本对比"></a>版本对比</h2><p>右键–&gt;Git–&gt;Compare with</p><h2 id="创建分支"><a href="#创建分支" class="headerlink" title="创建分支"></a>创建分支</h2><p>VCS–&gt;Git–&gt;Branches–&gt;New Branches</p><h2 id="切换分支"><a href="#切换分支" class="headerlink" title="切换分支"></a>切换分支</h2><p>VCS–&gt;Git–&gt;Branches–&gt;选择分支–&gt;Checkout</p>]]></content>
      
      
      <categories>
          
          <category> Git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git命令</title>
      <link href="/_posts/Git/1Command.md/"/>
      <url>/_posts/Git/1Command.md/</url>
      
        <content type="html"><![CDATA[<h1 id="命令"><a href="#命令" class="headerlink" title="命令"></a>命令</h1><h2 id="设置用户信息"><a href="#设置用户信息" class="headerlink" title="设置用户信息"></a>设置用户信息</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name “用户名”</span><br><span class="line">git config --global user.email <span class="string">&quot;email&quot;</span></span><br></pre></td></tr></table></figure><h2 id="查看配置信息"><a href="#查看配置信息" class="headerlink" title="查看配置信息"></a>查看配置信息</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --list</span><br><span class="line">git config user.name</span><br></pre></td></tr></table></figure><h2 id="在本地初始化git仓库"><a href="#在本地初始化git仓库" class="headerlink" title="在本地初始化git仓库"></a>在本地初始化git仓库</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git init</span><br></pre></td></tr></table></figure><h2 id="克隆远程仓库"><a href="#克隆远程仓库" class="headerlink" title="克隆远程仓库"></a>克隆远程仓库</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> &lt;url&gt;</span><br></pre></td></tr></table></figure><h2 id="查看文件状态-工作区的所有文件"><a href="#查看文件状态-工作区的所有文件" class="headerlink" title="查看文件状态 (工作区的所有文件)"></a>查看文件状态 (工作区的所有文件)</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git status</span><br><span class="line">git status -s  <span class="comment">#简洁输出</span></span><br></pre></td></tr></table></figure><h2 id="文件加入暂存区"><a href="#文件加入暂存区" class="headerlink" title="文件加入暂存区"></a>文件加入暂存区</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git add &lt;file name&gt;   <span class="comment">#改为已暂存</span></span><br><span class="line">git reset &lt;file name&gt; <span class="comment">#取消暂存</span></span><br></pre></td></tr></table></figure><h2 id="暂存区提交本地仓库"><a href="#暂存区提交本地仓库" class="headerlink" title="暂存区提交本地仓库"></a>暂存区提交本地仓库</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git commit -m <span class="string">&quot;日志信息&quot;</span>    <span class="comment">#提交所有暂存区文件</span></span><br><span class="line">git commit -a -m <span class="string">&quot;日志信息&quot;</span> <span class="comment">#先添加到暂存区，然后提交本地仓库（就不用执行add命令了）</span></span><br></pre></td></tr></table></figure><h2 id="删除工作区文件"><a href="#删除工作区文件" class="headerlink" title="删除工作区文件"></a>删除工作区文件</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">rm</span> &lt;file name&gt;  <span class="comment">#默认加入暂存区 从本地仓库删除要再commit</span></span><br></pre></td></tr></table></figure><h2 id="创建忽略列表文件"><a href="#创建忽略列表文件" class="headerlink" title="创建忽略列表文件"></a>创建忽略列表文件</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">touch</span> .gitignore</span><br></pre></td></tr></table></figure><h2 id="查看日志目录"><a href="#查看日志目录" class="headerlink" title="查看日志目录"></a>查看日志目录</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">log</span></span><br></pre></td></tr></table></figure><h2 id="添加远程仓库"><a href="#添加远程仓库" class="headerlink" title="添加远程仓库"></a>添加远程仓库</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote add &lt;shortname&gt; &lt;url&gt;</span><br></pre></td></tr></table></figure><h2 id="查看远程仓库"><a href="#查看远程仓库" class="headerlink" title="查看远程仓库"></a>查看远程仓库</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git remote -v                 <span class="comment">#-v显示详细信息</span></span><br><span class="line">git remote show [remote-name] <span class="comment">#超详细信息</span></span><br></pre></td></tr></table></figure><h2 id="移除本地远程仓库（只移除本地信息）"><a href="#移除本地远程仓库（只移除本地信息）" class="headerlink" title="移除本地远程仓库（只移除本地信息）"></a>移除本地远程仓库（只移除本地信息）</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote <span class="built_in">rm</span> [remote-name]</span><br></pre></td></tr></table></figure><h2 id="从远程仓库中抓取与拉取"><a href="#从远程仓库中抓取与拉取" class="headerlink" title="从远程仓库中抓取与拉取"></a>从远程仓库中抓取与拉取</h2><h3 id="抓取-不会自动合并数据-merge"><a href="#抓取-不会自动合并数据-merge" class="headerlink" title="抓取 不会自动合并数据(merge)"></a>抓取 不会自动合并数据(merge)</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git fetch ([remote-name] [branch-name])</span><br></pre></td></tr></table></figure><h4 id="合并到工作区"><a href="#合并到工作区" class="headerlink" title="合并到工作区"></a>合并到工作区</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git merge [remote-name]/[branch-name]</span><br></pre></td></tr></table></figure><h3 id="拉取-自动合并数据-merge"><a href="#拉取-自动合并数据-merge" class="headerlink" title="拉取 自动合并数据(merge)"></a>拉取 自动合并数据(merge)</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git pull ([remote-name] [branch-name])</span><br></pre></td></tr></table></figure><p>如果当前本地仓库不是从远程仓库克隆，而是本地创建的仓库，并且仓库中存在文件，此时再从远程仓库拉取文件的时候会报错，解决此问题可以在git pull命令后加入参数<code>-allow-unrelated-histories</code>， 此后会让输入日志 </p><h2 id="推送到远程仓库"><a href="#推送到远程仓库" class="headerlink" title="推送到远程仓库"></a>推送到远程仓库</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push [remote-name] [branch-name]</span><br></pre></td></tr></table></figure><h2 id="查看分支"><a href="#查看分支" class="headerlink" title="查看分支"></a>查看分支</h2><h3 id="查看本地所有分支"><a href="#查看本地所有分支" class="headerlink" title="查看本地所有分支"></a>查看本地所有分支</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git branch</span><br></pre></td></tr></table></figure><h3 id="查看所有远程分支"><a href="#查看所有远程分支" class="headerlink" title="查看所有远程分支"></a>查看所有远程分支</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git branch -r</span><br></pre></td></tr></table></figure><h3 id="查看所有本地和远程分支"><a href="#查看所有本地和远程分支" class="headerlink" title="查看所有本地和远程分支"></a>查看所有本地和远程分支</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git branch -a</span><br></pre></td></tr></table></figure><h2 id="创建本地分支"><a href="#创建本地分支" class="headerlink" title="创建本地分支"></a>创建本地分支</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git branch [branch-name]</span><br></pre></td></tr></table></figure><h2 id="切换本地分支"><a href="#切换本地分支" class="headerlink" title="切换本地分支"></a>切换本地分支</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout [branch-name]</span><br></pre></td></tr></table></figure><h2 id="分支本地合并"><a href="#分支本地合并" class="headerlink" title="分支本地合并"></a>分支本地合并</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git merge [branch-name] <span class="comment">#将[branch-name]合并到当前分支 冲突手动处理</span></span><br></pre></td></tr></table></figure><h2 id="删除本地分支"><a href="#删除本地分支" class="headerlink" title="删除本地分支"></a>删除本地分支</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git branch -d [branch-name]</span><br><span class="line">git branch -D [branch-name]  <span class="comment">#强制删除</span></span><br></pre></td></tr></table></figure><h2 id="删除远程分支"><a href="#删除远程分支" class="headerlink" title="删除远程分支"></a>删除远程分支</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push [remote-name] -d [branch-name]</span><br></pre></td></tr></table></figure><h2 id="创建本地标签"><a href="#创建本地标签" class="headerlink" title="创建本地标签"></a>创建本地标签</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git tag [tag-name]</span><br></pre></td></tr></table></figure><h2 id="列出已有本地标签"><a href="#列出已有本地标签" class="headerlink" title="列出已有本地标签"></a>列出已有本地标签</h2><h3 id="列出所有tag"><a href="#列出所有tag" class="headerlink" title="列出所有tag"></a>列出所有tag</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git tag</span><br></pre></td></tr></table></figure><h3 id="查看tag信息"><a href="#查看tag信息" class="headerlink" title="查看tag信息"></a>查看tag信息</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git show [tag]</span><br></pre></td></tr></table></figure><h2 id="标签推送至远程仓库"><a href="#标签推送至远程仓库" class="headerlink" title="标签推送至远程仓库"></a>标签推送至远程仓库</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push [remote-name] [tag-name]</span><br></pre></td></tr></table></figure><h2 id="检出本地标签"><a href="#检出本地标签" class="headerlink" title="检出本地标签"></a>检出本地标签</h2><p>创建一个分支指向某个tag</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout -b [branch-name] [tag-name]</span><br></pre></td></tr></table></figure><h2 id="删除标签"><a href="#删除标签" class="headerlink" title="删除标签"></a>删除标签</h2><h3 id="删除本地tag"><a href="#删除本地tag" class="headerlink" title="删除本地tag"></a>删除本地tag</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git tag -d [tag-name]</span><br></pre></td></tr></table></figure><h3 id="删除远程tag"><a href="#删除远程tag" class="headerlink" title="删除远程tag"></a>删除远程tag</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push [remote-name] :refs/tags/[tag-name]</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git概念</title>
      <link href="/_posts/Git/0Concept.md/"/>
      <url>/_posts/Git/0Concept.md/</url>
      
        <content type="html"><![CDATA[<h1 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h1><p><img src="/_posts/Git/0Concept.md/GitFrame.png"></p><h2 id="版本库"><a href="#版本库" class="headerlink" title="版本库"></a>版本库</h2><p> .git隐藏文件夹</p><h2 id="工作区"><a href="#工作区" class="headerlink" title="工作区"></a>工作区</h2><p> 包含.git文件夹的目录，存放开发的代码</p><h2 id="暂存区"><a href="#暂存区" class="headerlink" title="暂存区"></a>暂存区</h2><p> .git中的index文件，临时保存修改文件</p><h2 id="git工作目录下文件状态"><a href="#git工作目录下文件状态" class="headerlink" title="git工作目录下文件状态"></a>git工作目录下文件状态</h2><h3 id="untracked-未跟踪-未纳入版本控制"><a href="#untracked-未跟踪-未纳入版本控制" class="headerlink" title="untracked 未跟踪 未纳入版本控制"></a>untracked 未跟踪 未纳入版本控制</h3><h3 id="tracted-以跟踪-已纳入版本控制"><a href="#tracted-以跟踪-已纳入版本控制" class="headerlink" title="tracted 以跟踪 已纳入版本控制"></a>tracted 以跟踪 已纳入版本控制</h3><ul><li><p>Unmodified 未修改状态</p></li><li><p>Modified 已修改状态</p></li><li><p>Staged 已暂存状态</p><h2 id="忽略列表"><a href="#忽略列表" class="headerlink" title="忽略列表"></a>忽略列表</h2><p>不想被git管理的文件列表</p><p>工作目录中创建.gitignore文件（文件名固定）列出要忽略文件</p><p>列表具体写法CSDN查找</p><h2 id="分支"><a href="#分支" class="headerlink" title="分支"></a>分支</h2><p>主分支 master</p><h2 id="标签"><a href="#标签" class="headerlink" title="标签"></a>标签</h2><p>给历史中某一提交打上标签，以示重要，如标记某个版本号</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> Git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
